[
  {
    "query": "How can I read input from the console using the Scanner class in Java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.util.Scanner",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html",
          "class_id": 1900,
          "class_sentence": [
            {
              "sentence_text": "A scanner can read text from any object which implements the Readable interface.",
              "sentence_id": 353659
            },
            {
              "sentence_text": "If an invocation of the underlying readable's Readable.read(java.nio.CharBuffer) method throws an IOException then the scanner assumes that the end of the input has been reached.",
              "sentence_id": 353660
            }
          ],
          "method": [
            {
              "method_name": "java.util.Scanner.Scanner(java.io.InputStream)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a new Scanner that produces values scanned from the specified input stream.",
                  "sentence_id": 254288
                },
                {
                  "sentence_text": "Bytes from the stream are converted into characters using the underlying platform's default charset.",
                  "sentence_id": 399286
                }
              ],
              "method_id": 26956
            },
            {
              "method_name": "java.util.Scanner.Scanner(java.io.InputStream,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a new Scanner that produces values scanned from the specified input stream.",
                  "sentence_id": 254289
                },
                {
                  "sentence_text": "Bytes from the stream are converted into characters using the specified charset.",
                  "sentence_id": 399287
                }
              ],
              "method_id": 26957
            },
            {
              "method_name": "java.util.Scanner.Scanner(java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a new Scanner that produces values scanned from the specified file.",
                  "sentence_id": 254290
                },
                {
                  "sentence_text": "Bytes from the file are converted into characters using the underlying platform's default charset.",
                  "sentence_id": 399288
                }
              ],
              "method_id": 26958
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.Console",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/Console.html",
          "class_id": 919,
          "class_sentence": [
            {
              "sentence_text": "Methods to access the character-based console device, if any, associated with the current Java virtual machine.",
              "sentence_id": 232773
            },
            {
              "sentence_text": "The console-read methods return null when the end of the console input stream is reached, for example by typing control-D on Unix or control-Z on Windows.",
              "sentence_id": 345948
            }
          ],
          "method": [
            {
              "method_name": "java.io.Console.readLine()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single line of text from the console.",
                  "sentence_id": 243075
                }
              ],
              "method_id": 15882
            },
            {
              "method_name": "java.io.Console.readLine(java.lang.String,java.lang.Object...)",
              "method_sentence": [
                {
                  "sentence_text": "Provides a formatted prompt, then reads a single line of text from the console.",
                  "sentence_id": 243074
                }
              ],
              "method_id": 15881
            },
            {
              "method_name": "java.io.Console.reader()",
              "method_sentence": [
                {
                  "sentence_text": "This method is intended to be used by sophisticated applications, for example, a Scanner object which utilizes the rich parsing/scanning functionality provided by the Scanner: Console con = System.console(); if (con != null) { Scanner sc = new Scanner(con.reader()); ... } .",
                  "sentence_id": 377021
                },
                {
                  "sentence_text": "The Reader's read methods may block if a line bound has not been entered or reached on the console's input device.",
                  "sentence_id": 377024
                },
                {
                  "sentence_text": "Retrieves the unique Reader object associated with this console.",
                  "sentence_id": 243073
                }
              ],
              "method_id": 15880
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.BufferedReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html",
          "class_id": 913,
          "class_sentence": [
            {
              "sentence_text": "In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream.",
              "sentence_id": 345915
            },
            {
              "sentence_text": "Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.",
              "sentence_id": 232767
            }
          ],
          "method": [
            {
              "method_name": "java.io.BufferedReader.read(char[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the read method of the underlying stream.",
                  "sentence_id": 376942
                },
                {
                  "sentence_text": "This iterated read continues until one of the following conditions becomes true: The specified number of characters have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The ready method of the underlying stream returns false, indicating that further input requests would block.",
                  "sentence_id": 376943
                },
                {
                  "sentence_text": "If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1.",
                  "sentence_id": 376944
                }
              ],
              "method_id": 15805
            },
            {
              "method_name": "java.io.BufferedReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 242997
                }
              ],
              "method_id": 15804
            },
            {
              "method_name": "java.io.BufferedReader.lines()",
              "method_sentence": [
                {
                  "sentence_text": "After execution of the terminal stream operation there are no guarantees that the reader will be at a specific position from which to read the next character or line.",
                  "sentence_id": 376936
                },
                {
                  "sentence_text": "Returns a Stream, the elements of which are lines read from this BufferedReader.",
                  "sentence_id": 242994
                },
                {
                  "sentence_text": "The reader must not be operated on during the execution of the terminal stream operation.",
                  "sentence_id": 376934
                }
              ],
              "method_id": 15801
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA.DataInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA/DataInputStream.html",
          "class_id": 4122,
          "class_sentence": [
            {
              "sentence_text": "Defines the methods used to read primitive data types from input streams for unmarshaling custom value types.",
              "sentence_id": 235926
            },
            {
              "sentence_text": "This interface is used by user written custom unmarshaling code for custom value types.",
              "sentence_id": 367011
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_wstring()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL wide string from the input stream.",
                  "sentence_id": 276020
                }
              ],
              "method_id": 51273
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_wchar()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL wide character value from the input stream.",
                  "sentence_id": 276019
                }
              ],
              "method_id": 51272
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_short()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL short from the input stream.",
                  "sentence_id": 276008
                }
              ],
              "method_id": 51261
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA_2_3.portable.InputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA_2_3/portable/InputStream.html",
          "class_id": 4305,
          "class_sentence": [
            {
              "sentence_text": "InputStream provides for the reading of all of the mapped IDL types from the stream.",
              "sentence_id": 236105
            },
            {
              "sentence_text": "This class defines new methods that were added for CORBA 2.3.",
              "sentence_id": 367528
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA_2_3.portable.InputStream.read_value(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Unmarshalls a value type from the input stream.",
                  "sentence_id": 276892
                }
              ],
              "method_id": 52550
            },
            {
              "method_name": "org.omg.CORBA_2_3.portable.InputStream.read_value()",
              "method_sentence": [
                {
                  "sentence_text": "Unmarshalls a value type from the input stream.",
                  "sentence_id": 276889
                }
              ],
              "method_id": 52547
            },
            {
              "method_name": "org.omg.CORBA_2_3.portable.InputStream.read_value(java.io.Serializable)",
              "method_sentence": [
                {
                  "sentence_text": "Unmarshalls a value type from the input stream.",
                  "sentence_id": 276893
                }
              ],
              "method_id": 52551
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.FileInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/FileInputStream.html",
          "class_id": 924,
          "class_sentence": [
            {
              "sentence_text": "A FileInputStream obtains input bytes from a file in a file system.",
              "sentence_id": 232778
            },
            {
              "sentence_text": "For reading streams of characters, consider using FileReader.",
              "sentence_id": 346001
            }
          ],
          "method": [
            {
              "method_name": "java.io.FileInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a byte of data from this input stream.",
                  "sentence_id": 243207
                },
                {
                  "sentence_text": "This method blocks if no input is yet available.",
                  "sentence_id": 377302
                }
              ],
              "method_id": 15994
            },
            {
              "method_name": "java.io.FileInputStream.read(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "This method blocks until some input is available.",
                  "sentence_id": 377303
                },
                {
                  "sentence_text": "Reads up to b.length bytes of data from this input stream into an array of bytes.",
                  "sentence_id": 243208
                }
              ],
              "method_id": 15995
            },
            {
              "method_name": "java.io.FileInputStream.close()",
              "method_sentence": [
                {
                  "sentence_text": "Closes this file input stream and releases any system resources associated with the stream.",
                  "sentence_id": 243203
                },
                {
                  "sentence_text": "If this stream has an associated channel then the channel is closed as well.",
                  "sentence_id": 377298
                }
              ],
              "method_id": 15990
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.InputStreamReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html",
          "class_id": 934,
          "class_sentence": [
            {
              "sentence_text": "Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream.",
              "sentence_id": 346052
            },
            {
              "sentence_text": "An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset.",
              "sentence_id": 232788
            }
          ],
          "method": [
            {
              "method_name": "java.io.InputStreamReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 243287
                }
              ],
              "method_id": 16075
            },
            {
              "method_name": "java.io.InputStreamReader.ready()",
              "method_sentence": [
                {
                  "sentence_text": "An InputStreamReader is ready if its input buffer is not empty, or if bytes are available to be read from the underlying byte stream.",
                  "sentence_id": 377449
                },
                {
                  "sentence_text": "Tells whether this stream is ready to be read.",
                  "sentence_id": 243289
                }
              ],
              "method_id": 16077
            },
            {
              "method_name": "java.io.InputStreamReader.close()",
              "method_sentence": [
                {
                  "sentence_text": "Description copied from class: Reader",
                  "sentence_id": 243285
                }
              ],
              "method_id": 16073
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "All string literals in Java programs, such as \"abc\", are implemented as instances of this class.",
              "sentence_id": 346608
            },
            {
              "sentence_text": "The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings.",
              "sentence_id": 346617
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.getBytes(java.nio.charset.Charset)",
              "method_sentence": [
                {
                  "sentence_text": "This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array.",
                  "sentence_id": 380267
                },
                {
                  "sentence_text": "Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.",
                  "sentence_id": 245011
                },
                {
                  "sentence_text": "The CharsetEncoder class should be used when more control over the encoding process is required.",
                  "sentence_id": 380268
                }
              ],
              "method_id": 17667
            },
            {
              "method_name": "java.lang.String.String(byte[],java.nio.charset.Charset)",
              "method_sentence": [
                {
                  "sentence_text": "This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string.",
                  "sentence_id": 380214
                },
                {
                  "sentence_text": "Constructs a new String by decoding the specified array of bytes using the specified charset.",
                  "sentence_id": 244987
                },
                {
                  "sentence_text": "The CharsetDecoder class should be used when more control over the decoding process is required.",
                  "sentence_id": 380215
                }
              ],
              "method_id": 17643
            },
            {
              "method_name": "java.lang.String.String(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a new String by decoding the specified array of bytes using the platform's default charset.",
                  "sentence_id": 244989
                },
                {
                  "sentence_text": "The behavior of this constructor when the given bytes are not valid in the default charset is unspecified.",
                  "sentence_id": 380220
                },
                {
                  "sentence_text": "The CharsetDecoder class should be used when more control over the decoding process is required.",
                  "sentence_id": 380221
                }
              ],
              "method_id": 17645
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.DataInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/DataInputStream.html",
          "class_id": 920,
          "class_sentence": [
            {
              "sentence_text": "A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way.",
              "sentence_id": 232774
            },
            {
              "sentence_text": "An application uses a data output stream to write data that can later be read by a data input stream.",
              "sentence_id": 345953
            }
          ],
          "method": [
            {
              "method_name": "java.io.DataInputStream.readChar()",
              "method_sentence": [
                {
                  "sentence_text": "Bytes for this operation are read from the contained input stream.",
                  "sentence_id": 377046
                },
                {
                  "sentence_text": "See the general contract of the readChar method of DataInput.",
                  "sentence_id": 243104
                }
              ],
              "method_id": 15891
            },
            {
              "method_name": "java.io.DataInputStream.readLong()",
              "method_sentence": [
                {
                  "sentence_text": "Bytes for this operation are read from the contained input stream.",
                  "sentence_id": 377056
                },
                {
                  "sentence_text": "See the general contract of the readLong method of DataInput.",
                  "sentence_id": 243111
                }
              ],
              "method_id": 15898
            },
            {
              "method_name": "java.io.DataInputStream.readBoolean()",
              "method_sentence": [
                {
                  "sentence_text": "Bytes for this operation are read from the contained input stream.",
                  "sentence_id": 377044
                },
                {
                  "sentence_text": "See the general contract of the readBoolean method of DataInput.",
                  "sentence_id": 243102
                }
              ],
              "method_id": 15889
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.Reader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html",
          "class_id": 954,
          "class_sentence": [
            {
              "sentence_text": "Abstract class for reading character streams.",
              "sentence_id": 232808
            },
            {
              "sentence_text": "The only methods that a subclass must implement are read(char[], int, int) and close().",
              "sentence_id": 346204
            }
          ],
          "method": [
            {
              "method_name": "java.io.Reader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 243650
                },
                {
                  "sentence_text": "This method will block until a character is available, an I/O error occurs, or the end of the stream is reached.",
                  "sentence_id": 377899
                },
                {
                  "sentence_text": "Subclasses that intend to support efficient single-character input should override this method.",
                  "sentence_id": 377900
                }
              ],
              "method_id": 16421
            },
            {
              "method_name": "java.io.Reader.read(char[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.",
                  "sentence_id": 377902
                },
                {
                  "sentence_text": "Reads characters into a portion of an array.",
                  "sentence_id": 243652
                }
              ],
              "method_id": 16423
            },
            {
              "method_name": "java.io.Reader.read(char[])",
              "method_sentence": [
                {
                  "sentence_text": "This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.",
                  "sentence_id": 377901
                },
                {
                  "sentence_text": "Reads characters into an array.",
                  "sentence_id": 243651
                }
              ],
              "method_id": 16422
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How to wait for all threads to finish, using ExecutorService?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.util.concurrent.ExecutorService",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html",
          "class_id": 1955,
          "class_sentence": [
            {
              "sentence_text": "The shutdown() method will allow previously submitted tasks to execute before terminating, while the shutdownNow() method prevents waiting tasks from starting and attempts to stop currently executing tasks.",
              "sentence_id": 354038
            },
            {
              "sentence_text": "Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted.",
              "sentence_id": 354039
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.",
                  "sentence_id": 254861
                }
              ],
              "method_id": 27529
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.shutdownNow()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for actively executing tasks to terminate.",
                  "sentence_id": 400048
                },
                {
                  "sentence_text": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
                  "sentence_id": 254869
                },
                {
                  "sentence_text": "There are no guarantees beyond best-effort attempts to stop processing actively executing tasks.",
                  "sentence_id": 400050
                }
              ],
              "method_id": 27537
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400046
                },
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 254868
                },
                {
                  "sentence_text": "Invocation has no additional effect if already shut down.",
                  "sentence_id": 400045
                }
              ],
              "method_id": 27536
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html",
          "class_id": 1999,
          "class_sentence": [
            {
              "sentence_text": "When a new task is submitted in method execute(Runnable), and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle.",
              "sentence_id": 354614
            },
            {
              "sentence_text": "If corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread.",
              "sentence_id": 354636
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.shutdownNow()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for actively executing tasks to terminate.",
                  "sentence_id": 400910
                },
                {
                  "sentence_text": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
                  "sentence_id": 255730
                },
                {
                  "sentence_text": "This implementation cancels tasks via Thread.interrupt(), so any task that fails to respond to interrupts may never terminate.",
                  "sentence_id": 400913
                }
              ],
              "method_id": 28402
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400907
                },
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 255729
                },
                {
                  "sentence_text": "Invocation has no additional effect if already shut down.",
                  "sentence_id": 400906
                }
              ],
              "method_id": 28401
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()",
              "method_sentence": [
                {
                  "sentence_text": "Starts a core thread, causing it to idly wait for work.",
                  "sentence_id": 255721
                },
                {
                  "sentence_text": "This method will return false if all core threads have already been started.",
                  "sentence_id": 400890
                },
                {
                  "sentence_text": "This overrides the default policy of starting core threads only when new tasks are executed.",
                  "sentence_id": 400889
                }
              ],
              "method_id": 28393
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Thread",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
          "class_id": 1021,
          "class_sentence": [
            {
              "sentence_text": "When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon.",
              "sentence_id": 346663
            },
            {
              "sentence_text": "More than one thread may have the same name.",
              "sentence_id": 346679
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Thread.join(long)",
              "method_sentence": [
                {
                  "sentence_text": "Waits at most millis milliseconds for this thread to die.",
                  "sentence_id": 245232
                },
                {
                  "sentence_text": "As a thread terminates the this.notifyAll method is invoked.",
                  "sentence_id": 380858
                },
                {
                  "sentence_text": "It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
                  "sentence_id": 380859
                }
              ],
              "method_id": 17888
            },
            {
              "method_name": "java.lang.Thread.join(long,int)",
              "method_sentence": [
                {
                  "sentence_text": "It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
                  "sentence_id": 380862
                },
                {
                  "sentence_text": "As a thread terminates the this.notifyAll method is invoked.",
                  "sentence_id": 380861
                },
                {
                  "sentence_text": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die.",
                  "sentence_id": 245233
                }
              ],
              "method_id": 17889
            },
            {
              "method_name": "java.lang.Thread.start()",
              "method_sentence": [
                {
                  "sentence_text": "The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).",
                  "sentence_id": 380884
                },
                {
                  "sentence_text": "In particular, a thread may not be restarted once it has completed execution.",
                  "sentence_id": 380886
                },
                {
                  "sentence_text": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.",
                  "sentence_id": 245245
                }
              ],
              "method_id": 17901
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ForkJoinPool",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html",
          "class_id": 1984,
          "class_sentence": [
            {
              "sentence_text": "The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others.",
              "sentence_id": 354367
            },
            {
              "sentence_text": "A ForkJoinPool differs from other kinds of ExecutorService mainly by virtue of employing work-stealing: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist).",
              "sentence_id": 354360
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ForkJoinPool.isQuiescent()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if all worker threads are currently idle.",
                  "sentence_id": 255379
                },
                {
                  "sentence_text": "An idle worker is one that cannot obtain a task to execute because none are available to steal from other threads, and there are no pending submissions to the pool.",
                  "sentence_id": 400546
                },
                {
                  "sentence_text": "This method is conservative; it might not return true immediately upon idleness of all threads, but will eventually become true if threads remain inactive.",
                  "sentence_id": 400547
                }
              ],
              "method_id": 28048
            },
            {
              "method_name": "java.util.concurrent.ForkJoinPool.awaitTermination(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.",
                  "sentence_id": 255360
                },
                {
                  "sentence_text": "Because the commonPool() never terminates until program shutdown, when applied to the common pool, this method is equivalent to awaitQuiescence(long, TimeUnit) but always returns false.",
                  "sentence_id": 400527
                }
              ],
              "method_id": 28029
            },
            {
              "method_name": "java.util.concurrent.ForkJoinPool.awaitQuiescence(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise, waits and/or attempts to assist performing tasks until this pool isQuiescent() or the indicated timeout elapses.",
                  "sentence_id": 400526
                },
                {
                  "sentence_text": "If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask.helpQuiesce().",
                  "sentence_id": 255359
                }
              ],
              "method_id": 28028
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.Executors",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html",
          "class_id": 1983,
          "class_sentence": [
            {
              "sentence_text": "Methods that create and return a ThreadFactory that sets newly created threads to a known state.",
              "sentence_id": 354357
            },
            {
              "sentence_text": "Methods that create and return a Callable out of other closure-like forms, so they can be used in execution methods requiring Callable.",
              "sentence_id": 354358
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.Executors.newFixedThreadPool(int)",
              "method_sentence": [
                {
                  "sentence_text": "If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available.",
                  "sentence_id": 400496
                },
                {
                  "sentence_text": "If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.",
                  "sentence_id": 400497
                },
                {
                  "sentence_text": "The threads in the pool will exist until it is explicitly shutdown.",
                  "sentence_id": 400498
                }
              ],
              "method_id": 28009
            },
            {
              "method_name": "java.util.concurrent.Executors.newSingleThreadExecutor()",
              "method_sentence": [
                {
                  "sentence_text": "Creates an Executor that uses a single worker thread operating off an unbounded queue.",
                  "sentence_id": 255344
                },
                {
                  "sentence_text": "(Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.)",
                  "sentence_id": 400503
                },
                {
                  "sentence_text": "Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time.",
                  "sentence_id": 400504
                }
              ],
              "method_id": 28013
            },
            {
              "method_name": "java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)",
              "method_sentence": [
                {
                  "sentence_text": "If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available.",
                  "sentence_id": 400500
                },
                {
                  "sentence_text": "If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.",
                  "sentence_id": 400501
                },
                {
                  "sentence_text": "At any point, at most nThreads threads will be active processing tasks.",
                  "sentence_id": 400499
                }
              ],
              "method_id": 28010
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.CountDownLatch",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html",
          "class_id": 1977,
          "class_sentence": [
            {
              "sentence_text": "A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.",
              "sentence_id": 233831
            },
            {
              "sentence_text": "The await methods block until the current count reaches zero due to invocations of the countDown() method, after which all waiting threads are released and any subsequent invocations of await return immediately.",
              "sentence_id": 354254
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.CountDownLatch.await()",
              "method_sentence": [
                {
                  "sentence_text": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted.",
                  "sentence_id": 255268
                },
                {
                  "sentence_text": "If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting, then InterruptedException is thrown and the current thread's interrupted status is cleared.",
                  "sentence_id": 400406
                },
                {
                  "sentence_text": "If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: The count reaches zero due to invocations of the countDown() method; or Some other thread interrupts the current thread.",
                  "sentence_id": 400405
                }
              ],
              "method_id": 27937
            },
            {
              "method_name": "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses.",
                  "sentence_id": 255269
                },
                {
                  "sentence_text": "If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: The count reaches zero due to invocations of the countDown() method; or Some other thread interrupts the current thread; or The specified waiting time elapses.",
                  "sentence_id": 400408
                },
                {
                  "sentence_text": "If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting, then InterruptedException is thrown and the current thread's interrupted status is cleared.",
                  "sentence_id": 400410
                }
              ],
              "method_id": 27938
            },
            {
              "method_name": "java.util.concurrent.CountDownLatch.countDown()",
              "method_sentence": [
                {
                  "sentence_text": "If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes.",
                  "sentence_id": 400414
                },
                {
                  "sentence_text": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero.",
                  "sentence_id": 255270
                },
                {
                  "sentence_text": "If the current count equals zero then nothing happens.",
                  "sentence_id": 400415
                }
              ],
              "method_id": 27939
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.Future",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html",
          "class_id": 1958,
          "class_sentence": [
            {
              "sentence_text": "Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation.",
              "sentence_id": 354056
            },
            {
              "sentence_text": "The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready.",
              "sentence_id": 354057
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.Future.cancel(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.",
                  "sentence_id": 400058
                },
                {
                  "sentence_text": "If successful, and this task has not started when cancel is called, this task should never run.",
                  "sentence_id": 400057
                },
                {
                  "sentence_text": "Attempts to cancel execution of this task.",
                  "sentence_id": 254876
                }
              ],
              "method_id": 27544
            },
            {
              "method_name": "java.util.concurrent.Future.isCancelled()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if this task was cancelled before it completed normally.",
                  "sentence_id": 254879
                }
              ],
              "method_id": 27547
            },
            {
              "method_name": "java.util.concurrent.Future.get()",
              "method_sentence": [
                {
                  "sentence_text": "Waits if necessary for the computation to complete, and then retrieves its result.",
                  "sentence_id": 254877
                }
              ],
              "method_id": 27545
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ForkJoinTask",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html",
          "class_id": 1985,
          "class_sentence": [
            {
              "sentence_text": "Otherwise, executions may encounter a form of deadlock as tasks cyclically wait for each other.",
              "sentence_id": 354416
            },
            {
              "sentence_text": "Computations should ideally avoid synchronized methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling.",
              "sentence_id": 354393
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ForkJoinTask.peekNextLocalTask()",
              "method_sentence": [
                {
                  "sentence_text": "Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available.",
                  "sentence_id": 255422
                },
                {
                  "sentence_text": "There is no guarantee that this task will actually be polled or executed next.",
                  "sentence_id": 400601
                },
                {
                  "sentence_text": "Conversely, this method may return null even if a task exists but cannot be accessed without contention with other threads.",
                  "sentence_id": 400602
                }
              ],
              "method_id": 28092
            },
            {
              "method_name": "java.util.concurrent.ForkJoinTask.pollNextLocalTask()",
              "method_sentence": [
                {
                  "sentence_text": "Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool.",
                  "sentence_id": 255423
                },
                {
                  "sentence_text": "This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
                  "sentence_id": 400604
                }
              ],
              "method_id": 28093
            },
            {
              "method_name": "java.util.concurrent.ForkJoinTask.pollTask()",
              "method_sentence": [
                {
                  "sentence_text": "If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available.",
                  "sentence_id": 255424
                },
                {
                  "sentence_text": "Availability may be transient, so a null result does not necessarily imply quiescence of the pool this task is operating in.",
                  "sentence_id": 400605
                },
                {
                  "sentence_text": "This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
                  "sentence_id": 400606
                }
              ],
              "method_id": 28094
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.CyclicBarrier",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html",
          "class_id": 1979,
          "class_sentence": [
            {
              "sentence_text": "The barrier is called cyclic because it can be re-used after the waiting threads are released.",
              "sentence_id": 354325
            },
            {
              "sentence_text": "A CyclicBarrier supports an optional Runnable command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released.",
              "sentence_id": 354326
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.CyclicBarrier.await(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or The specified timeout elapses; or Some other thread interrupts the current thread; or Some other thread interrupts one of the other waiting threads; or Some other thread times out while waiting for barrier; or Some other thread invokes reset() on this barrier.",
                  "sentence_id": 400443
                },
                {
                  "sentence_text": "If any thread is interrupted while waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken state.",
                  "sentence_id": 400448
                },
                {
                  "sentence_text": "If the barrier is reset() while any thread is waiting, or if the barrier is broken when await is invoked, or while any thread is waiting, then BrokenBarrierException is thrown.",
                  "sentence_id": 400447
                }
              ],
              "method_id": 27968
            },
            {
              "method_name": "java.util.concurrent.CyclicBarrier.await()",
              "method_sentence": [
                {
                  "sentence_text": "If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or Some other thread interrupts the current thread; or Some other thread interrupts one of the other waiting threads; or Some other thread times out while waiting for barrier; or Some other thread invokes reset() on this barrier.",
                  "sentence_id": 400437
                },
                {
                  "sentence_text": "If the barrier is reset() while any thread is waiting, or if the barrier is broken when await is invoked, or while any thread is waiting, then BrokenBarrierException is thrown.",
                  "sentence_id": 400439
                },
                {
                  "sentence_text": "If any thread is interrupted while waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken state.",
                  "sentence_id": 400440
                }
              ],
              "method_id": 27967
            },
            {
              "method_name": "java.util.concurrent.CyclicBarrier.CyclicBarrier(int,java.lang.Runnable)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new CyclicBarrier that will trip when the given number of parties (threads) are waiting upon it, and which will execute the given barrier action when the barrier is tripped, performed by the last thread entering the barrier.",
                  "sentence_id": 255296
                }
              ],
              "method_id": 27965
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ScheduledThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html",
          "class_id": 1995,
          "class_sentence": [
            {
              "sentence_text": "By default, such a cancelled task is not automatically removed from the work queue until its delay elapses.",
              "sentence_id": 354550
            },
            {
              "sentence_text": "While different executions may be performed by different threads, the effects of prior executions happen-before those of subsequent ones.",
              "sentence_id": 354554
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for actively executing tasks to terminate.",
                  "sentence_id": 400787
                },
                {
                  "sentence_text": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
                  "sentence_id": 255620
                },
                {
                  "sentence_text": "This implementation cancels tasks via Thread.interrupt(), so any task that fails to respond to interrupts may never terminate.",
                  "sentence_id": 400790
                }
              ],
              "method_id": 28292
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400783
                },
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 255619
                },
                {
                  "sentence_text": "And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.",
                  "sentence_id": 400786
                }
              ],
              "method_id": 28291
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the task queue used by this executor.",
                  "sentence_id": 255610
                },
                {
                  "sentence_text": "Each element of this queue is a ScheduledFuture, including those tasks submitted using execute which are for scheduling purposes used as the basis of a zero-delay ScheduledFuture.",
                  "sentence_id": 400774
                },
                {
                  "sentence_text": "Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute.",
                  "sentence_id": 400775
                }
              ],
              "method_id": 28282
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Listing only files in directory",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.nio.file.FileVisitor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileVisitor.html",
          "class_id": 1331,
          "class_sentence": [
            {
              "sentence_text": "In that case, symbolic links should be followed and the target directory should be created before the entries in the directory are copied.",
              "sentence_id": 348891
            },
            {
              "sentence_text": "In that case, each directory should be deleted after the entries in the directory are deleted.",
              "sentence_id": 348888
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.FileVisitor.visitFileFailed(java.nio.file.FileVisitor,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.",
                  "sentence_id": 385467
                },
                {
                  "sentence_text": "Invoked for a file that could not be visited.",
                  "sentence_id": 247757
                }
              ],
              "method_id": 20410
            },
            {
              "method_name": "java.nio.file.FileVisitor.visitFileFailed(T,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.",
                  "sentence_id": 516915
                },
                {
                  "sentence_text": "Invoked for a file that could not be visited.",
                  "sentence_id": 309391
                }
              ],
              "method_id": 83080
            },
            {
              "method_name": "java.nio.file.FileVisitor.preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked for a directory before entries in the directory are visited.",
                  "sentence_id": 309389
                },
                {
                  "sentence_text": "If this method returns CONTINUE, then entries in the directory are visited.",
                  "sentence_id": 516911
                },
                {
                  "sentence_text": "If this method returns SKIP_SUBTREE or SKIP_SIBLINGS then entries in the directory (and any descendants) will not be visited.",
                  "sentence_id": 516912
                }
              ],
              "method_id": 83078
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.File",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/File.html",
          "class_id": 922,
          "class_sentence": [
            {
              "sentence_text": "Instances of this class may or may not denote an actual file-system object such as a file or a directory.",
              "sentence_id": 345981
            },
            {
              "sentence_text": "User interfaces and operating systems use system-dependent pathname strings to name files and directories.",
              "sentence_id": 345957
            }
          ],
          "method": [
            {
              "method_name": "java.io.File.list()",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise an array of strings is returned, one for each file or directory in the directory.",
                  "sentence_id": 377202
                },
                {
                  "sentence_text": "Names denoting the directory itself and the directory's parent directory are not included in the result.",
                  "sentence_id": 377203
                },
                {
                  "sentence_text": "Note that the Files class defines the newDirectoryStream method to open a directory and iterate over the names of the files in the directory.",
                  "sentence_id": 377206
                }
              ],
              "method_id": 15959
            },
            {
              "method_name": "java.io.File.listFiles()",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise an array of File objects is returned, one for each file or directory in the directory.",
                  "sentence_id": 377212
                },
                {
                  "sentence_text": "Note that the Files class defines the newDirectoryStream method to open a directory and iterate over the names of the files in the directory.",
                  "sentence_id": 377217
                },
                {
                  "sentence_text": "Pathnames denoting the directory itself and the directory's parent directory are not included in the result.",
                  "sentence_id": 377213
                }
              ],
              "method_id": 15961
            },
            {
              "method_name": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The Files.createTempFile method provides an alternative method to create an empty file in the temporary-file directory.",
                  "sentence_id": 377137
                },
                {
                  "sentence_text": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name.",
                  "sentence_id": 243149
                },
                {
                  "sentence_text": "Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.",
                  "sentence_id": 377138
                }
              ],
              "method_id": 15936
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.Files",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html",
          "class_id": 1342,
          "class_sentence": [
            {
              "sentence_text": "This class consists exclusively of static methods that operate on files, directories, or other types of files.",
              "sentence_id": 233196
            },
            {
              "sentence_text": "In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.",
              "sentence_id": 348976
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.Files.deleteIfExists(java.nio.file.Path)",
              "method_sentence": [
                {
                  "sentence_text": "If the file is a directory then the directory must be empty.",
                  "sentence_id": 385744
                },
                {
                  "sentence_text": "In some implementations a directory has entries for special files or links that are created when the directory is created.",
                  "sentence_id": 385745
                },
                {
                  "sentence_text": "As with the delete(Path) method, an implementation may need to examine the file to determine if the file is a directory.",
                  "sentence_id": 385741
                }
              ],
              "method_id": 20478
            },
            {
              "method_name": "java.nio.file.Files.delete(java.nio.file.Path)",
              "method_sentence": [
                {
                  "sentence_text": "If the file is a directory then the directory must be empty.",
                  "sentence_id": 385736
                },
                {
                  "sentence_text": "This method can be used with the walkFileTree method to delete a directory and all entries in the directory, or an entire file-tree where required.",
                  "sentence_id": 385739
                },
                {
                  "sentence_text": "In some implementations a directory has entries for special files or links that are created when the directory is created.",
                  "sentence_id": 385737
                }
              ],
              "method_id": 20477
            },
            {
              "method_name": "java.nio.file.Files.move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)",
              "method_sentence": [
                {
                  "sentence_text": "In some implementations a directory has entries for special files or links that are created when the directory is created.",
                  "sentence_id": 385851
                },
                {
                  "sentence_text": "For example, renaming a directory on the same FileStore will usually not require moving the entries in the directory.",
                  "sentence_id": 385854
                },
                {
                  "sentence_text": "When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory.",
                  "sentence_id": 385853
                }
              ],
              "method_id": 20498
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.FilenameFilter",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/FilenameFilter.html",
          "class_id": 904,
          "class_sentence": [
            {
              "sentence_text": "These instances are used to filter directory listings in the list method of class File, and by the Abstract Window Toolkit's file dialog component.",
              "sentence_id": 345863
            },
            {
              "sentence_text": "Instances of classes that implement this interface are used to filter filenames.",
              "sentence_id": 232758
            }
          ],
          "method": []
        }
      ],
      [
        {
          "class_name": "java.nio.file.Path",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html",
          "class_id": 1333,
          "class_sentence": [
            {
              "sentence_text": "Accessing Files Paths may be used with the Files class to operate on files, directories, and other types of files.",
              "sentence_id": 348910
            },
            {
              "sentence_text": "The other name elements are directory names.",
              "sentence_id": 348899
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.Path.getFileName()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the name of the file or directory denoted by this path as a Path object.",
                  "sentence_id": 247762
                },
                {
                  "sentence_text": "The file name is the farthest element from the root in the directory hierarchy.",
                  "sentence_id": 385485
                }
              ],
              "method_id": 20415
            },
            {
              "method_name": "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)",
              "method_sentence": [
                {
                  "sentence_text": "The events parameter is the events to register and may contain the following events: ENTRY_CREATE - entry created or moved into the directory ENTRY_DELETE - entry deleted or moved out of the directory ENTRY_MODIFY - entry in directory was modified The context for these events is the relative path between the directory located by this path, and the path that locates the directory entry that is created, deleted, or modified.",
                  "sentence_id": 385513
                },
                {
                  "sentence_text": "In this release, this path locates a directory that exists.",
                  "sentence_id": 385511
                },
                {
                  "sentence_text": "The directory is registered with the watch service so that entries in the directory can be watched.",
                  "sentence_id": 385512
                }
              ],
              "method_id": 20425
            },
            {
              "method_name": "java.nio.file.Path.normalize()",
              "method_sentence": [
                {
                  "sentence_text": "and \"..\" are special names used to indicate the current directory and parent directory.",
                  "sentence_id": 385504
                },
                {
                  "sentence_text": "This method does not access the file system; the path may not locate a file that exists.",
                  "sentence_id": 385508
                },
                {
                  "sentence_text": "In such file systems all occurrences of \".\"",
                  "sentence_id": 385505
                }
              ],
              "method_id": 20424
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.attribute.BasicFileAttributes",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/attribute/BasicFileAttributes.html",
          "class_id": 1377,
          "class_sentence": [
            {
              "sentence_text": "Basic attributes associated with a file in a file system.",
              "sentence_id": 233231
            },
            {
              "sentence_text": "Basic file attributes are attributes that are common to many file systems and consist of mandatory and optional file attributes as defined by this interface.",
              "sentence_id": 349053
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.attribute.BasicFileAttributes.isDirectory()",
              "method_sentence": [
                {
                  "sentence_text": "Tells whether the file is a directory.",
                  "sentence_id": 247997
                }
              ],
              "method_id": 20650
            },
            {
              "method_name": "java.nio.file.attribute.BasicFileAttributes.fileKey()",
              "method_sentence": [
                {
                  "sentence_text": "Such identifiers are important for operations such as file tree traversal in file systems that support symbolic links or file systems that allow a file to be an entry in more than one directory.",
                  "sentence_id": 386324
                },
                {
                  "sentence_text": "If the file system and files remain static, and two files are the same with non-null file keys, then their file keys are equal.",
                  "sentence_id": 386329
                },
                {
                  "sentence_text": "Whether a file system re-uses identifiers after a file is deleted is implementation dependent and therefore unspecified.",
                  "sentence_id": 386327
                }
              ],
              "method_id": 20649
            },
            {
              "method_name": "java.nio.file.attribute.BasicFileAttributes.size()",
              "method_sentence": [
                {
                  "sentence_text": "The size of files that are not regular files is implementation specific and therefore unspecified.",
                  "sentence_id": 386333
                },
                {
                  "sentence_text": "Returns the size of the file (in bytes).",
                  "sentence_id": 248003
                },
                {
                  "sentence_text": "The size may differ from the actual size on the file system due to compression, support for sparse files, or other reasons.",
                  "sentence_id": 386332
                }
              ],
              "method_id": 20656
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.JarURLConnection",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/JarURLConnection.html",
          "class_id": 1201,
          "class_sentence": [
            {
              "sentence_text": "if the specification begins with a '/', the Jar directory is ignored, and the spec is considered to be at the root of the Jar file.",
              "sentence_id": 347881
            },
            {
              "sentence_text": "A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file.",
              "sentence_id": 233055
            }
          ],
          "method": [
            {
              "method_name": "java.net.JarURLConnection.getEntryName()",
              "method_sentence": [
                {
                  "sentence_text": "This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry.",
                  "sentence_id": 383174
                },
                {
                  "sentence_text": "Return the entry name for this connection.",
                  "sentence_id": 246701
                }
              ],
              "method_id": 19347
            },
            {
              "method_name": "java.net.JarURLConnection.getJarEntry()",
              "method_sentence": [
                {
                  "sentence_text": "This method returns null if the JAR file URL corresponding to this connection points to a JAR file and not a JAR file entry.",
                  "sentence_id": 383175
                },
                {
                  "sentence_text": "Return the JAR entry object for this connection, if any.",
                  "sentence_id": 246702
                }
              ],
              "method_id": 19348
            },
            {
              "method_name": "java.net.JarURLConnection.getJarFileURL()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the URL for the Jar file for this connection.",
                  "sentence_id": 246704
                }
              ],
              "method_id": 19350
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.zip.ZipFile",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/zip/ZipFile.html",
          "class_id": 2157,
          "class_sentence": [
            {
              "sentence_text": "This class is used to read entries from a zip file.",
              "sentence_id": 234011
            },
            {
              "sentence_text": "Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown.",
              "sentence_id": 355734
            }
          ],
          "method": [
            {
              "method_name": "java.util.zip.ZipFile.stream()",
              "method_sentence": [
                {
                  "sentence_text": "Entries appear in the Stream in the order they appear in the central directory of the ZIP file.",
                  "sentence_id": 402997
                },
                {
                  "sentence_text": "Return an ordered Stream over the ZIP file entries.",
                  "sentence_id": 257202
                }
              ],
              "method_id": 30117
            },
            {
              "method_name": "java.util.zip.ZipFile.ZipFile(java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "Opens a ZIP file for reading given the specified File object.",
                  "sentence_id": 257190
                },
                {
                  "sentence_text": "The UTF-8 charset is used to decode the entry names and comments.",
                  "sentence_id": 402989
                }
              ],
              "method_id": 30105
            },
            {
              "method_name": "java.util.zip.ZipFile.ZipFile(java.io.File,java.nio.charset.Charset)",
              "method_sentence": [
                {
                  "sentence_text": "Opens a ZIP file for reading given the specified File object.",
                  "sentence_id": 257193
                }
              ],
              "method_id": 30108
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.List",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/List.html",
          "class_id": 1824,
          "class_sentence": [
            {
              "sentence_text": "A method is provided to obtain a list iterator that starts at a specified position in the list.",
              "sentence_id": 352016
            },
            {
              "sentence_text": "The user can access elements by their integer index (position in the list), and search for elements in the list.",
              "sentence_id": 352005
            }
          ],
          "method": [
            {
              "method_name": "java.util.List.subList(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The returned list supports all of the optional list operations supported by this list.",
                  "sentence_id": 396626
                },
                {
                  "sentence_text": "The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list.",
                  "sentence_id": 396631
                },
                {
                  "sentence_text": "The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.",
                  "sentence_id": 396625
                }
              ],
              "method_id": 25614
            },
            {
              "method_name": "java.util.List.add(java.util.List)",
              "method_sentence": [
                {
                  "sentence_text": "Lists that support this operation may place limitations on what elements may be added to this list.",
                  "sentence_id": 396583
                },
                {
                  "sentence_text": "Appends the specified element to the end of this list (optional operation).",
                  "sentence_id": 252921
                },
                {
                  "sentence_text": "List classes should clearly specify in their documentation any restrictions on what elements may be added.",
                  "sentence_id": 396585
                }
              ],
              "method_id": 25589
            },
            {
              "method_name": "java.util.List.clear()",
              "method_sentence": [
                {
                  "sentence_text": "The list will be empty after this call returns.",
                  "sentence_id": 396593
                },
                {
                  "sentence_text": "Removes all of the elements from this list (optional operation).",
                  "sentence_id": 252925
                }
              ],
              "method_id": 25593
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.ArrayList",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html",
          "class_id": 1854,
          "class_sentence": [
            {
              "sentence_text": "Implements all optional list operations, and permits all elements, including null.",
              "sentence_id": 352289
            },
            {
              "sentence_text": "This is best done at creation time, to prevent accidental unsynchronized access to the list: List list = Collections.synchronizedList(new ArrayList(...)); .",
              "sentence_id": 352308
            }
          ],
          "method": [
            {
              "method_name": "java.util.ArrayList.subList(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The returned list supports all of the optional list operations.",
                  "sentence_id": 397274
                },
                {
                  "sentence_text": "The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list.",
                  "sentence_id": 397279
                },
                {
                  "sentence_text": "Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list.",
                  "sentence_id": 397276
                }
              ],
              "method_id": 25932
            },
            {
              "method_name": "java.util.ArrayList.clear()",
              "method_sentence": [
                {
                  "sentence_text": "The list will be empty after this call returns.",
                  "sentence_id": 397248
                },
                {
                  "sentence_text": "Removes all of the elements from this list.",
                  "sentence_id": 253241
                }
              ],
              "method_id": 25909
            },
            {
              "method_name": "java.util.ArrayList.retainAll(java.util.Collection<?>)",
              "method_sentence": [
                {
                  "sentence_text": "In other words, removes from this list all of its elements that are not contained in the specified collection.",
                  "sentence_id": 397269
                },
                {
                  "sentence_text": "Retains only the elements in this list that are contained in the specified collection.",
                  "sentence_id": 253259
                }
              ],
              "method_id": 25927
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Is there a way to instantiate a class by name in Java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.lang.ClassLoader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html",
          "class_id": 995,
          "class_sentence": [
            {
              "sentence_text": "Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime.",
              "sentence_id": 346345
            },
            {
              "sentence_text": "Applications implement subclasses of ClassLoader in order to extend the manner in which the Java virtual machine dynamically loads classes.",
              "sentence_id": 346347
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ClassLoader.findSystemClass(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "This method loads the class through the system class loader (see getSystemClassLoader()).",
                  "sentence_id": 378614
                },
                {
                  "sentence_text": "The Class object returned might have more than one ClassLoader associated with it.",
                  "sentence_id": 378615
                },
                {
                  "sentence_text": "Subclasses of ClassLoader need not usually invoke this method, because most class loaders need to override just findClass(String).",
                  "sentence_id": 378616
                }
              ],
              "method_id": 17068
            },
            {
              "method_name": "java.lang.ClassLoader.getSystemClassLoader()",
              "method_sentence": [
                {
                  "sentence_text": "An instance is then created using this constructor with the default system class loader as the parameter.",
                  "sentence_id": 378637
                },
                {
                  "sentence_text": "The class is loaded using the default system class loader and must define a public constructor that takes a single parameter of type ClassLoader which is used as the delegation parent.",
                  "sentence_id": 378636
                },
                {
                  "sentence_text": "If the system property \"java.system.class.loader\" is defined when this method is first invoked then the value of that property is taken to be the name of a class that will be returned as the system class loader.",
                  "sentence_id": 378635
                }
              ],
              "method_id": 17076
            },
            {
              "method_name": "java.lang.ClassLoader.loadClass(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "It is invoked by the Java virtual machine to resolve class references.",
                  "sentence_id": 378646
                },
                {
                  "sentence_text": "Loads the class with the specified binary name.",
                  "sentence_id": 244389
                },
                {
                  "sentence_text": "This method searches for classes in the same manner as the loadClass(String, boolean) method.",
                  "sentence_id": 378645
                }
              ],
              "method_id": 17080
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Class",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html",
          "class_id": 994,
          "class_sentence": [
            {
              "sentence_text": "Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader.",
              "sentence_id": 346336
            },
            {
              "sentence_text": "Instances of the class Class represent classes and interfaces in a running Java application.",
              "sentence_id": 232848
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...)",
              "method_sentence": [
                {
                  "sentence_text": "Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.",
                  "sentence_id": 378499
                },
                {
                  "sentence_text": "Static methods declared in superinterfaces of the class or interface represented by this Class object are not considered members of the class or interface.",
                  "sentence_id": 378503
                },
                {
                  "sentence_text": "If this Class object represents an array type, then this method does not find the clone() method.",
                  "sentence_id": 378502
                }
              ],
              "method_id": 17027
            },
            {
              "method_name": "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>)",
              "method_sentence": [
                {
                  "sentence_text": "Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.",
                  "sentence_id": 516525
                },
                {
                  "sentence_text": "Static methods declared in superinterfaces of the class or interface represented by this Class object are not considered members of the class or interface.",
                  "sentence_id": 516529
                },
                {
                  "sentence_text": "If this Class object represents an array type, then this method does not find the clone() method.",
                  "sentence_id": 516528
                }
              ],
              "method_id": 83003
            },
            {
              "method_name": "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Class object associated with the class or interface with the given string name, using the given class loader.",
                  "sentence_id": 244304
                },
                {
                  "sentence_text": "The specified class loader is used to load the class or interface.",
                  "sentence_id": 378389
                },
                {
                  "sentence_text": "Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface.",
                  "sentence_id": 378388
                }
              ],
              "method_id": 16995
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.reflect.Constructor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html",
          "class_id": 1157,
          "class_sentence": [
            {
              "sentence_text": "Constructor provides information about, and access to, a single constructor for a class.",
              "sentence_id": 233011
            },
            {
              "sentence_text": "Constructor permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an IllegalArgumentException if a narrowing conversion would occur.",
              "sentence_id": 347534
            }
          ],
          "method": [
            {
              "method_name": "java.lang.reflect.Constructor.newInstance(java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "If the constructor's declaring class is an inner class in a non-static context, the first argument to the constructor needs to be the enclosing instance; see section 15.9.3 of The Java™ Language Specification.",
                  "sentence_id": 516712
                },
                {
                  "sentence_text": "Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.",
                  "sentence_id": 309354
                },
                {
                  "sentence_text": "If the required access and argument checks succeed and the instantiation will proceed, the constructor's declaring class is initialized if it has not already been initialized.",
                  "sentence_id": 516713
                }
              ],
              "method_id": 83043
            },
            {
              "method_name": "java.lang.reflect.Constructor.newInstance(java.lang.Object...)",
              "method_sentence": [
                {
                  "sentence_text": "If the constructor's declaring class is an inner class in a non-static context, the first argument to the constructor needs to be the enclosing instance; see section 15.9.3 of The Java™ Language Specification.",
                  "sentence_id": 382282
                },
                {
                  "sentence_text": "Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.",
                  "sentence_id": 246065
                },
                {
                  "sentence_text": "If the required access and argument checks succeed and the instantiation will proceed, the constructor's declaring class is initialized if it has not already been initialized.",
                  "sentence_id": 382283
                }
              ],
              "method_id": 18703
            },
            {
              "method_name": "java.lang.reflect.Constructor.getDeclaringClass()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Class object representing the class or interface that declares the executable represented by this object.",
                  "sentence_id": 246052
                }
              ],
              "method_id": 18690
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.reflect.Field",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html",
          "class_id": 1159,
          "class_sentence": [
            {
              "sentence_text": "A Field provides information about, and dynamic access to, a single field of a class or an interface.",
              "sentence_id": 233013
            },
            {
              "sentence_text": "The reflected field may be a class (static) field or an instance field.",
              "sentence_id": 347535
            }
          ],
          "method": [
            {
              "method_name": "java.lang.reflect.Field.getDeclaringClass()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Class object representing the class or interface that declares the field represented by this Field object.",
                  "sentence_id": 246098
                }
              ],
              "method_id": 18736
            },
            {
              "method_name": "java.lang.reflect.Field.get(java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "If this Field object is enforcing Java language access control, and the underlying field is inaccessible, the method throws an IllegalAccessException.",
                  "sentence_id": 382337
                },
                {
                  "sentence_text": "Otherwise, the value is retrieved from the underlying instance or static field.",
                  "sentence_id": 382339
                },
                {
                  "sentence_text": "If the specified object is not an instance of the class or interface declaring the underlying field, the method throws an IllegalArgumentException.",
                  "sentence_id": 382336
                }
              ],
              "method_id": 18728
            },
            {
              "method_name": "java.lang.reflect.Field.equals(java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "Two Field objects are the same if they were declared by the same class and have the same name and type.",
                  "sentence_id": 382331
                },
                {
                  "sentence_text": "Returns true if the objects are the same.",
                  "sentence_id": 382330
                },
                {
                  "sentence_text": "Compares this Field against the specified object.",
                  "sentence_id": 246089
                }
              ],
              "method_id": 18727
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA.Object",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA/Object.html",
          "class_id": 4138,
          "class_sentence": [
            {
              "sentence_text": "Default implementations of the methods in the interface org.omg.CORBA.Object are provided in the class org.omg.CORBA.portable.ObjectImpl, which is the base class for stubs and object implementations.",
              "sentence_id": 367045
            },
            {
              "sentence_text": "The org.omg.CORBA.Object interface is the root of the inheritance hierarchy for all CORBA object references in the Java programming language, analogous to java.rmi.Remote for RMI remote objects.",
              "sentence_id": 367041
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA.Object._is_a(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Checks whether this object is an instance of a class that implements the given interface.",
                  "sentence_id": 276138
                }
              ],
              "method_id": 51391
            },
            {
              "method_name": "org.omg.CORBA.Object._duplicate()",
              "method_sentence": [
                {
                  "sentence_text": "Note that this method is not very useful in the Java platform, since memory management is handled by the VM.",
                  "sentence_id": 422675
                },
                {
                  "sentence_text": "The server object implementation is not involved in creating the duplicate, and the implementation cannot distinguish whether the original object reference or a duplicate was used to make a request.",
                  "sentence_id": 422674
                },
                {
                  "sentence_text": "Returns a duplicate of this CORBA object reference.",
                  "sentence_id": 276133
                }
              ],
              "method_id": 51386
            },
            {
              "method_name": "org.omg.CORBA.Object._get_interface_def()",
              "method_sentence": [
                {
                  "sentence_text": "The InterfaceDef object may be used to introspect on the methods, attributes, and other type information for the object referred to by this object reference.",
                  "sentence_id": 422679
                },
                {
                  "sentence_text": "Obtains an InterfaceDef for the object implementation referenced by this object reference.",
                  "sentence_id": 276135
                }
              ],
              "method_id": 51388
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.reflect.Method",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html",
          "class_id": 1160,
          "class_sentence": [
            {
              "sentence_text": "The reflected method may be a class method or an instance method (including an abstract method).",
              "sentence_id": 347537
            },
            {
              "sentence_text": "A Method provides information about, and access to, a single method on a class or interface.",
              "sentence_id": 233014
            }
          ],
          "method": [
            {
              "method_name": "java.lang.reflect.Method.getDeclaringClass()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Class object representing the class or interface that declares the executable represented by this object.",
                  "sentence_id": 246126
                }
              ],
              "method_id": 18764
            },
            {
              "method_name": "java.lang.reflect.Method.isDefault()",
              "method_sentence": [
                {
                  "sentence_text": "A default method is a public non-abstract instance method, that is, a non-static method with a body, declared in an interface type.",
                  "sentence_id": 382422
                },
                {
                  "sentence_text": "Returns true if this method is a default method; returns false otherwise.",
                  "sentence_id": 246142
                }
              ],
              "method_id": 18780
            },
            {
              "method_name": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...)",
              "method_sentence": [
                {
                  "sentence_text": "If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur.",
                  "sentence_id": 382417
                },
                {
                  "sentence_text": "If the underlying method is static, the class that declared the method is initialized if it has not already been initialized.",
                  "sentence_id": 382418
                },
                {
                  "sentence_text": "Invokes the underlying method represented by this Method object, on the specified object with the specified parameters.",
                  "sentence_id": 246140
                }
              ],
              "method_id": 18778
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Thread",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
          "class_id": 1021,
          "class_sentence": [
            {
              "sentence_text": "That class then implements the run method.",
              "sentence_id": 346674
            },
            {
              "sentence_text": "One is to declare a class to be a subclass of Thread.",
              "sentence_id": 346668
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
              "method_sentence": [
                {
                  "sentence_text": "The context ClassLoader can be set when a thread is created, and allows the creator of the thread to provide the appropriate class loader, through getContextClassLoader, to code running in the thread when loading classes and resources.",
                  "sentence_id": 380867
                },
                {
                  "sentence_text": "Sets the context ClassLoader for this Thread.",
                  "sentence_id": 245237
                },
                {
                  "sentence_text": "If a security manager is present, its checkPermission method is invoked with a RuntimePermission(\"setContextClassLoader\") permission to see if setting the context ClassLoader is permitted.",
                  "sentence_id": 380868
                }
              ],
              "method_id": 17893
            },
            {
              "method_name": "java.lang.Thread.getContextClassLoader()",
              "method_sentence": [
                {
                  "sentence_text": "The context ClassLoader of the primordial thread is typically set to the class loader used to load the application.",
                  "sentence_id": 380828
                },
                {
                  "sentence_text": "The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources.",
                  "sentence_id": 380826
                },
                {
                  "sentence_text": "If a security manager is present, and the invoker's class loader is not null and is not the same as or an ancestor of the context class loader, then this method invokes the security manager's checkPermission method with a RuntimePermission(\"getClassLoader\") permission to verify that retrieval of the context class loader is permitted.",
                  "sentence_id": 380829
                }
              ],
              "method_id": 17873
            },
            {
              "method_name": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)",
              "method_sentence": [
                {
                  "sentence_text": "Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.",
                  "sentence_id": 380798
                },
                {
                  "sentence_text": "Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor.",
                  "sentence_id": 380794
                },
                {
                  "sentence_text": "Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use.",
                  "sentence_id": 380795
                }
              ],
              "method_id": 17863
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Enum",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html",
          "class_id": 999,
          "class_sentence": [
            {
              "sentence_text": "This is the common base class of all Java language enumeration types.",
              "sentence_id": 232853
            },
            {
              "sentence_text": "Note that when using an enumeration type as the type of a set or as the type of the keys in a map, specialized and efficient set and map implementations are available.",
              "sentence_id": 346381
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Enum.Enum(java.lang.String,int)",
              "method_sentence": [
                {
                  "sentence_text": "Programmers cannot invoke this constructor.",
                  "sentence_id": 378816
                },
                {
                  "sentence_text": "It is for use by code emitted by the compiler in response to enum type declarations.",
                  "sentence_id": 378817
                }
              ],
              "method_id": 17138
            },
            {
              "method_name": "java.lang.Enum.toString()",
              "method_sentence": [
                {
                  "sentence_text": "An enum type should override this method when a more \"programmer-friendly\" string form exists.",
                  "sentence_id": 378829
                },
                {
                  "sentence_text": "This method may be overridden, though it typically isn't necessary or desirable.",
                  "sentence_id": 378828
                },
                {
                  "sentence_text": "Returns the name of this enum constant, as contained in the declaration.",
                  "sentence_id": 244456
                }
              ],
              "method_id": 17147
            },
            {
              "method_name": "java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "All the constants of an enum type can be obtained by calling the implicit public static T[] values() method of that type.",
                  "sentence_id": 378833
                },
                {
                  "sentence_text": "Note that for a particular enum type T, the implicitly declared public static T valueOf(String) method on that enum may be used instead of this method to map from a name to the corresponding enum constant.",
                  "sentence_id": 378832
                },
                {
                  "sentence_text": "The name must match exactly an identifier used to declare an enum constant in this type.",
                  "sentence_id": 378830
                }
              ],
              "method_id": 17148
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Toolkit",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Toolkit.html",
          "class_id": 610,
          "class_sentence": [
            {
              "sentence_text": "Most applications should not call any of the methods in this class directly.",
              "sentence_id": 344246
            },
            {
              "sentence_text": "This class is the abstract superclass of all actual implementations of the Abstract Window Toolkit.",
              "sentence_id": 232460
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Toolkit.getDefaultToolkit()",
              "method_sentence": [
                {
                  "sentence_text": "Each class is loaded in the order given and a single instance of each is created using Class.forName(class).newInstance().",
                  "sentence_id": 372209
                },
                {
                  "sentence_text": "If there is no \"java.awt.headless\" or it is set to false and there is a system property named \"awt.toolkit\", that property is treated as the name of a class that is a subclass of Toolkit; otherwise the default platform-specific implementation of Toolkit is used.",
                  "sentence_id": 372206
                },
                {
                  "sentence_text": "Also loads additional classes into the VM, using the property 'assistive_technologies' specified in the Sun reference implementation by a line in the 'accessibility.properties' file.",
                  "sentence_id": 372207
                }
              ],
              "method_id": 11778
            },
            {
              "method_name": "java.awt.Toolkit.getSystemEventQueueImpl()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the application's or applet's EventQueue instance, without checking access.",
                  "sentence_id": 239062
                },
                {
                  "sentence_text": "For security reasons, this can only be called from a Toolkit subclass.",
                  "sentence_id": 372258
                }
              ],
              "method_id": 11800
            },
            {
              "method_name": "java.awt.Toolkit.createComponent(java.awt.Component)",
              "method_sentence": [
                {
                  "sentence_text": "This peer is windowless and allows the Component and Container classes to be extended directly to create windowless components that are defined entirely in java.",
                  "sentence_id": 372176
                },
                {
                  "sentence_text": "Creates a peer for a component or container.",
                  "sentence_id": 239011
                }
              ],
              "method_id": 11749
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.reflect.ParameterizedType",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ParameterizedType.html",
          "class_id": 1151,
          "class_sentence": [
            {
              "sentence_text": "A parameterized type is created the first time it is needed by a reflective method, as specified in this package.",
              "sentence_id": 347513
            },
            {
              "sentence_text": "Instances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic type declaration and have equal type parameters.",
              "sentence_id": 347517
            }
          ],
          "method": [
            {
              "method_name": "java.lang.reflect.ParameterizedType.getRawType()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Type object representing the class or interface that declared this type.",
                  "sentence_id": 246007
                }
              ],
              "method_id": 18645
            },
            {
              "method_name": "java.lang.reflect.ParameterizedType.getActualTypeArguments()",
              "method_sentence": [
                {
                  "sentence_text": "Returns an array of Type objects representing the actual type arguments to this type.",
                  "sentence_id": 246005
                },
                {
                  "sentence_text": "This can occur if this type represents a non-parameterized type nested within a parameterized type.",
                  "sentence_id": 382218
                },
                {
                  "sentence_text": "Note that in some cases, the returned array be empty.",
                  "sentence_id": 382217
                }
              ],
              "method_id": 18643
            },
            {
              "method_name": "java.lang.reflect.ParameterizedType.getOwnerType()",
              "method_sentence": [
                {
                  "sentence_text": "If this type is a top-level type, null is returned.",
                  "sentence_id": 382220
                },
                {
                  "sentence_text": "Returns a Type object representing the type that this type is a member of.",
                  "sentence_id": 246006
                },
                {
                  "sentence_text": "For example, if this type is O<T>.I<S>, return a representation of O<T>.",
                  "sentence_id": 382219
                }
              ],
              "method_id": 18644
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How do I properly load a BufferedImage in java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.awt.image.BufferedImage",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html",
          "class_id": 772,
          "class_sentence": [
            {
              "sentence_text": "The BufferedImage subclass describes an Image with an accessible buffer of image data.",
              "sentence_id": 232637
            },
            {
              "sentence_text": "This class relies on the data fetching and setting methods of Raster, and on the color characterization methods of ColorModel.",
              "sentence_id": 345165
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a BufferedImage of one of the predefined image types.",
                  "sentence_id": 241469
                }
              ],
              "method_id": 14344
            },
            {
              "method_name": "java.awt.image.BufferedImage.getSubimage(int,int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The returned BufferedImage shares the same data array as the original image.",
                  "sentence_id": 374891
                },
                {
                  "sentence_text": "Returns a subimage defined by a specified rectangular region.",
                  "sentence_id": 241498
                }
              ],
              "method_id": 14373
            },
            {
              "method_name": "java.awt.image.BufferedImage.getSampleModel()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the SampleModel associated with this BufferedImage.",
                  "sentence_id": 241495
                }
              ],
              "method_id": 14370
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.ImageIcon",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/ImageIcon.html",
          "class_id": 3123,
          "class_sentence": [
            {
              "sentence_text": "Images that are created from a URL, filename or byte array are preloaded using MediaTracker to monitor the loaded state of the image.",
              "sentence_id": 362098
            },
            {
              "sentence_text": "The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.",
              "sentence_id": 362101
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.ImageIcon.loadImage(java.awt.Image)",
              "method_sentence": [
                {
                  "sentence_text": "Loads the image, returning only when the image is loaded.",
                  "sentence_id": 265527
                }
              ],
              "method_id": 38639
            },
            {
              "method_name": "javax.swing.ImageIcon.ImageIcon(byte[],java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Normally this array is created by reading an image using Class.getResourceAsStream(), but the byte array may also be statically stored in a class.",
                  "sentence_id": 412767
                },
                {
                  "sentence_text": "Creates an ImageIcon from an array of bytes which were read from an image file containing a supported image format, such as GIF, JPEG, or (as of 1.3) PNG.",
                  "sentence_id": 265518
                }
              ],
              "method_id": 38630
            },
            {
              "method_name": "javax.swing.ImageIcon.ImageIcon(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Normally this array is created by reading an image using Class.getResourceAsStream(), but the byte array may also be statically stored in a class.",
                  "sentence_id": 412768
                },
                {
                  "sentence_text": "Creates an ImageIcon from an array of bytes which were read from an image file containing a supported image format, such as GIF, JPEG, or (as of 1.3) PNG.",
                  "sentence_id": 265519
                },
                {
                  "sentence_text": "If the resulting image has a \"comment\" property that is a string, then the string is used as the description of this icon.",
                  "sentence_id": 412769
                }
              ],
              "method_id": 38631
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.WritableRaster",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/WritableRaster.html",
          "class_id": 809,
          "class_sentence": [
            {
              "sentence_text": "To instantiate a WritableRaster, use one of the createWritableRaster factory methods in the Raster class.",
              "sentence_id": 345553
            },
            {
              "sentence_text": "Refer to the class comment for Raster for descriptions of how a Raster stores pixels.",
              "sentence_id": 345551
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Create a WritableRaster with the same size, SampleModel and DataBuffer as this one, but with a different location.",
                  "sentence_id": 242205
                },
                {
                  "sentence_text": "The new WritableRaster will possess a reference to the current WritableRaster, accessible through its getParent() and getWritableParent() methods.",
                  "sentence_id": 376144
                }
              ],
              "method_id": 15044
            },
            {
              "method_name": "java.awt.image.WritableRaster.WritableRaster(java.awt.image.SampleModel,java.awt.Point)",
              "method_sentence": [
                {
                  "sentence_text": "A DataBuffer large enough to describe the WritableRaster is automatically created.",
                  "sentence_id": 376128
                },
                {
                  "sentence_text": "Constructs a WritableRaster with the given SampleModel.",
                  "sentence_id": 242201
                },
                {
                  "sentence_text": "The WritableRaster's upper left corner is origin and it is the same size as the SampleModel.",
                  "sentence_id": 376127
                }
              ],
              "method_id": 15040
            },
            {
              "method_name": "java.awt.image.WritableRaster.setRect(java.awt.image.Raster)",
              "method_sentence": [
                {
                  "sentence_text": "If all samples of both source and destination Rasters are of integral type and less than or equal to 32 bits in size, then calling this method is equivalent to executing the following code for all x,y addresses valid in both Rasters.",
                  "sentence_id": 376173
                },
                {
                  "sentence_text": "When copying a float or double source to an integral type destination, each source sample is cast to the destination type.",
                  "sentence_id": 376177
                },
                {
                  "sentence_text": "Copies pixels from Raster srcRaster to this WritableRaster.",
                  "sentence_id": 242216
                }
              ],
              "method_id": 15055
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.ColorConvertOp",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/ColorConvertOp.html",
          "class_id": 776,
          "class_sentence": [
            {
              "sentence_text": "Color conversion can be specified via an array of ColorSpace objects or an array of ICC_Profile objects.",
              "sentence_id": 345184
            },
            {
              "sentence_text": "This class performs a pixel-by-pixel color conversion of the data in the source image.",
              "sentence_id": 232641
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.ColorConvertOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
              "method_sentence": [
                {
                  "sentence_text": "If the destination image is null, a BufferedImage will be created with an appropriate ColorModel.",
                  "sentence_id": 374967
                },
                {
                  "sentence_text": "ColorConverts the source BufferedImage.",
                  "sentence_id": 241543
                }
              ],
              "method_id": 14419
            },
            {
              "method_name": "java.awt.image.ColorConvertOp.ColorConvertOp(java.awt.RenderingHints)",
              "method_sentence": [
                {
                  "sentence_text": "This Op can be used only with BufferedImages, and will convert directly from the ColorSpace of the source image to that of the destination.",
                  "sentence_id": 374950
                },
                {
                  "sentence_text": "Constructs a new ColorConvertOp which will convert from a source color space to a destination color space.",
                  "sentence_id": 241537
                },
                {
                  "sentence_text": "The destination argument of the filter method cannot be specified as null.",
                  "sentence_id": 374951
                }
              ],
              "method_id": 14413
            },
            {
              "method_name": "java.awt.image.ColorConvertOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)",
              "method_sentence": [
                {
                  "sentence_text": "ColorConverts the image data in the source Raster.",
                  "sentence_id": 241544
                },
                {
                  "sentence_text": "The constructor used to create this ColorConvertOp must have provided enough information to define both source and destination color spaces.",
                  "sentence_id": 374970
                },
                {
                  "sentence_text": "If the destination Raster is null, a new Raster will be created.",
                  "sentence_id": 374968
                }
              ],
              "method_id": 14420
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.imageio.ImageIO",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/imageio/ImageIO.html",
          "class_id": 2276,
          "class_sentence": [
            {
              "sentence_text": "A class containing static convenience methods for locating ImageReaders and ImageWriters, and performing simple encoding and decoding.",
              "sentence_id": 234130
            }
          ],
          "method": [
            {
              "method_name": "javax.imageio.ImageIO.read(java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a BufferedImage as the result of decoding a supplied File with an ImageReader chosen automatically from among those currently registered.",
                  "sentence_id": 258130
                },
                {
                  "sentence_text": "This method does not attempt to locate ImageReaders that can read directly from a File; that may be accomplished using IIORegistry and ImageReaderSpi.",
                  "sentence_id": 403991
                },
                {
                  "sentence_text": "If no registered ImageReader claims to be able to read the resulting stream, null is returned.",
                  "sentence_id": 403988
                }
              ],
              "method_id": 31136
            },
            {
              "method_name": "javax.imageio.ImageIO.read(java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a BufferedImage as the result of decoding a supplied URL with an ImageReader chosen automatically from among those currently registered.",
                  "sentence_id": 258132
                },
                {
                  "sentence_text": "This method does not attempt to locate ImageReaders that can read directly from a URL; that may be accomplished using IIORegistry and ImageReaderSpi.",
                  "sentence_id": 404000
                },
                {
                  "sentence_text": "If no registered ImageReader claims to be able to read the resulting stream, null is returned.",
                  "sentence_id": 403998
                }
              ],
              "method_id": 31138
            },
            {
              "method_name": "javax.imageio.ImageIO.read(javax.imageio.stream.ImageInputStream)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a BufferedImage as the result of decoding a supplied ImageInputStream with an ImageReader chosen automatically from among those currently registered.",
                  "sentence_id": 258133
                },
                {
                  "sentence_text": "If no registered ImageReader claims to be able to read the stream, null is returned.",
                  "sentence_id": 404001
                },
                {
                  "sentence_text": "Unlike most other methods in this class, this method does close the provided ImageInputStream after the read operation has completed, unless null is returned, in which case this method does not close the stream.",
                  "sentence_id": 404002
                }
              ],
              "method_id": 31139
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.SampleModel",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/SampleModel.html",
          "class_id": 805,
          "class_sentence": [
            {
              "sentence_text": "More efficient code will cast the SampleModel to the appropriate subclass and extract the information needed to directly manipulate pixels in the DataBuffer.",
              "sentence_id": 345524
            },
            {
              "sentence_text": "This abstract class defines an interface for extracting samples of pixels in an image.",
              "sentence_id": 232670
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.SampleModel.createCompatibleSampleModel(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a SampleModel which describes data in this SampleModel's format, but with a different width and height.",
                  "sentence_id": 242119
                }
              ],
              "method_id": 14957
            },
            {
              "method_name": "java.awt.image.SampleModel.getTransferType()",
              "method_sentence": [
                {
                  "sentence_text": "When pixels are transferred via these methods, they may be transferred in a packed or unpacked format, depending on the implementation of the SampleModel.",
                  "sentence_id": 376026
                },
                {
                  "sentence_text": "Using these methods, pixels are transferred as an array of getNumDataElements() elements of a primitive type given by getTransferType().",
                  "sentence_id": 376027
                },
                {
                  "sentence_text": "The TransferType will be one of the types defined in DataBuffer.",
                  "sentence_id": 376029
                }
              ],
              "method_id": 14980
            },
            {
              "method_name": "java.awt.image.SampleModel.getNumDataElements()",
              "method_sentence": [
                {
                  "sentence_text": "When pixels are transferred via these methods, they may be transferred in a packed or unpacked format, depending on the implementation of the SampleModel.",
                  "sentence_id": 376011
                },
                {
                  "sentence_text": "Using these methods, pixels are transferred as an array of getNumDataElements() elements of a primitive type given by getTransferType().",
                  "sentence_id": 376012
                },
                {
                  "sentence_text": "Returns the number of data elements needed to transfer a pixel via the getDataElements and setDataElements methods.",
                  "sentence_id": 242127
                }
              ],
              "method_id": 14965
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.ColorModel",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/ColorModel.html",
          "class_id": 777,
          "class_sentence": [
            {
              "sentence_text": "The transfer type for a particular ColorModel object is specified when the object is created, either explicitly or by default.",
              "sentence_id": 345209
            },
            {
              "sentence_text": "For BufferedImages, the transfer type of its Raster and of the Raster object's SampleModel (available from the getTransferType methods of these classes) must match that of the ColorModel.",
              "sentence_id": 345211
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.ColorModel.coerceData(java.awt.image.WritableRaster,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "If the data needs to be coerced, this method will also return an instance of this ColorModel with the isAlphaPremultiplied flag set appropriately.",
                  "sentence_id": 374996
                },
                {
                  "sentence_text": "Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel.",
                  "sentence_id": 241554
                },
                {
                  "sentence_text": "Since ColorModel is an abstract class, any instance is an instance of a subclass.",
                  "sentence_id": 374998
                }
              ],
              "method_id": 14430
            },
            {
              "method_name": "java.awt.image.ColorModel.createCompatibleSampleModel(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.",
                  "sentence_id": 241555
                },
                {
                  "sentence_text": "Since ColorModel is an abstract class, any instance is an instance of a subclass.",
                  "sentence_id": 375000
                },
                {
                  "sentence_text": "Subclasses must override this method since the implementation in this abstract class throws an UnsupportedOperationException.",
                  "sentence_id": 375001
                }
              ],
              "method_id": 14431
            },
            {
              "method_name": "java.awt.image.ColorModel.createCompatibleWritableRaster(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.",
                  "sentence_id": 241556
                },
                {
                  "sentence_text": "Since ColorModel is an abstract class, any instance is an instance of a subclass.",
                  "sentence_id": 375002
                },
                {
                  "sentence_text": "Subclasses must override this method since the implementation in this abstract class throws an UnsupportedOperationException.",
                  "sentence_id": 375003
                }
              ],
              "method_id": 14432
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.AffineTransformOp",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/AffineTransformOp.html",
          "class_id": 768,
          "class_sentence": [
            {
              "sentence_text": "The color rendering hint and the dithering hint can be used when color conversion is required.",
              "sentence_id": 345136
            },
            {
              "sentence_text": "This class uses an affine transform to perform a linear mapping from 2D coordinates in the source image or Raster to 2D coordinates in the destination image or Raster.",
              "sentence_id": 232633
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.AffineTransformOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)",
              "method_sentence": [
                {
                  "sentence_text": "If the destination image is null, a BufferedImage is created with the source ColorModel.",
                  "sentence_id": 374734
                },
                {
                  "sentence_text": "Transforms the source BufferedImage and stores the results in the destination BufferedImage.",
                  "sentence_id": 241416
                },
                {
                  "sentence_text": "If the color models for the two images do not match, a color conversion into the destination color model is performed.",
                  "sentence_id": 374733
                }
              ],
              "method_id": 14291
            },
            {
              "method_name": "java.awt.image.AffineTransformOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)",
              "method_sentence": [
                {
                  "sentence_text": "If destCM is null, an appropriate ColorModel is used; this ColorModel may have an alpha channel even if the source ColorModel is opaque.",
                  "sentence_id": 374731
                },
                {
                  "sentence_text": "Creates a zeroed destination image with the correct size and number of bands.",
                  "sentence_id": 241414
                },
                {
                  "sentence_text": "A RasterFormatException may be thrown if the transformed width or height is equal to 0.",
                  "sentence_id": 374730
                }
              ],
              "method_id": 14289
            },
            {
              "method_name": "java.awt.image.AffineTransformOp.createCompatibleDestRaster(java.awt.image.Raster)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a zeroed destination Raster with the correct size and number of bands.",
                  "sentence_id": 241415
                },
                {
                  "sentence_text": "A RasterFormatException may be thrown if the transformed width or height is equal to 0.",
                  "sentence_id": 374732
                }
              ],
              "method_id": 14290
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Image",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Image.html",
          "class_id": 562,
          "class_sentence": [
            {
              "sentence_text": "The image must be obtained in a platform-specific manner.",
              "sentence_id": 343908
            },
            {
              "sentence_text": "The abstract class Image is the superclass of all classes that represent graphical images.",
              "sentence_id": 232412
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Image.flush()",
              "method_sentence": [
                {
                  "sentence_text": "Image objects created by the Toolkit and Component classes which are loaded from files, URLs or produced by an ImageProducer are unloaded and all local resources are released.",
                  "sentence_id": 371114
                },
                {
                  "sentence_text": "Image objects created by the Component methods which take a width and height leave their primary buffer of pixels untouched, but have all cached information released much like is done for BufferedImage objects.",
                  "sentence_id": 371111
                },
                {
                  "sentence_text": "Flushes all reconstructable resources being used by this Image object.",
                  "sentence_id": 238022
                }
              ],
              "method_id": 10742
            },
            {
              "method_name": "java.awt.Image.getScaledInstance(int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The new Image object may be loaded asynchronously even if the original source image has already been loaded completely.",
                  "sentence_id": 371125
                },
                {
                  "sentence_text": "A new Image object is returned which will render the image at the specified width and height by default.",
                  "sentence_id": 371124
                },
                {
                  "sentence_text": "Creates a scaled version of this image.",
                  "sentence_id": 238028
                }
              ],
              "method_id": 10748
            },
            {
              "method_name": "java.awt.Image.getSource()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the object that produces the pixels for the image.",
                  "sentence_id": 238029
                },
                {
                  "sentence_text": "This method is called by the image filtering classes and by methods that perform image conversion and scaling.",
                  "sentence_id": 371128
                }
              ],
              "method_id": 10749
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Graphics2D",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Graphics2D.html",
          "class_id": 553,
          "class_sentence": [
            {
              "sentence_text": "Java 2D API maintains compatibility with JDK 1.1 rendering behavior, such that legacy operations and existing renderer behavior is unchanged under Java 2D API.",
              "sentence_id": 343785
            },
            {
              "sentence_text": "A GraphicsConfiguration object defines the characteristics of the rendering target, such as pixel format and resolution.",
              "sentence_id": 343732
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Graphics2D.drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
              "method_sentence": [
                {
                  "sentence_text": "If explicit control is required over specific hints recognized by a specific RenderableImage, or if knowledge of which hints are used is required, then a RenderedImage should be obtained directly from the RenderableImage and rendered using drawRenderedImage.",
                  "sentence_id": 370783
                },
                {
                  "sentence_text": "Rendering hints set on the Graphics2D object might be used in rendering the RenderableImage.",
                  "sentence_id": 370782
                },
                {
                  "sentence_text": "Renders a RenderableImage, applying a transform from image space into user space before drawing.",
                  "sentence_id": 237828
                }
              ],
              "method_id": 10547
            },
            {
              "method_name": "java.awt.Graphics2D.drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Renders a BufferedImage that is filtered with a BufferedImageOp.",
                  "sentence_id": 237827
                },
                {
                  "sentence_text": "The rendering attributes applied include the Clip, Transform and Composite attributes.",
                  "sentence_id": 370776
                },
                {
                  "sentence_text": "This is equivalent to: img1 = op.filter(img, null); drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null); .",
                  "sentence_id": 370777
                }
              ],
              "method_id": 10546
            },
            {
              "method_name": "java.awt.Graphics2D.Graphics2D()",
              "method_sentence": [
                {
                  "sentence_text": "Instead, Graphics2D objects must be obtained from another Graphics2D object, created by a Component, or obtained from images such as BufferedImage objects.",
                  "sentence_id": 370753
                },
                {
                  "sentence_text": "Since Graphics2D is an abstract class, and since it must be customized by subclasses for different output devices, Graphics2D objects cannot be created directly.",
                  "sentence_id": 370752
                },
                {
                  "sentence_text": "Constructs a new Graphics2D object.",
                  "sentence_id": 237820
                }
              ],
              "method_id": 10539
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Avoiding PermGen out of memory and GC overhead limit exceeded",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.lang.StringBuilder",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html",
          "class_id": 1019,
          "class_sentence": [
            {
              "sentence_text": "As long as the length of the character sequence contained in the string builder does not exceed the capacity, it is not necessary to allocate a new internal buffer.",
              "sentence_id": 346652
            },
            {
              "sentence_text": "If the internal buffer overflows, it is automatically made larger.",
              "sentence_id": 346653
            }
          ],
          "method": [
            {
              "method_name": "java.lang.StringBuilder.trimToSize()",
              "method_sentence": [
                {
                  "sentence_text": "Calling this method may, but is not required to, affect the value returned by a subsequent call to the capacity() method.",
                  "sentence_id": 380647
                },
                {
                  "sentence_text": "Attempts to reduce storage used for the character sequence.",
                  "sentence_id": 245166
                },
                {
                  "sentence_text": "If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient.",
                  "sentence_id": 380646
                }
              ],
              "method_id": 17822
            },
            {
              "method_name": "java.lang.StringBuilder.ensureCapacity(int)",
              "method_sentence": [
                {
                  "sentence_text": "Note that subsequent operations on this object can reduce the actual capacity below that requested here.",
                  "sentence_id": 380577
                },
                {
                  "sentence_text": "If the current capacity is less than the argument, then a new internal array is allocated with greater capacity.",
                  "sentence_id": 380573
                },
                {
                  "sentence_text": "Ensures that the capacity is at least equal to the specified minimum.",
                  "sentence_id": 245138
                }
              ],
              "method_id": 17794
            },
            {
              "method_name": "java.lang.StringBuilder.capacity()",
              "method_sentence": [
                {
                  "sentence_text": "The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.",
                  "sentence_id": 380555
                },
                {
                  "sentence_text": "Returns the current capacity.",
                  "sentence_id": 245131
                }
              ],
              "method_id": 17787
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.StringBuffer",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html",
          "class_id": 1018,
          "class_sentence": [
            {
              "sentence_text": "As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to allocate a new internal buffer array.",
              "sentence_id": 346638
            },
            {
              "sentence_text": "If the internal buffer overflows, it is automatically made larger.",
              "sentence_id": 346639
            }
          ],
          "method": [
            {
              "method_name": "java.lang.StringBuffer.trimToSize()",
              "method_sentence": [
                {
                  "sentence_text": "Calling this method may, but is not required to, affect the value returned by a subsequent call to the capacity() method.",
                  "sentence_id": 380522
                },
                {
                  "sentence_text": "Attempts to reduce storage used for the character sequence.",
                  "sentence_id": 245112
                },
                {
                  "sentence_text": "If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient.",
                  "sentence_id": 380521
                }
              ],
              "method_id": 17768
            },
            {
              "method_name": "java.lang.StringBuffer.ensureCapacity(int)",
              "method_sentence": [
                {
                  "sentence_text": "Note that subsequent operations on this object can reduce the actual capacity below that requested here.",
                  "sentence_id": 380452
                },
                {
                  "sentence_text": "If the current capacity is less than the argument, then a new internal array is allocated with greater capacity.",
                  "sentence_id": 380448
                },
                {
                  "sentence_text": "Ensures that the capacity is at least equal to the specified minimum.",
                  "sentence_id": 245084
                }
              ],
              "method_id": 17740
            },
            {
              "method_name": "java.lang.StringBuffer.capacity()",
              "method_sentence": [
                {
                  "sentence_text": "The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.",
                  "sentence_id": 380430
                },
                {
                  "sentence_text": "Returns the current capacity.",
                  "sentence_id": 245077
                }
              ],
              "method_id": 17733
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.ArrayList",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html",
          "class_id": 1854,
          "class_sentence": [
            {
              "sentence_text": "An application can increase the capacity of an ArrayList instance before adding a large number of elements using the ensureCapacity operation.",
              "sentence_id": 352301
            },
            {
              "sentence_text": "Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.",
              "sentence_id": 352310
            }
          ],
          "method": [
            {
              "method_name": "java.util.ArrayList.ensureCapacity(int)",
              "method_sentence": [
                {
                  "sentence_text": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
                  "sentence_id": 253244
                }
              ],
              "method_id": 25912
            },
            {
              "method_name": "java.util.ArrayList.trimToSize()",
              "method_sentence": [
                {
                  "sentence_text": "An application can use this operation to minimize the storage of an ArrayList instance.",
                  "sentence_id": 397289
                },
                {
                  "sentence_text": "Trims the capacity of this ArrayList instance to be the list's current size.",
                  "sentence_id": 253267
                }
              ],
              "method_id": 25935
            },
            {
              "method_name": "java.util.ArrayList.toArray()",
              "method_sentence": [
                {
                  "sentence_text": "(In other words, this method must allocate a new array).",
                  "sentence_id": 397282
                },
                {
                  "sentence_text": "The caller is thus free to modify the returned array.",
                  "sentence_id": 397283
                },
                {
                  "sentence_text": "The returned array will be \"safe\" in that no references to it are maintained by this list.",
                  "sentence_id": 397281
                }
              ],
              "method_id": 25933
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.System",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/System.html",
          "class_id": 1020,
          "class_sentence": [
            {
              "sentence_text": "Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.",
              "sentence_id": 346658
            },
            {
              "sentence_text": "The System class contains several useful class fields and methods.",
              "sentence_id": 232874
            }
          ],
          "method": [
            {
              "method_name": "java.lang.System.gc()",
              "method_sentence": [
                {
                  "sentence_text": "Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse.",
                  "sentence_id": 380686
                },
                {
                  "sentence_text": "When control returns from the method call, the Java Virtual Machine has made a best effort to reclaim space from all discarded objects.",
                  "sentence_id": 380687
                },
                {
                  "sentence_text": "The call System.gc() is effectively equivalent to the call: Runtime.getRuntime().gc() .",
                  "sentence_id": 380688
                }
              ],
              "method_id": 17831
            },
            {
              "method_name": "java.lang.System.nanoTime()",
              "method_sentence": [
                {
                  "sentence_text": "Differences in successive calls that span greater than approximately 292 years (263 nanoseconds) will not correctly compute elapsed time due to numerical overflow.",
                  "sentence_id": 380747
                },
                {
                  "sentence_text": "Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds.",
                  "sentence_id": 245188
                },
                {
                  "sentence_text": "This method provides nanosecond precision, but not necessarily nanosecond resolution (that is, how frequently the value changes) - no guarantees are made except that the resolution is at least as good as that of currentTimeMillis().",
                  "sentence_id": 380746
                }
              ],
              "method_id": 17844
            },
            {
              "method_name": "java.lang.System.runFinalizersOnExit(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.",
                  "sentence_id": 380754
                },
                {
                  "sentence_text": "This method is inherently unsafe.",
                  "sentence_id": 380753
                }
              ],
              "method_id": 17846
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.ByteBuffer",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html",
          "class_id": 1240,
          "class_sentence": [
            {
              "sentence_text": "The contents of direct buffers may reside outside of the normal garbage-collected heap, and so their impact upon the memory footprint of an application might not be obvious.",
              "sentence_id": 348242
            },
            {
              "sentence_text": "In general it is best to allocate direct buffers only when they yield a measureable gain in program performance.",
              "sentence_id": 348244
            }
          ],
          "method": [
            {
              "method_name": "java.nio.ByteBuffer.asShortBuffer()",
              "method_sentence": [
                {
                  "sentence_text": "The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by two, and its mark will be undefined.",
                  "sentence_id": 384057
                },
                {
                  "sentence_text": "Creates a view of this byte buffer as a short buffer.",
                  "sentence_id": 247116
                },
                {
                  "sentence_text": "The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
                  "sentence_id": 384058
                }
              ],
              "method_id": 19769
            },
            {
              "method_name": "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
              "method_sentence": [
                {
                  "sentence_text": "except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient.",
                  "sentence_id": 384107
                },
                {
                  "sentence_text": "This method transfers the bytes remaining in the given source buffer into this buffer.",
                  "sentence_id": 384103
                },
                {
                  "sentence_text": "Otherwise, this method copies n = src.remaining() bytes from the given buffer into this buffer, starting at each buffer's current position.",
                  "sentence_id": 384105
                }
              ],
              "method_id": 19797
            },
            {
              "method_name": "java.nio.ByteBuffer.asDoubleBuffer()",
              "method_sentence": [
                {
                  "sentence_text": "The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by eight, and its mark will be undefined.",
                  "sentence_id": 384036
                },
                {
                  "sentence_text": "Creates a view of this byte buffer as a double buffer.",
                  "sentence_id": 247111
                },
                {
                  "sentence_text": "The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
                  "sentence_id": 384037
                }
              ],
              "method_id": 19764
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html",
          "class_id": 1999,
          "class_sentence": [
            {
              "sentence_text": "Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput.",
              "sentence_id": 354652
            },
            {
              "sentence_text": "Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.",
              "sentence_id": 354654
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)",
              "method_sentence": [
                {
                  "sentence_text": "If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle.",
                  "sentence_id": 400905
                },
                {
                  "sentence_text": "Sets the maximum allowed number of threads.",
                  "sentence_id": 255726
                },
                {
                  "sentence_text": "This overrides any value set in the constructor.",
                  "sentence_id": 400904
                }
              ],
              "method_id": 28398
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the maximum allowed number of threads.",
                  "sentence_id": 255711
                }
              ],
              "method_id": 28383
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the largest number of threads that have ever simultaneously been in the pool.",
                  "sentence_id": 255710
                }
              ],
              "method_id": 28382
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.Vector",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html",
          "class_id": 1918,
          "class_sentence": [
            {
              "sentence_text": "An application can increase the capacity of a vector before inserting a large number of components; this reduces the amount of incremental reallocation.",
              "sentence_id": 353887
            },
            {
              "sentence_text": "Each vector tries to optimize storage management by maintaining a capacity and a capacityIncrement.",
              "sentence_id": 353885
            }
          ],
          "method": [
            {
              "method_name": "java.util.Vector.ensureCapacity(int)",
              "method_sentence": [
                {
                  "sentence_text": "Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.",
                  "sentence_id": 254626
                },
                {
                  "sentence_text": "The size of the new data array will be the old size plus capacityIncrement, unless the value of capacityIncrement is less than or equal to zero, in which case the new capacity will be twice the old capacity; but if this new size is still smaller than minCapacity, then the new capacity will be minCapacity.",
                  "sentence_id": 399788
                },
                {
                  "sentence_text": "If the current capacity of this vector is less than minCapacity, then its capacity is increased by replacing its internal data array, kept in the field elementData, with a larger one.",
                  "sentence_id": 399787
                }
              ],
              "method_id": 27294
            },
            {
              "method_name": "java.util.Vector.trimToSize()",
              "method_sentence": [
                {
                  "sentence_text": "If the capacity of this vector is larger than its current size, then the capacity is changed to equal the size by replacing its internal data array, kept in the field elementData, with a smaller one.",
                  "sentence_id": 399849
                },
                {
                  "sentence_text": "An application can use this operation to minimize the storage of a vector.",
                  "sentence_id": 399850
                },
                {
                  "sentence_text": "Trims the capacity of this vector to be the vector's current size.",
                  "sentence_id": 254662
                }
              ],
              "method_id": 27330
            },
            {
              "method_name": "java.util.Vector.addElement(java.util.Vector)",
              "method_sentence": [
                {
                  "sentence_text": "The capacity of this vector is increased if its size becomes greater than its capacity.",
                  "sentence_id": 399777
                },
                {
                  "sentence_text": "Adds the specified component to the end of this vector, increasing its size by one.",
                  "sentence_id": 254617
                },
                {
                  "sentence_text": "This method is identical in functionality to the add(E) method (which is part of the List interface).",
                  "sentence_id": 399778
                }
              ],
              "method_id": 27285
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.ref.SoftReference",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ref/SoftReference.html",
          "class_id": 1139,
          "class_sentence": [
            {
              "sentence_text": "Soft references are most often used to implement memory-sensitive caches.",
              "sentence_id": 347473
            },
            {
              "sentence_text": "Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand.",
              "sentence_id": 232993
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ref.SoftReference.get()",
              "method_sentence": [
                {
                  "sentence_text": "If this reference object has been cleared, either by the program or by the garbage collector, then this method returns null.",
                  "sentence_id": 382193
                },
                {
                  "sentence_text": "Returns this reference object's referent.",
                  "sentence_id": 245980
                }
              ],
              "method_id": 18618
            },
            {
              "method_name": "java.lang.ref.SoftReference.SoftReference(T,java.lang.ref.ReferenceQueue<? super T>)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new soft reference that refers to the given object and is registered with the given queue.",
                  "sentence_id": 309349
                }
              ],
              "method_id": 83038
            },
            {
              "method_name": "java.lang.ref.SoftReference.SoftReference(java.lang.ref.SoftReference)",
              "method_sentence": [
                {
                  "sentence_text": "The new reference is not registered with any queue.",
                  "sentence_id": 382192
                },
                {
                  "sentence_text": "Creates a new soft reference that refers to the given object.",
                  "sentence_id": 245978
                }
              ],
              "method_id": 18616
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "String buffers support mutable strings.",
              "sentence_id": 346610
            },
            {
              "sentence_text": "The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., char values).",
              "sentence_id": 346624
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.String(java.lang.StringBuffer)",
              "method_sentence": [
                {
                  "sentence_text": "The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.",
                  "sentence_id": 380222
                },
                {
                  "sentence_text": "Allocates a new string that contains the sequence of characters currently contained in the string buffer argument.",
                  "sentence_id": 244990
                }
              ],
              "method_id": 17646
            },
            {
              "method_name": "java.lang.String.split(java.lang.String,int)",
              "method_sentence": [
                {
                  "sentence_text": "The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.",
                  "sentence_id": 380347
                },
                {
                  "sentence_text": "If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.",
                  "sentence_id": 380350
                },
                {
                  "sentence_text": "If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter.",
                  "sentence_id": 380348
                }
              ],
              "method_id": 17692
            },
            {
              "method_name": "java.lang.String.String(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable.",
                  "sentence_id": 380194
                },
                {
                  "sentence_text": "Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.",
                  "sentence_id": 244978
                }
              ],
              "method_id": 17634
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.zip.Deflater",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/zip/Deflater.html",
          "class_id": 2148,
          "class_sentence": [
            {
              "sentence_text": "The following code fragment demonstrates a trivial compression and decompression of a string using Deflater and Inflater.",
              "sentence_id": 355725
            },
            {
              "sentence_text": "This class provides support for general purpose compression using the popular ZLIB compression library.",
              "sentence_id": 234002
            }
          ],
          "method": [
            {
              "method_name": "java.util.zip.Deflater.getTotalIn()",
              "method_sentence": [
                {
                  "sentence_text": "Since the number of bytes may be greater than Integer.MAX_VALUE, the getBytesRead() method is now the preferred means of obtaining this information.",
                  "sentence_id": 402909
                },
                {
                  "sentence_text": "Returns the total number of uncompressed bytes input so far.",
                  "sentence_id": 257061
                }
              ],
              "method_id": 29896
            },
            {
              "method_name": "java.util.zip.Deflater.finish()",
              "method_sentence": [
                {
                  "sentence_text": "When called, indicates that compression should end with the current contents of the input buffer.",
                  "sentence_id": 257056
                }
              ],
              "method_id": 29891
            },
            {
              "method_name": "java.util.zip.Deflater.deflate(byte[],int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Compression flush mode is one of the following three modes: NO_FLUSH: allows the deflater to decide how much data to accumulate, before producing output, in order to achieve the best compression (should be used in normal use scenario).",
                  "sentence_id": 402899
                },
                {
                  "sentence_text": "Returns actual number of bytes of data compressed.",
                  "sentence_id": 402898
                },
                {
                  "sentence_text": "In the case of FULL_FLUSH or SYNC_FLUSH, if the return value is len, the space available in output buffer b, this method should be invoked again with the same flush parameter and more output space.",
                  "sentence_id": 402906
                }
              ],
              "method_id": 29888
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How do I Click a JButton without the user Clicking it?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "javax.swing.JMenu",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html",
          "class_id": 3149,
          "class_sentence": [
            {
              "sentence_text": "If the \"button\" is another menu item, then the JPopupMenu is \"pull-right\" menu.",
              "sentence_id": 362534
            },
            {
              "sentence_text": "When the \"button\" is pressed, the JPopupMenu appears.",
              "sentence_id": 362532
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JMenu.doClick(int)",
              "method_sentence": [
                {
                  "sentence_text": "Programmatically performs a \"click\".",
                  "sentence_id": 266471
                },
                {
                  "sentence_text": "This overrides the method AbstractButton.doClick in order to make the menu pop up.",
                  "sentence_id": 413933
                }
              ],
              "method_id": 39616
            },
            {
              "method_name": "javax.swing.JMenu.setModel(javax.swing.ButtonModel)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the data model for the \"menu button\" -- the label that the user clicks to open or close the menu.",
                  "sentence_id": 266509
                }
              ],
              "method_id": 39654
            },
            {
              "method_name": "javax.swing.JMenu.add(javax.swing.JMenuItem)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the menu item added.",
                  "sentence_id": 413929
                },
                {
                  "sentence_text": "Appends a menu item to the end of this menu.",
                  "sentence_id": 266460
                }
              ],
              "method_id": 39605
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.event.MouseListener",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html",
          "class_id": 665,
          "class_sentence": [
            {
              "sentence_text": "The listener interface for receiving \"interesting\" mouse events (press, release, click, enter, and exit) on a component.",
              "sentence_id": 232530
            },
            {
              "sentence_text": "A mouse event is generated when the mouse is pressed, released clicked (pressed and released).",
              "sentence_id": 344527
            }
          ],
          "method": [
            {
              "method_name": "java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when the mouse button has been clicked (pressed and released) on a component.",
                  "sentence_id": 239777
                }
              ],
              "method_id": 12532
            },
            {
              "method_name": "java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when a mouse button has been pressed on a component.",
                  "sentence_id": 239780
                }
              ],
              "method_id": 12535
            },
            {
              "method_name": "java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when a mouse button has been released on a component.",
                  "sentence_id": 239781
                }
              ],
              "method_id": 12536
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JButton",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JButton.html",
          "class_id": 3128,
          "class_sentence": [
            {
              "sentence_text": "Using an Action with a button has many benefits beyond directly configuring a button.",
              "sentence_id": 362143
            },
            {
              "sentence_text": "Buttons can be configured, and to some degree controlled, by Actions.",
              "sentence_id": 362142
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JButton.JButton()",
              "method_sentence": [
                {
                  "sentence_text": "Creates a button with no set text or icon.",
                  "sentence_id": 265571
                }
              ],
              "method_id": 38689
            },
            {
              "method_name": "javax.swing.JButton.JButton(javax.swing.Icon)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a button with an icon.",
                  "sentence_id": 265572
                }
              ],
              "method_id": 38690
            },
            {
              "method_name": "javax.swing.JButton.JButton(java.lang.String,javax.swing.Icon)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a button with initial text and an icon.",
                  "sentence_id": 265574
                }
              ],
              "method_id": 38692
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.event.MouseAdapter",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseAdapter.html",
          "class_id": 689,
          "class_sentence": [
            {
              "sentence_text": "The relevant method in the listener object is invoked and the MouseEvent or MouseWheelEvent is passed to it in following cases: when a mouse button is pressed, released, or clicked (pressed and released) when the mouse cursor enters or exits the component when the mouse wheel rotated, or mouse moved or dragged",
              "sentence_id": 344705
            },
            {
              "sentence_text": "Mouse events let you track when a mouse is pressed, released, clicked, moved, dragged, when it enters a component, when it exits and when a mouse wheel is moved.",
              "sentence_id": 344700
            }
          ],
          "method": [
            {
              "method_name": "java.awt.event.MouseAdapter.mouseClicked(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when the mouse button has been clicked (pressed and released) on a component.",
                  "sentence_id": 240058
                }
              ],
              "method_id": 12928
            },
            {
              "method_name": "java.awt.event.MouseAdapter.mousePressed(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when a mouse button has been pressed on a component.",
                  "sentence_id": 240063
                }
              ],
              "method_id": 12933
            },
            {
              "method_name": "java.awt.event.MouseAdapter.mouseDragged(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when a mouse button is pressed on a component and then dragged.",
                  "sentence_id": 240059
                },
                {
                  "sentence_text": "MOUSE_DRAGGED events will continue to be delivered to the component where the drag originated until the mouse button is released (regardless of whether the mouse position is within the bounds of the component).",
                  "sentence_id": 373275
                },
                {
                  "sentence_text": "Due to platform-dependent Drag&Drop implementations, MOUSE_DRAGGED events may not be delivered during a native Drag&Drop operation.",
                  "sentence_id": 373276
                }
              ],
              "method_id": 12929
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JDialog",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html",
          "class_id": 3135,
          "class_sentence": [
            {
              "sentence_text": "For example, you can add a child component to a dialog as follows: dialog.add(child); .",
              "sentence_id": 362252
            },
            {
              "sentence_text": "You can use this class to create a custom dialog, or invoke the many class methods in JOptionPane to create a variety of standard dialogs.",
              "sentence_id": 362247
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JDialog.setJMenuBar(javax.swing.JMenuBar)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the menubar for this dialog.",
                  "sentence_id": 265928
                }
              ],
              "method_id": 39057
            },
            {
              "method_name": "javax.swing.JDialog.getJMenuBar()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the menubar set on this dialog.",
                  "sentence_id": 265914
                }
              ],
              "method_id": 39043
            },
            {
              "method_name": "javax.swing.JDialog.JDialog(java.awt.Dialog,java.lang.String,boolean,java.awt.GraphicsConfiguration)",
              "method_sentence": [
                {
                  "sentence_text": "NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a modal dialog will be forced to be lightweight.",
                  "sentence_id": 413288
                },
                {
                  "sentence_text": "Creates a dialog with the specified title, owner Dialog, modality and GraphicsConfiguration.",
                  "sentence_id": 265900
                },
                {
                  "sentence_text": "This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale.",
                  "sentence_id": 413289
                }
              ],
              "method_id": 39029
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JOptionPane",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html",
          "class_id": 3152,
          "class_sentence": [
            {
              "sentence_text": "You can provide any buttons you want using the options parameter.",
              "sentence_id": 362596
            },
            {
              "sentence_text": "A button is created for each object depending on its type: ComponentThe component is added to the button row directly.",
              "sentence_id": 362600
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JOptionPane.createDialog(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The returned JDialog will be set up such that once it is closed, or the user clicks on one of the buttons, the optionpane's value property will be set accordingly and the dialog will be closed.",
                  "sentence_id": 414001
                },
                {
                  "sentence_text": "Each time the dialog is made visible, it will reset the option pane's value property to JOptionPane.UNINITIALIZED_VALUE to ensure the user's subsequent action closes the dialog properly.",
                  "sentence_id": 414002
                },
                {
                  "sentence_text": "The returned JDialog will not be resizable by the user, however programs can invoke setResizable on the JDialog instance to change this property.",
                  "sentence_id": 414000
                }
              ],
              "method_id": 39777
            },
            {
              "method_name": "javax.swing.JOptionPane.createDialog(java.awt.Component,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The returned JDialog will be set up such that once it is closed, or the user clicks on one of the buttons, the optionpane's value property will be set accordingly and the dialog will be closed.",
                  "sentence_id": 413998
                },
                {
                  "sentence_text": "Each time the dialog is made visible, it will reset the option pane's value property to JOptionPane.UNINITIALIZED_VALUE to ensure the user's subsequent action closes the dialog properly.",
                  "sentence_id": 413999
                },
                {
                  "sentence_text": "The returned JDialog will not be resizable by the user, however programs can invoke setResizable on the JDialog instance to change this property.",
                  "sentence_id": 413997
                }
              ],
              "method_id": 39776
            },
            {
              "method_name": "javax.swing.JOptionPane.getIcon()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the icon this pane displays.",
                  "sentence_id": 266634
                }
              ],
              "method_id": 39782
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JFrame",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html",
          "class_id": 3141,
          "class_sentence": [
            {
              "sentence_text": "The default behavior is to simply hide the JFrame when the user closes the window.",
              "sentence_id": 362372
            },
            {
              "sentence_text": "The content pane provided by the root pane should, as a rule, contain all the non-menu components displayed by the JFrame.",
              "sentence_id": 362362
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the menubar for this frame.",
                  "sentence_id": 266144
                }
              ],
              "method_id": 39281
            },
            {
              "method_name": "javax.swing.JFrame.getJMenuBar()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the menubar set on this frame.",
                  "sentence_id": 266129
                }
              ],
              "method_id": 39266
            },
            {
              "method_name": "javax.swing.JFrame.setIconImage(java.awt.Image)",
              "method_sentence": [
                {
                  "sentence_text": "This method can be used instead of setIconImages() to specify a single image as a window's icon.",
                  "sentence_id": 413568
                },
                {
                  "sentence_text": "Sets the image to be displayed as the icon for this window.",
                  "sentence_id": 266143
                },
                {
                  "sentence_text": "Note : Native windowing systems may use different images of differing dimensions to represent a window, depending on the context (e.g.window decoration, window list, taskbar, etc.).",
                  "sentence_id": 413571
                }
              ],
              "method_id": 39280
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.AbstractButton",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html",
          "class_id": 3094,
          "class_sentence": [
            {
              "sentence_text": "Using an Action with a button has many benefits beyond directly configuring a button.",
              "sentence_id": 361859
            },
            {
              "sentence_text": "Defines common behaviors for buttons and menu items.",
              "sentence_id": 234935
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.AbstractButton.doClick()",
              "method_sentence": [
                {
                  "sentence_text": "Programmatically perform a \"click\".",
                  "sentence_id": 264971
                },
                {
                  "sentence_text": "This does the same thing as if the user had pressed and released the button.",
                  "sentence_id": 412354
                }
              ],
              "method_id": 38049
            },
            {
              "method_name": "javax.swing.AbstractButton.doClick(int)",
              "method_sentence": [
                {
                  "sentence_text": "Programmatically perform a \"click\".",
                  "sentence_id": 264972
                },
                {
                  "sentence_text": "The button stays visually \"pressed\" for pressTime milliseconds.",
                  "sentence_id": 412356
                },
                {
                  "sentence_text": "This does the same thing as if the user had pressed and released the button.",
                  "sentence_id": 412355
                }
              ],
              "method_id": 38050
            },
            {
              "method_name": "javax.swing.AbstractButton.getPressedIcon()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the pressed icon for the button.",
                  "sentence_id": 264994
                }
              ],
              "method_id": 38072
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JMenuItem",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html",
          "class_id": 3151,
          "class_sentence": [
            {
              "sentence_text": "When the user selects the \"button\", the action associated with the menu item is performed.",
              "sentence_id": 362557
            },
            {
              "sentence_text": "A menu item is essentially a button sitting in a list.",
              "sentence_id": 362556
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JMenuItem.addMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)",
              "method_sentence": [
                {
                  "sentence_text": "Adds a MenuDragMouseListener to the menu item.",
                  "sentence_id": 266551
                }
              ],
              "method_id": 39698
            },
            {
              "method_name": "javax.swing.JMenuItem.processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Handles mouse drag in a menu.",
                  "sentence_id": 266573
                }
              ],
              "method_id": 39720
            },
            {
              "method_name": "javax.swing.JMenuItem.setAccelerator(javax.swing.KeyStroke)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy.",
                  "sentence_id": 266578
                },
                {
                  "sentence_text": "Note that when the keyboard accelerator is typed, it will work whether or not the menu is currently displayed.",
                  "sentence_id": 413989
                },
                {
                  "sentence_text": "It is the UI's responsibility to install the correct action.",
                  "sentence_id": 413988
                }
              ],
              "method_id": 39725
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.ButtonGroup",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/ButtonGroup.html",
          "class_id": 3103,
          "class_sentence": [
            {
              "sentence_text": "Creating a set of buttons with the same ButtonGroup object means that turning \"on\" one of those buttons turns off all other buttons in the group.",
              "sentence_id": 361928
            },
            {
              "sentence_text": "It wouldn't make sense to put an instance of JButton or JMenuItem in a button group because JButton and JMenuItem don't implement the selected state.",
              "sentence_id": 361931
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.ButtonGroup.getSelection()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the model of the selected button.",
                  "sentence_id": 265151
                }
              ],
              "method_id": 38239
            },
            {
              "method_name": "javax.swing.ButtonGroup.add(javax.swing.AbstractButton)",
              "method_sentence": [
                {
                  "sentence_text": "Adds the button to the group.",
                  "sentence_id": 265147
                }
              ],
              "method_id": 38235
            },
            {
              "method_name": "javax.swing.ButtonGroup.getButtonCount()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the number of buttons in the group.",
                  "sentence_id": 265149
                }
              ],
              "method_id": 38237
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How to generate a random permutation in Java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.util.Random",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Random.html",
          "class_id": 1897,
          "class_sentence": [
            {
              "sentence_text": "If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers.",
              "sentence_id": 353554
            },
            {
              "sentence_text": "In order to guarantee this property, particular algorithms are specified for the class Random.",
              "sentence_id": 353555
            }
          ],
          "method": [
            {
              "method_name": "java.util.Random.Random()",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new random number generator.",
                  "sentence_id": 254226
                },
                {
                  "sentence_text": "This constructor sets the seed of the random number generator to a value very likely to be distinct from any other invocation of this constructor.",
                  "sentence_id": 399019
                }
              ],
              "method_id": 26894
            },
            {
              "method_name": "java.util.Random.Random(long)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new random number generator using a single long seed.",
                  "sentence_id": 254227
                },
                {
                  "sentence_text": "The invocation new Random(seed) is equivalent to: Random rnd = new Random(); rnd.setSeed(seed);",
                  "sentence_id": 399021
                },
                {
                  "sentence_text": "The seed is the initial value of the internal state of the pseudorandom number generator which is maintained by method next(int).",
                  "sentence_id": 399020
                }
              ],
              "method_id": 26895
            },
            {
              "method_name": "java.util.Random.nextLong()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence.",
                  "sentence_id": 254248
                },
                {
                  "sentence_text": "The method nextLong is implemented by class Random as if by: public long nextLong() { return ((long)next(32) << 32) + next(32); } Because class Random uses a seed with only 48 bits, this algorithm will not return all possible long values.",
                  "sentence_id": 399071
                },
                {
                  "sentence_text": "The general contract of nextLong is that one long value is pseudorandomly generated and returned.",
                  "sentence_id": 399070
                }
              ],
              "method_id": 26916
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Math",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
          "class_id": 1004,
          "class_sentence": [
            {
              "sentence_text": "Unlike some of the numeric methods of class StrictMath, all implementations of the equivalent functions of class Math are not defined to return the bit-for-bit same results.",
              "sentence_id": 346392
            },
            {
              "sentence_text": "The developer should choose the primitive type to ensure that arithmetic operations consistently produce correct results, which in some cases means the operations will not overflow the range of values of the computation.",
              "sentence_id": 346410
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Math.random()",
              "method_sentence": [
                {
                  "sentence_text": "When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression new java.util.Random() .",
                  "sentence_id": 379357
                },
                {
                  "sentence_text": "This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.",
                  "sentence_id": 379358
                },
                {
                  "sentence_text": "However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.",
                  "sentence_id": 379360
                }
              ],
              "method_id": 17355
            },
            {
              "method_name": "java.lang.Math.getExponent(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the unbiased exponent used in the representation of a double.",
                  "sentence_id": 244656
                },
                {
                  "sentence_text": "Special cases: If the argument is NaN or infinite, then the result is Double.MAX_EXPONENT + 1.",
                  "sentence_id": 379254
                },
                {
                  "sentence_text": "If the argument is zero or subnormal, then the result is Double.MIN_EXPONENT -1.",
                  "sentence_id": 379255
                }
              ],
              "method_id": 17328
            },
            {
              "method_name": "java.lang.Math.log(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the natural logarithm (base e) of a double value.",
                  "sentence_id": 244661
                },
                {
                  "sentence_text": "The computed result must be within 1 ulp of the exact result.",
                  "sentence_id": 379267
                },
                {
                  "sentence_text": "Special cases: If the argument is NaN or less than zero, then the result is NaN.",
                  "sentence_id": 379264
                }
              ],
              "method_id": 17333
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.security.SecureRandom",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html",
          "class_id": 1529,
          "class_sentence": [
            {
              "sentence_text": "Many SecureRandom implementations are in the form of a pseudo-random number generator (PRNG), which means they use a deterministic algorithm to produce a pseudo-random sequence from a true random seed.",
              "sentence_id": 349727
            },
            {
              "sentence_text": "This class provides a cryptographically strong random number generator (RNG).",
              "sentence_id": 233383
            }
          ],
          "method": [
            {
              "method_name": "java.security.SecureRandom.SecureRandom()",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a secure random number generator (RNG) implementing the default random number algorithm.",
                  "sentence_id": 248821
                },
                {
                  "sentence_text": "To seed the returned object, call the setSeed method.",
                  "sentence_id": 387327
                },
                {
                  "sentence_text": "A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned.",
                  "sentence_id": 387322
                }
              ],
              "method_id": 21485
            },
            {
              "method_name": "java.security.SecureRandom.SecureRandom(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a secure random number generator (RNG) implementing the default random number algorithm.",
                  "sentence_id": 248822
                },
                {
                  "sentence_text": "The SecureRandom instance is seeded with the specified seed bytes.",
                  "sentence_id": 387330
                },
                {
                  "sentence_text": "A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned.",
                  "sentence_id": 387332
                }
              ],
              "method_id": 21486
            },
            {
              "method_name": "java.security.SecureRandom.setSeed(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Reseeds this random object.",
                  "sentence_id": 248834
                },
                {
                  "sentence_text": "Thus, repeated calls are guaranteed never to reduce randomness.",
                  "sentence_id": 387367
                },
                {
                  "sentence_text": "The given seed supplements, rather than replaces, the existing seed.",
                  "sentence_id": 387366
                }
              ],
              "method_id": 21498
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.stream.IntStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html",
          "class_id": 2134,
          "class_sentence": [
            {
              "sentence_text": "A sequence of primitive int-valued elements supporting sequential and parallel aggregate operations.",
              "sentence_id": 233988
            },
            {
              "sentence_text": "The following example illustrates an aggregate operation using Stream and IntStream, computing the sum of the weights of the red widgets: int sum = widgets.stream() .filter(w -> w.getColor() == RED) .mapToInt(w -> w.getWeight()) .sum(); .",
              "sentence_id": 355673
            }
          ],
          "method": [
            {
              "method_name": "java.util.stream.IntStream.generate(java.util.function.IntSupplier)",
              "method_sentence": [
                {
                  "sentence_text": "This is suitable for generating constant streams, streams of random elements, etc.",
                  "sentence_id": 402582
                },
                {
                  "sentence_text": "Returns an infinite sequential unordered stream where each element is generated by the provided IntSupplier.",
                  "sentence_id": 256843
                }
              ],
              "method_id": 29678
            },
            {
              "method_name": "java.util.stream.IntStream.iterate(int,java.util.function.IntUnaryOperator)",
              "method_sentence": [
                {
                  "sentence_text": "Returns an infinite sequential ordered IntStream produced by iterative application of a function f to an initial element seed, producing a Stream consisting of seed, f(seed), f(f(seed)), etc.",
                  "sentence_id": 256844
                },
                {
                  "sentence_text": "The first element (position 0) in the IntStream will be the provided seed.",
                  "sentence_id": 402583
                },
                {
                  "sentence_text": "For n > 0, the element at position n, will be the result of applying the function f to the element at position n - 1.",
                  "sentence_id": 402584
                }
              ],
              "method_id": 29679
            },
            {
              "method_name": "java.util.stream.IntStream.mapToDouble(java.util.function.IntToDoubleFunction)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a DoubleStream consisting of the results of applying the given function to the elements of this stream.",
                  "sentence_id": 256848
                },
                {
                  "sentence_text": "This is an intermediate operation.",
                  "sentence_id": 402587
                }
              ],
              "method_id": 29683
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.UUID",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html",
          "class_id": 1917,
          "class_sentence": [
            {
              "sentence_text": "There are four different basic types of UUIDs: time-based, DCE security, name-based, and randomly generated UUIDs.",
              "sentence_id": 353880
            },
            {
              "sentence_text": "The bit layout described above is valid only for a UUID with a variant value of 2, which indicates the Leach-Salz variant.",
              "sentence_id": 353878
            }
          ],
          "method": [
            {
              "method_name": "java.util.UUID.randomUUID()",
              "method_sentence": [
                {
                  "sentence_text": "The UUID is generated using a cryptographically strong pseudo random number generator.",
                  "sentence_id": 399758
                },
                {
                  "sentence_text": "Static factory to retrieve a type 4 (pseudo randomly generated) UUID.",
                  "sentence_id": 254601
                }
              ],
              "method_id": 27269
            },
            {
              "method_name": "java.util.UUID.hashCode()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a hash code for this UUID.",
                  "sentence_id": 254598
                }
              ],
              "method_id": 27266
            },
            {
              "method_name": "java.util.UUID.equals(java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "The result is true if and only if the argument is not null, is a UUID object, has the same variant, and contains the same value, bit for bit, as this UUID.",
                  "sentence_id": 399753
                },
                {
                  "sentence_text": "Compares this object to the specified object.",
                  "sentence_id": 254594
                }
              ],
              "method_id": 27262
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.ArrayList",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html",
          "class_id": 1854,
          "class_sentence": [
            {
              "sentence_text": "The add operation runs in amortized constant time, that is, adding n elements requires O(n) time.",
              "sentence_id": 352293
            },
            {
              "sentence_text": "Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.",
              "sentence_id": 352310
            }
          ],
          "method": [
            {
              "method_name": "java.util.ArrayList.sort(java.util.Comparator<? super E>)",
              "method_sentence": [
                {
                  "sentence_text": "Sorts this list according to the order induced by the specified Comparator.",
                  "sentence_id": 309646
                },
                {
                  "sentence_text": "A null value indicates that the elements' natural ordering should be used",
                  "sentence_id": 518294
                },
                {
                  "sentence_text": "If the specified comparator is null then all elements in this list must implement the Comparable interface and the elements' natural ordering should be used.",
                  "sentence_id": 518286
                }
              ],
              "method_id": 83335
            },
            {
              "method_name": "java.util.ArrayList.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                  "sentence_id": 253266
                },
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.",
                  "sentence_id": 397286
                },
                {
                  "sentence_text": "(This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)",
                  "sentence_id": 397288
                }
              ],
              "method_id": 25934
            },
            {
              "method_name": "java.util.ArrayList.subList(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Similar idioms may be constructed for indexOf(Object) and lastIndexOf(Object), and all of the algorithms in the Collections class can be applied to a subList.",
                  "sentence_id": 397278
                },
                {
                  "sentence_text": "This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays).",
                  "sentence_id": 397275
                },
                {
                  "sentence_text": "(Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)",
                  "sentence_id": 397280
                }
              ],
              "method_id": 25932
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.Collections",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html",
          "class_id": 1862,
          "class_sentence": [
            {
              "sentence_text": "(For example, the algorithm used by sort does not have to be a mergesort, but it does have to be stable.)",
              "sentence_id": 352454
            },
            {
              "sentence_text": "It contains polymorphic algorithms that operate on collections, \"wrappers\", which return a new collection backed by a specified collection, and a few other odds and ends.",
              "sentence_id": 352449
            }
          ],
          "method": [
            {
              "method_name": "java.util.Collections.shuffle(java.util.List<?>,java.util.Random)",
              "method_sentence": [
                {
                  "sentence_text": "All permutations occur with equal likelihood assuming that the source of randomness is fair.",
                  "sentence_id": 398137
                },
                {
                  "sentence_text": "Randomly permute the specified list using the specified source of randomness.",
                  "sentence_id": 253650
                },
                {
                  "sentence_text": "This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.",
                  "sentence_id": 398142
                }
              ],
              "method_id": 26318
            },
            {
              "method_name": "java.util.Collections.shuffle(java.util.List<?>)",
              "method_sentence": [
                {
                  "sentence_text": "If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity.",
                  "sentence_id": 398131
                },
                {
                  "sentence_text": "Randomly permutes the specified list using a default source of randomness.",
                  "sentence_id": 253649
                },
                {
                  "sentence_text": "All permutations occur with approximately equal likelihood.",
                  "sentence_id": 398129
                }
              ],
              "method_id": 26317
            },
            {
              "method_name": "java.util.Collections.binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>,T)",
              "method_sentence": [
                {
                  "sentence_text": "This method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access).",
                  "sentence_id": 397967
                },
                {
                  "sentence_text": "The list must be sorted into ascending order according to the natural ordering of its elements (as by the sort(List) method) prior to making this call.",
                  "sentence_id": 397964
                },
                {
                  "sentence_text": "If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.",
                  "sentence_id": 397968
                }
              ],
              "method_id": 26277
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.math.BigInteger",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html",
          "class_id": 1171,
          "class_sentence": [
            {
              "sentence_text": "None of the single-bit operations can produce a BigInteger with a different sign from the BigInteger being operated on, as they affect only a single bit, and the \"infinite word size\" abstraction provided by this class ensures that there are infinitely many \"virtual sign bits\" preceding each BigInteger.",
              "sentence_id": 347666
            },
            {
              "sentence_text": "All operations behave as if BigIntegers were represented in two's-complement notation (like Java's primitive integer types).",
              "sentence_id": 347650
            }
          ],
          "method": [
            {
              "method_name": "java.math.BigInteger.BigInteger(int,java.util.Random)",
              "method_sentence": [
                {
                  "sentence_text": "The uniformity of the distribution assumes that a fair source of random bits is provided in rnd.",
                  "sentence_id": 382663
                },
                {
                  "sentence_text": "Constructs a randomly generated BigInteger, uniformly distributed over the range 0 to (2numBits - 1), inclusive.",
                  "sentence_id": 246312
                },
                {
                  "sentence_text": "Note that this constructor always constructs a non-negative BigInteger.",
                  "sentence_id": 382664
                }
              ],
              "method_id": 18952
            },
            {
              "method_name": "java.math.BigInteger.BigInteger(int,int,java.util.Random)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a randomly generated positive BigInteger that is probably prime, with the specified bitLength.",
                  "sentence_id": 246313
                },
                {
                  "sentence_text": "It is recommended that the probablePrime method be used in preference to this constructor unless there is a compelling need to specify a certainty.",
                  "sentence_id": 382665
                }
              ],
              "method_id": 18953
            },
            {
              "method_name": "java.math.BigInteger.bitLength()",
              "method_sentence": [
                {
                  "sentence_text": "For positive BigIntegers, this is equivalent to the number of bits in the ordinary binary representation.",
                  "sentence_id": 382670
                },
                {
                  "sentence_text": "Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit.",
                  "sentence_id": 246319
                },
                {
                  "sentence_text": "(Computes (ceil(log2(this < 0 ?",
                  "sentence_id": 382671
                }
              ],
              "method_id": 18959
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.List",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/List.html",
          "class_id": 1824,
          "class_sentence": [
            {
              "sentence_text": "An ordered collection (also known as a sequence).",
              "sentence_id": 233678
            },
            {
              "sentence_text": "Note that these operations may execute in time proportional to the index value for some implementations (the LinkedList class, for example).",
              "sentence_id": 352013
            }
          ],
          "method": [
            {
              "method_name": "java.util.List.hashCode()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the hash code value for this list.",
                  "sentence_id": 252930
                },
                {
                  "sentence_text": "The hash code of a list is defined to be the result of the following calculation: int hashCode = 1; for (E e : list) hashCode = 31*hashCode + (e==null ?0 : e.hashCode()); .",
                  "sentence_id": 396601
                },
                {
                  "sentence_text": "This ensures that list1.equals(list2) implies that list1.hashCode()==list2.hashCode() for any two lists, list1 and list2, as required by the general contract of Object.hashCode().",
                  "sentence_id": 396603
                }
              ],
              "method_id": 25598
            },
            {
              "method_name": "java.util.List.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                  "sentence_id": 252948
                },
                {
                  "sentence_text": "Suppose x is a list known to contain only strings.",
                  "sentence_id": 396643
                },
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.",
                  "sentence_id": 396638
                }
              ],
              "method_id": 25616
            },
            {
              "method_name": "java.util.List.sort(java.util.Comparator<? super E>)",
              "method_sentence": [
                {
                  "sentence_text": "Sorts this list according to the order induced by the specified Comparator.",
                  "sentence_id": 309557
                },
                {
                  "sentence_text": "If the specified comparator is null then all elements in this list must implement the Comparable interface and the elements' natural ordering should be used.",
                  "sentence_id": 518025
                },
                {
                  "sentence_text": "All elements in this list must be mutually comparable using the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list).",
                  "sentence_id": 518024
                }
              ],
              "method_id": 83246
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase.",
              "sentence_id": 346615
            },
            {
              "sentence_text": "Strings are constant; their values cannot be changed after they are created.",
              "sentence_id": 346609
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.hashCode()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a hash code for this string.",
                  "sentence_id": 245014
                },
                {
                  "sentence_text": "(The hash value of the empty string is zero.)",
                  "sentence_id": 380275
                },
                {
                  "sentence_text": "using int arithmetic, where s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation.",
                  "sentence_id": 380274
                }
              ],
              "method_id": 17670
            },
            {
              "method_name": "java.lang.String.split(java.lang.String,int)",
              "method_sentence": [
                {
                  "sentence_text": "If n is non-positive then the pattern will be applied as many times as possible and the array can have any length.",
                  "sentence_id": 380349
                },
                {
                  "sentence_text": "If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter.",
                  "sentence_id": 380348
                },
                {
                  "sentence_text": "The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.",
                  "sentence_id": 380347
                }
              ],
              "method_id": 17692
            },
            {
              "method_name": "java.lang.String.String()",
              "method_sentence": [
                {
                  "sentence_text": "Initializes a newly created String object so that it represents an empty character sequence.",
                  "sentence_id": 244977
                },
                {
                  "sentence_text": "Note that use of this constructor is unnecessary since Strings are immutable.",
                  "sentence_id": 380193
                }
              ],
              "method_id": 17633
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Stable timer independent of system time",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "javax.swing.Timer",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/Timer.html",
          "class_id": 3216,
          "class_sentence": [
            {
              "sentence_text": "Setting up a timer involves creating a Timer object, registering one or more action listeners on it, and starting the timer using the start method.",
              "sentence_id": 363397
            },
            {
              "sentence_text": "If you want the timer to fire only the first time and then stop, invoke setRepeats(false) on the timer.",
              "sentence_id": 363405
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.Timer.isRunning()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if the Timer is running.",
                  "sentence_id": 268242
                }
              ],
              "method_id": 41433
            },
            {
              "method_name": "javax.swing.Timer.setInitialDelay(int)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event.",
                  "sentence_id": 268248
                },
                {
                  "sentence_text": "Upon construction, this is set to be the same as the between-event delay, but then its value is independent and remains unaffected by changes to the between-event delay.",
                  "sentence_id": 415799
                }
              ],
              "method_id": 41439
            },
            {
              "method_name": "javax.swing.Timer.getInitialDelay()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the Timer's initial delay.",
                  "sentence_id": 268237
                }
              ],
              "method_id": 41428
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.Timer",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html",
          "class_id": 1912,
          "class_sentence": [
            {
              "sentence_text": "This class does not offer real-time guarantees: it schedules tasks using the Object.wait(long) method.",
              "sentence_id": 353810
            },
            {
              "sentence_text": "Timer tasks should complete quickly.",
              "sentence_id": 353801
            }
          ],
          "method": [
            {
              "method_name": "java.util.Timer.Timer(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "A daemon thread is called for if the timer will be used to schedule repeating \"maintenance activities\", which must be performed as long as the application is running, but should not prolong the lifetime of the application.",
                  "sentence_id": 399589
                },
                {
                  "sentence_text": "Creates a new timer whose associated thread may be specified to run as a daemon.",
                  "sentence_id": 254475
                }
              ],
              "method_id": 27143
            },
            {
              "method_name": "java.util.Timer.Timer()",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new timer.",
                  "sentence_id": 254474
                },
                {
                  "sentence_text": "The associated thread does not run as a daemon.",
                  "sentence_id": 399588
                }
              ],
              "method_id": 27142
            },
            {
              "method_name": "java.util.Timer.cancel()",
              "method_sentence": [
                {
                  "sentence_text": "Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer.",
                  "sentence_id": 399593
                },
                {
                  "sentence_text": "Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it.",
                  "sentence_id": 399592
                },
                {
                  "sentence_text": "Terminates this timer, discarding any currently scheduled tasks.",
                  "sentence_id": 254478
                }
              ],
              "method_id": 27146
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Thread",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
          "class_id": 1021,
          "class_sentence": [
            {
              "sentence_text": "The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.",
              "sentence_id": 346659
            },
            {
              "sentence_text": "There are two ways to create a new thread of execution.",
              "sentence_id": 346667
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Thread.getId()",
              "method_sentence": [
                {
                  "sentence_text": "The thread ID is a positive long number generated when this thread was created.",
                  "sentence_id": 380831
                },
                {
                  "sentence_text": "The thread ID is unique and remains unchanged during its lifetime.",
                  "sentence_id": 380832
                },
                {
                  "sentence_text": "When a thread is terminated, this thread ID may be reused.",
                  "sentence_id": 380833
                }
              ],
              "method_id": 17875
            },
            {
              "method_name": "java.lang.Thread.sleep(long,int)",
              "method_sentence": [
                {
                  "sentence_text": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers.",
                  "sentence_id": 245244
                },
                {
                  "sentence_text": "The thread does not lose ownership of any monitors.",
                  "sentence_id": 380883
                }
              ],
              "method_id": 17900
            },
            {
              "method_name": "java.lang.Thread.sleep(long)",
              "method_sentence": [
                {
                  "sentence_text": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers.",
                  "sentence_id": 245243
                },
                {
                  "sentence_text": "The thread does not lose ownership of any monitors.",
                  "sentence_id": 380882
                }
              ],
              "method_id": 17899
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.TimerTask",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/TimerTask.html",
          "class_id": 1913,
          "class_sentence": [
            {
              "sentence_text": "A task that can be scheduled for one-time or repeated execution by a Timer.",
              "sentence_id": 233767
            }
          ],
          "method": [
            {
              "method_name": "java.util.TimerTask.cancel()",
              "method_sentence": [
                {
                  "sentence_text": "Note that calling this method from within the run method of a repeating timer task absolutely guarantees that the timer task will not run again.",
                  "sentence_id": 399637
                },
                {
                  "sentence_text": "Cancels this timer task.",
                  "sentence_id": 254487
                },
                {
                  "sentence_text": "If the task has been scheduled for one-time execution and has not yet run, or has not yet been scheduled, it will never run.",
                  "sentence_id": 399634
                }
              ],
              "method_id": 27155
            },
            {
              "method_name": "java.util.TimerTask.scheduledExecutionTime()",
              "method_sentence": [
                {
                  "sentence_text": "This method is typically not used in conjunction with fixed-delay execution repeating tasks, as their scheduled execution times are allowed to drift over time, and so are not terribly significant.",
                  "sentence_id": 399642
                },
                {
                  "sentence_text": "Returns the scheduled execution time of the most recent actual execution of this task.",
                  "sentence_id": 254489
                },
                {
                  "sentence_text": "This method is typically invoked from within a task's run method, to determine whether the current execution of the task is sufficiently timely to warrant performing the scheduled activity: public void run() { if (System.currentTimeMillis() - scheduledExecutionTime() >= MAX_TARDINESS) return; // Too late; skip this execution.",
                  "sentence_id": 399640
                }
              ],
              "method_id": 27157
            },
            {
              "method_name": "java.util.TimerTask.TimerTask()",
              "method_sentence": [
                {
                  "sentence_text": "Creates a new timer task.",
                  "sentence_id": 254486
                }
              ],
              "method_id": 27154
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.SwingWorker",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html",
          "class_id": 3215,
          "class_sentence": [
            {
              "sentence_text": "SwingWorker is designed for situations where you need to have a long running task run in a background thread and provide updates to the UI either when done, or while processing.",
              "sentence_id": 363369
            },
            {
              "sentence_text": "These constraints mean that a GUI application with time intensive computing needs at least two threads: 1) a thread to perform the lengthy task and 2) the Event Dispatch Thread (EDT) for all GUI-related activities.",
              "sentence_id": 363367
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.SwingWorker.cancel(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "If successful, and this task has not started when cancel is called, this task should never run.",
                  "sentence_id": 415739
                },
                {
                  "sentence_text": "If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.",
                  "sentence_id": 415740
                },
                {
                  "sentence_text": "Attempts to cancel execution of this task.",
                  "sentence_id": 268214
                }
              ],
              "method_id": 41404
            },
            {
              "method_name": "javax.swing.SwingWorker.get(long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.",
                  "sentence_id": 268220
                }
              ],
              "method_id": 41410
            },
            {
              "method_name": "javax.swing.SwingWorker.isCancelled()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if this task was cancelled before it completed normally.",
                  "sentence_id": 268224
                }
              ],
              "method_id": 41414
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ScheduledExecutorService",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html",
          "class_id": 1962,
          "class_sentence": [
            {
              "sentence_text": "Beware however that expiration of a relative delay need not coincide with the current Date at which the task is enabled due to network time synchronization protocols, clock drift, or other factors.",
              "sentence_id": 354074
            },
            {
              "sentence_text": "Zero and negative delays (but not periods) are also allowed in schedule methods, and are treated as requests for immediate execution.",
              "sentence_id": 354070
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on.",
                  "sentence_id": 254886
                },
                {
                  "sentence_text": "If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.",
                  "sentence_id": 400068
                },
                {
                  "sentence_text": "If any execution of the task encounters an exception, subsequent executions are suppressed.",
                  "sentence_id": 400066
                }
              ],
              "method_id": 27554
            },
            {
              "method_name": "java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.",
                  "sentence_id": 254887
                },
                {
                  "sentence_text": "If any execution of the task encounters an exception, subsequent executions are suppressed.",
                  "sentence_id": 400069
                },
                {
                  "sentence_text": "Otherwise, the task will only terminate via cancellation or termination of the executor.",
                  "sentence_id": 400070
                }
              ],
              "method_id": 27555
            },
            {
              "method_name": "java.util.concurrent.ScheduledExecutorService.schedule(java.util.concurrent.Callable<V>,long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Creates and executes a ScheduledFuture that becomes enabled after the given delay.",
                  "sentence_id": 254885
                }
              ],
              "method_id": 27553
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.time.LocalDate",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html",
          "class_id": 1751,
          "class_sentence": [
            {
              "sentence_text": "It cannot represent an instant on the time-line without additional information such as an offset or time-zone.",
              "sentence_id": 351154
            },
            {
              "sentence_text": "However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable.",
              "sentence_id": 351158
            }
          ],
          "method": [
            {
              "method_name": "java.time.LocalDate.now(java.time.ZoneId)",
              "method_sentence": [
                {
                  "sentence_text": "This will query the system clock to obtain the current date.",
                  "sentence_id": 391355
                },
                {
                  "sentence_text": "Obtains the current date from the system clock in the specified time-zone.",
                  "sentence_id": 251476
                },
                {
                  "sentence_text": "Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
                  "sentence_id": 391357
                }
              ],
              "method_id": 24144
            },
            {
              "method_name": "java.time.LocalDate.now()",
              "method_sentence": [
                {
                  "sentence_text": "Obtains the current date from the system clock in the default time-zone.",
                  "sentence_id": 251475
                },
                {
                  "sentence_text": "This will query the system clock in the default time-zone to obtain the current date.",
                  "sentence_id": 391353
                },
                {
                  "sentence_text": "Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
                  "sentence_id": 391354
                }
              ],
              "method_id": 24143
            },
            {
              "method_name": "java.time.LocalDate.now(java.time.Clock)",
              "method_sentence": [
                {
                  "sentence_text": "Using this method allows the use of an alternate clock for testing.",
                  "sentence_id": 391359
                },
                {
                  "sentence_text": "Obtains the current date from the specified clock.",
                  "sentence_id": 251477
                },
                {
                  "sentence_text": "This will query the specified clock to obtain the current date - today.",
                  "sentence_id": 391358
                }
              ],
              "method_id": 24145
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ScheduledThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html",
          "class_id": 1995,
          "class_sentence": [
            {
              "sentence_text": "Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission.",
              "sentence_id": 354548
            },
            {
              "sentence_text": "Delayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence.",
              "sentence_id": 354547
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.",
                  "sentence_id": 255608
                },
                {
                  "sentence_text": "In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown.",
                  "sentence_id": 400770
                },
                {
                  "sentence_text": "This value is by default false.",
                  "sentence_id": 400771
                }
              ],
              "method_id": 28280
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.",
                  "sentence_id": 255616
                },
                {
                  "sentence_text": "In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown.",
                  "sentence_id": 400777
                },
                {
                  "sentence_text": "This value is by default false.",
                  "sentence_id": 400778
                }
              ],
              "method_id": 28288
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.",
                  "sentence_id": 400786
                },
                {
                  "sentence_text": "If the ExecuteExistingDelayedTasksAfterShutdownPolicy has been set false, existing delayed tasks whose delays have not yet elapsed are cancelled.",
                  "sentence_id": 400785
                },
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400783
                }
              ],
              "method_id": 28291
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.management.OperatingSystemMXBean",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/management/OperatingSystemMXBean.html",
          "class_id": 1123,
          "class_sentence": [
            {
              "sentence_text": "This interface defines several convenient methods for accessing system properties about the operating system on which the Java virtual machine is running.",
              "sentence_id": 347350
            },
            {
              "sentence_text": "The management interface for the operating system on which the Java virtual machine is running.",
              "sentence_id": 232977
            }
          ],
          "method": [
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getSystemLoadAverage()",
              "method_sentence": [
                {
                  "sentence_text": "The way in which the load average is calculated is operating system specific but is typically a damped time-dependent average.",
                  "sentence_id": 381970
                },
                {
                  "sentence_text": "The system load average is the sum of the number of runnable entities queued to the available processors and the number of runnable entities running on the available processors averaged over a period of time.",
                  "sentence_id": 381969
                },
                {
                  "sentence_text": "The load average may be unavailable on some platform where it is expensive to implement this method.",
                  "sentence_id": 381973
                }
              ],
              "method_id": 18483
            },
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getVersion()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the operating system version.",
                  "sentence_id": 245846
                },
                {
                  "sentence_text": "This method is equivalent to System.getProperty(\"os.version\").",
                  "sentence_id": 381974
                }
              ],
              "method_id": 18484
            },
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getArch()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the operating system architecture.",
                  "sentence_id": 245842
                },
                {
                  "sentence_text": "This method is equivalent to System.getProperty(\"os.arch\").",
                  "sentence_id": 381965
                }
              ],
              "method_id": 18480
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ExecutorService",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html",
          "class_id": 1955,
          "class_sentence": [
            {
              "sentence_text": "An Executor that provides methods to manage termination and methods that can produce a Future for tracking progress of one or more asynchronous tasks.",
              "sentence_id": 233809
            },
            {
              "sentence_text": "Methods invokeAny and invokeAll perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete.",
              "sentence_id": 354042
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)",
              "method_sentence": [
                {
                  "sentence_text": "Executes the given tasks, returning a list of Futures holding their status and results when all complete.",
                  "sentence_id": 254862
                },
                {
                  "sentence_text": "The results of this method are undefined if the given collection is modified while this operation is in progress.",
                  "sentence_id": 400035
                },
                {
                  "sentence_text": "Note that a completed task could have terminated either normally or by throwing an exception.",
                  "sentence_id": 400034
                }
              ],
              "method_id": 27530
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses.",
                  "sentence_id": 254865
                },
                {
                  "sentence_text": "Upon normal or exceptional return, tasks that have not completed are cancelled.",
                  "sentence_id": 400042
                },
                {
                  "sentence_text": "The results of this method are undefined if the given collection is modified while this operation is in progress.",
                  "sentence_id": 400043
                }
              ],
              "method_id": 27533
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)",
              "method_sentence": [
                {
                  "sentence_text": "Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.",
                  "sentence_id": 254863
                },
                {
                  "sentence_text": "Upon return, tasks that have not completed are cancelled.",
                  "sentence_id": 400037
                },
                {
                  "sentence_text": "Note that a completed task could have terminated either normally or by throwing an exception.",
                  "sentence_id": 400038
                }
              ],
              "method_id": 27531
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Is there any way to find os name using java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.lang.Class",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html",
          "class_id": 994,
          "class_sentence": [
            {
              "sentence_text": "Instances of the class Class represent classes and interfaces in a running Java application.",
              "sentence_id": 232848
            },
            {
              "sentence_text": "Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader.",
              "sentence_id": 346336
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Class.getCanonicalName()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the canonical name of the underlying class as defined by the Java Language Specification.",
                  "sentence_id": 244310
                },
                {
                  "sentence_text": "Returns null if the underlying class does not have a canonical name (i.e., if it is a local or anonymous class or an array whose component type does not have a canonical name).",
                  "sentence_id": 378408
                }
              ],
              "method_id": 17001
            },
            {
              "method_name": "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>)",
              "method_sentence": [
                {
                  "sentence_text": "Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.",
                  "sentence_id": 516525
                },
                {
                  "sentence_text": "This increased flexibility in the virtual machine can be used to implement various language features.",
                  "sentence_id": 516526
                },
                {
                  "sentence_text": "If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily.",
                  "sentence_id": 516524
                }
              ],
              "method_id": 83003
            },
            {
              "method_name": "java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...)",
              "method_sentence": [
                {
                  "sentence_text": "Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.",
                  "sentence_id": 378499
                },
                {
                  "sentence_text": "This increased flexibility in the virtual machine can be used to implement various language features.",
                  "sentence_id": 378500
                },
                {
                  "sentence_text": "If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily.",
                  "sentence_id": 378498
                }
              ],
              "method_id": 17027
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.File",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/File.html",
          "class_id": 922,
          "class_sentence": [
            {
              "sentence_text": "This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked.",
              "sentence_id": 345971
            },
            {
              "sentence_text": "Interoperability with java.nio.file package The java.nio.file package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.",
              "sentence_id": 345993
            }
          ],
          "method": [
            {
              "method_name": "java.io.File.canRead()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to read files that are marked as unreadable.",
                  "sentence_id": 377112
                },
                {
                  "sentence_text": "Consequently this method may return true even though the file does not have read permissions.",
                  "sentence_id": 377113
                },
                {
                  "sentence_text": "Tests whether the application can read the file denoted by this abstract pathname.",
                  "sentence_id": 243144
                }
              ],
              "method_id": 15931
            },
            {
              "method_name": "java.io.File.canWrite()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that are marked read-only.",
                  "sentence_id": 377114
                },
                {
                  "sentence_text": "Consequently this method may return true even though the file is marked read-only.",
                  "sentence_id": 377115
                },
                {
                  "sentence_text": "Tests whether the application can modify the file denoted by this abstract pathname.",
                  "sentence_id": 243145
                }
              ],
              "method_id": 15932
            },
            {
              "method_name": "java.io.File.setReadOnly()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that are marked read-only.",
                  "sentence_id": 377254
                },
                {
                  "sentence_text": "Whether or not a read-only file or directory may be deleted depends upon the underlying system.",
                  "sentence_id": 377255
                },
                {
                  "sentence_text": "After invoking this method the file or directory will not change until it is either deleted or marked to allow write access.",
                  "sentence_id": 377253
                }
              ],
              "method_id": 15973
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "Case mapping is based on the Unicode Standard version specified by the Character class.",
              "sentence_id": 346616
            },
            {
              "sentence_text": "String conversions are implemented through the method toString, defined by Object and inherited by all classes in Java.",
              "sentence_id": 346619
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.getBytes(int,int,byte[],int)",
              "method_sentence": [
                {
                  "sentence_text": "As of JDK 1.1, the preferred way to do this is via the getBytes() method, which uses the platform's default charset.",
                  "sentence_id": 380264
                },
                {
                  "sentence_text": "This method does not properly convert characters into bytes.",
                  "sentence_id": 380263
                }
              ],
              "method_id": 17665
            },
            {
              "method_name": "java.lang.String.String(byte[],int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset.",
                  "sentence_id": 380201
                },
                {
                  "sentence_text": "This method does not properly convert bytes into characters.",
                  "sentence_id": 380200
                }
              ],
              "method_id": 17638
            },
            {
              "method_name": "java.lang.String.String(byte[],int)",
              "method_sentence": [
                {
                  "sentence_text": "As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset.",
                  "sentence_id": 380203
                },
                {
                  "sentence_text": "This method does not properly convert bytes into characters.",
                  "sentence_id": 380202
                }
              ],
              "method_id": 17639
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.ProcessBuilder",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html",
          "class_id": 1009,
          "class_sentence": [
            {
              "sentence_text": "For example, it is common for each conceptual argument to be an element in this list, but there are operating systems where programs are expected to tokenize command line strings themselves - on such a system a Java implementation might require commands to contain exactly two elements.",
              "sentence_id": 346453
            },
            {
              "sentence_text": "This class is used to create operating system processes.",
              "sentence_id": 232863
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ProcessBuilder.environment()",
              "method_sentence": [
                {
                  "sentence_text": "Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess.",
                  "sentence_id": 379613
                },
                {
                  "sentence_text": "When passing information to a Java subprocess, system properties are generally preferred over environment variables.",
                  "sentence_id": 379619
                },
                {
                  "sentence_text": "Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java's Unicode strings.",
                  "sentence_id": 379612
                }
              ],
              "method_id": 17432
            },
            {
              "method_name": "java.lang.ProcessBuilder.directory()",
              "method_sentence": [
                {
                  "sentence_text": "The returned value may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.",
                  "sentence_id": 379597
                },
                {
                  "sentence_text": "Subprocesses subsequently started by this object's start() method will use this as their working directory.",
                  "sentence_id": 379596
                },
                {
                  "sentence_text": "Returns this process builder's working directory.",
                  "sentence_id": 244755
                }
              ],
              "method_id": 17430
            },
            {
              "method_name": "java.lang.ProcessBuilder.directory(java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "The argument may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.",
                  "sentence_id": 379599
                },
                {
                  "sentence_text": "Subprocesses subsequently started by this object's start() method will use this as their working directory.",
                  "sentence_id": 379598
                },
                {
                  "sentence_text": "Sets this process builder's working directory.",
                  "sentence_id": 244756
                }
              ],
              "method_id": 17431
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.management.OperatingSystemMXBean",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/management/OperatingSystemMXBean.html",
          "class_id": 1123,
          "class_sentence": [
            {
              "sentence_text": "This interface defines several convenient methods for accessing system properties about the operating system on which the Java virtual machine is running.",
              "sentence_id": 347350
            },
            {
              "sentence_text": "The management interface for the operating system on which the Java virtual machine is running.",
              "sentence_id": 232977
            }
          ],
          "method": [
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getAvailableProcessors()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the number of processors available to the Java virtual machine.",
                  "sentence_id": 245843
                },
                {
                  "sentence_text": "This value may change during a particular invocation of the virtual machine.",
                  "sentence_id": 381967
                },
                {
                  "sentence_text": "This method is equivalent to the Runtime.availableProcessors() method.",
                  "sentence_id": 381966
                }
              ],
              "method_id": 18481
            },
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getVersion()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the operating system version.",
                  "sentence_id": 245846
                },
                {
                  "sentence_text": "This method is equivalent to System.getProperty(\"os.version\").",
                  "sentence_id": 381974
                }
              ],
              "method_id": 18484
            },
            {
              "method_name": "java.lang.management.OperatingSystemMXBean.getArch()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the operating system architecture.",
                  "sentence_id": 245842
                },
                {
                  "sentence_text": "This method is equivalent to System.getProperty(\"os.arch\").",
                  "sentence_id": 381965
                }
              ],
              "method_id": 18480
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.beans.Introspector",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/beans/Introspector.html",
          "class_id": 848,
          "class_sentence": [
            {
              "sentence_text": "The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.",
              "sentence_id": 232713
            },
            {
              "sentence_text": "With the default search path, this would mean looking for \"sun.beans.infos.OurButtonBeanInfo\".",
              "sentence_id": 345718
            }
          ],
          "method": [
            {
              "method_name": "java.beans.Introspector.getBeanInfo(java.lang.Class<?>,java.lang.Class<?>)",
              "method_sentence": [
                {
                  "sentence_text": "Introspect on a Java bean and learn all about its properties, exposed methods, below a given \"stop\" point.",
                  "sentence_id": 242555
                },
                {
                  "sentence_text": "If the BeanInfo class for a Java Bean has been previously Introspected based on the same arguments, then the BeanInfo class is retrieved from the BeanInfo cache.",
                  "sentence_id": 376540
                }
              ],
              "method_id": 15376
            },
            {
              "method_name": "java.beans.Introspector.flushCaches()",
              "method_sentence": [
                {
                  "sentence_text": "It is normally only needed by advanced tools that update existing \"Class\" objects in-place and need to make the Introspector re-analyze existing Class objects.",
                  "sentence_id": 376533
                },
                {
                  "sentence_text": "This method is not normally required.",
                  "sentence_id": 376532
                },
                {
                  "sentence_text": "Flush all of the Introspector's internal caches.",
                  "sentence_id": 242551
                }
              ],
              "method_id": 15372
            },
            {
              "method_name": "java.beans.Introspector.getBeanInfo(java.lang.Class<?>)",
              "method_sentence": [
                {
                  "sentence_text": "Introspect on a Java Bean and learn about all its properties, exposed methods, and events.",
                  "sentence_id": 242553
                },
                {
                  "sentence_text": "If the BeanInfo class for a Java Bean has been previously Introspected then the BeanInfo class is retrieved from the BeanInfo cache.",
                  "sentence_id": 376538
                }
              ],
              "method_id": 15374
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.ClassLoader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html",
          "class_id": 995,
          "class_sentence": [
            {
              "sentence_text": "Normally, the Java virtual machine loads classes from the local file system in a platform-dependent manner.",
              "sentence_id": 346357
            },
            {
              "sentence_text": "Applications implement subclasses of ClassLoader in order to extend the manner in which the Java virtual machine dynamically loads classes.",
              "sentence_id": 346347
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ClassLoader.loadClass(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "It is invoked by the Java virtual machine to resolve class references.",
                  "sentence_id": 378646
                },
                {
                  "sentence_text": "This method searches for classes in the same manner as the loadClass(String, boolean) method.",
                  "sentence_id": 378645
                },
                {
                  "sentence_text": "Loads the class with the specified binary name.",
                  "sentence_id": 244389
                }
              ],
              "method_id": 17080
            },
            {
              "method_name": "java.lang.ClassLoader.findLibrary(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "If this method returns null, the VM searches the library along the path specified as the \"java.library.path\" property.",
                  "sentence_id": 378610
                },
                {
                  "sentence_text": "The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader.",
                  "sentence_id": 378609
                },
                {
                  "sentence_text": "Returns the absolute path name of a native library.",
                  "sentence_id": 244373
                }
              ],
              "method_id": 17064
            },
            {
              "method_name": "java.lang.ClassLoader.findResource(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Class loader implementations should override this method to specify where to find resources.",
                  "sentence_id": 378612
                },
                {
                  "sentence_text": "Finds the resource with the given name.",
                  "sentence_id": 244375
                }
              ],
              "method_id": 17066
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Thread",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
          "class_id": 1021,
          "class_sentence": [
            {
              "sentence_text": "When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class).",
              "sentence_id": 346664
            },
            {
              "sentence_text": "The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.",
              "sentence_id": 346659
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)",
              "method_sentence": [
                {
                  "sentence_text": "If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum.",
                  "sentence_id": 380792
                },
                {
                  "sentence_text": "Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.",
                  "sentence_id": 380798
                },
                {
                  "sentence_text": "Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely).",
                  "sentence_id": 380793
                }
              ],
              "method_id": 17863
            },
            {
              "method_name": "java.lang.Thread.start()",
              "method_sentence": [
                {
                  "sentence_text": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.",
                  "sentence_id": 245245
                },
                {
                  "sentence_text": "The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).",
                  "sentence_id": 380884
                },
                {
                  "sentence_text": "In particular, a thread may not be restarted once it has completed execution.",
                  "sentence_id": 380886
                }
              ],
              "method_id": 17901
            },
            {
              "method_name": "java.lang.Thread.getStackTrace()",
              "method_sentence": [
                {
                  "sentence_text": "In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method.",
                  "sentence_id": 380839
                },
                {
                  "sentence_text": "Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace.",
                  "sentence_id": 380838
                },
                {
                  "sentence_text": "If there is a security manager, and this thread is not the current thread, then the security manager's checkPermission method is called with a RuntimePermission(\"getStackTrace\") permission to see if it's ok to get the stack trace.",
                  "sentence_id": 380837
                }
              ],
              "method_id": 17878
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.StackTraceElement",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/StackTraceElement.html",
          "class_id": 1015,
          "class_sentence": [
            {
              "sentence_text": "The frame at the top of the stack represents the execution point at which the stack trace was generated.",
              "sentence_id": 346595
            },
            {
              "sentence_text": "Typically, this is the point at which the throwable corresponding to the stack trace was created.",
              "sentence_id": 346596
            }
          ],
          "method": [
            {
              "method_name": "java.lang.StackTraceElement.getLineNumber()",
              "method_sentence": [
                {
                  "sentence_text": "Generally, this is derived from the LineNumberTable attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.8).",
                  "sentence_id": 379957
                },
                {
                  "sentence_text": "Returns the line number of the source line containing the execution point represented by this stack trace element.",
                  "sentence_id": 244882
                }
              ],
              "method_id": 17558
            },
            {
              "method_name": "java.lang.StackTraceElement.getFileName()",
              "method_sentence": [
                {
                  "sentence_text": "Generally, this corresponds to the SourceFile attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.7).",
                  "sentence_id": 379955
                },
                {
                  "sentence_text": "In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository.",
                  "sentence_id": 379956
                },
                {
                  "sentence_text": "Returns the name of the source file containing the execution point represented by this stack trace element.",
                  "sentence_id": 244881
                }
              ],
              "method_id": 17557
            },
            {
              "method_name": "java.lang.StackTraceElement.getMethodName()",
              "method_sentence": [
                {
                  "sentence_text": "If the execution point is contained in an instance or class initializer, this method will return the appropriate special method name, <init> or <clinit>, as per Section 3.9 of The Java Virtual Machine Specification.",
                  "sentence_id": 379958
                },
                {
                  "sentence_text": "Returns the name of the method containing the execution point represented by this stack trace element.",
                  "sentence_id": 244883
                }
              ],
              "method_id": 17559
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Frame",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Frame.html",
          "class_id": 550,
          "class_sentence": [
            {
              "sentence_text": "In such an environment, when calling setLocation, you must pass a virtual coordinate to this method.",
              "sentence_id": 343688
            },
            {
              "sentence_text": "In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of all configurations are relative to the virtual-coordinate system.",
              "sentence_id": 343685
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Frame.removeNotify()",
              "method_sentence": [
                {
                  "sentence_text": "This method is called by the toolkit internally and should not be called directly by programs.",
                  "sentence_id": 370541
                },
                {
                  "sentence_text": "Makes this Frame undisplayable by removing its connection to its native screen resource.",
                  "sentence_id": 237745
                },
                {
                  "sentence_text": "Making a Frame undisplayable will cause any of its children to be made undisplayable.",
                  "sentence_id": 370540
                }
              ],
              "method_id": 10464
            },
            {
              "method_name": "java.awt.Frame.getFrames()",
              "method_sentence": [
                {
                  "sentence_text": "If called from an applet, the array includes only the Frames accessible by that applet.",
                  "sentence_id": 370524
                },
                {
                  "sentence_text": "Note: To obtain a list of all ownerless windows, including ownerless Dialogs (introduced in release 1.6), use Window.getOwnerlessWindows.",
                  "sentence_id": 370527
                },
                {
                  "sentence_text": "Warning: this method may return system created frames, such as a shared, hidden frame which is used by Swing.",
                  "sentence_id": 370525
                }
              ],
              "method_id": 10454
            },
            {
              "method_name": "java.awt.Frame.addNotify()",
              "method_sentence": [
                {
                  "sentence_text": "This method is called internally by the toolkit and should not be called directly by programs.",
                  "sentence_id": 370517
                },
                {
                  "sentence_text": "Makes this Frame displayable by connecting it to a native screen resource.",
                  "sentence_id": 237731
                },
                {
                  "sentence_text": "Making a frame displayable will cause any of its children to be made displayable.",
                  "sentence_id": 370516
                }
              ],
              "method_id": 10450
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Reading a plain text file in Java",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.nio.file.Files",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html",
          "class_id": 1342,
          "class_sentence": [
            {
              "sentence_text": "This class consists exclusively of static methods that operate on files, directories, or other types of files.",
              "sentence_id": 233196
            },
            {
              "sentence_text": "In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.",
              "sentence_id": 348976
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)",
              "method_sentence": [
                {
                  "sentence_text": "Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner.",
                  "sentence_id": 247848
                },
                {
                  "sentence_text": "The Writer methods to write text throw IOException if the text cannot be encoded using the specified charset.",
                  "sentence_id": 385880
                },
                {
                  "sentence_text": "In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing regular-file to a size of 0 if it exists.",
                  "sentence_id": 385879
                }
              ],
              "method_id": 20501
            },
            {
              "method_name": "java.nio.file.Files.newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption)",
              "method_sentence": [
                {
                  "sentence_text": "Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner.",
                  "sentence_id": 309422
                },
                {
                  "sentence_text": "The text is encoded into bytes for writing using the UTF-8 charset.",
                  "sentence_id": 517155
                }
              ],
              "method_id": 83111
            },
            {
              "method_name": "java.nio.file.Files.write(java.nio.file.Path,java.lang.Iterable<? extends java.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption...)",
              "method_sentence": [
                {
                  "sentence_text": "Write lines of text to a file.",
                  "sentence_id": 247875
                },
                {
                  "sentence_text": "In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing regular-file to a size of 0.",
                  "sentence_id": 386090
                },
                {
                  "sentence_text": "If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.",
                  "sentence_id": 386092
                }
              ],
              "method_id": 20528
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.BufferedReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html",
          "class_id": 913,
          "class_sentence": [
            {
              "sentence_text": "Without buffering, each invocation of read() or readLine() could cause bytes to be read from the file, converted into characters, and then returned, which can be very inefficient.",
              "sentence_id": 345919
            },
            {
              "sentence_text": "In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream.",
              "sentence_id": 345915
            }
          ],
          "method": [
            {
              "method_name": "java.io.BufferedReader.read(char[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1.",
                  "sentence_id": 376944
                },
                {
                  "sentence_text": "As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the read method of the underlying stream.",
                  "sentence_id": 376942
                },
                {
                  "sentence_text": "This iterated read continues until one of the following conditions becomes true: The specified number of characters have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The ready method of the underlying stream returns false, indicating that further input requests would block.",
                  "sentence_id": 376943
                }
              ],
              "method_id": 15805
            },
            {
              "method_name": "java.io.BufferedReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 242997
                }
              ],
              "method_id": 15804
            },
            {
              "method_name": "java.io.BufferedReader.readLine()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a line of text.",
                  "sentence_id": 242999
                },
                {
                  "sentence_text": "A line is considered to be terminated by any one of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed immediately by a linefeed.",
                  "sentence_id": 376950
                }
              ],
              "method_id": 15806
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.InputStreamReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html",
          "class_id": 934,
          "class_sentence": [
            {
              "sentence_text": "Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream.",
              "sentence_id": 346052
            },
            {
              "sentence_text": "To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation.",
              "sentence_id": 346053
            }
          ],
          "method": [
            {
              "method_name": "java.io.InputStreamReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 243287
                }
              ],
              "method_id": 16075
            },
            {
              "method_name": "java.io.InputStreamReader.read(char[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Reads characters into a portion of an array.",
                  "sentence_id": 243288
                }
              ],
              "method_id": 16076
            },
            {
              "method_name": "java.io.InputStreamReader.ready()",
              "method_sentence": [
                {
                  "sentence_text": "An InputStreamReader is ready if its input buffer is not empty, or if bytes are available to be read from the underlying byte stream.",
                  "sentence_id": 377449
                },
                {
                  "sentence_text": "Tells whether this stream is ready to be read.",
                  "sentence_id": 243289
                }
              ],
              "method_id": 16077
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.text.JTextComponent",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/text/JTextComponent.html",
          "class_id": 3639,
          "class_sentence": [
            {
              "sentence_text": "The minimal bindings include: inserting content into the editor for the printable keys.",
              "sentence_id": 364589
            },
            {
              "sentence_text": "The set of commands supported by the text component can be found with the getActions() method.",
              "sentence_id": 364571
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.text.JTextComponent.write(java.io.Writer)",
              "method_sentence": [
                {
                  "sentence_text": "By default this will store the model as plain text.",
                  "sentence_id": 418824
                },
                {
                  "sentence_text": "Stores the contents of the model into the given stream.",
                  "sentence_id": 272203
                }
              ],
              "method_id": 46989
            },
            {
              "method_name": "javax.swing.text.JTextComponent.read(java.io.Reader,java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "By default this will load the model as plain text.",
                  "sentence_id": 418747
                },
                {
                  "sentence_text": "Previous contents of the model are discarded.",
                  "sentence_id": 418748
                },
                {
                  "sentence_text": "This creates a model of the type appropriate for the component and initializes the model from the stream.",
                  "sentence_id": 418746
                }
              ],
              "method_id": 46958
            },
            {
              "method_name": "javax.swing.text.JTextComponent.restoreComposedText()",
              "method_sentence": [
                {
                  "sentence_text": "The saved composed text is inserted back into the document.",
                  "sentence_id": 418753
                },
                {
                  "sentence_text": "Restores composed text previously saved by saveComposedText.",
                  "sentence_id": 272177
                },
                {
                  "sentence_text": "This method should be invoked only if saveComposedText returns true.",
                  "sentence_id": 418754
                }
              ],
              "method_id": 46963
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.time.LocalTime",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html",
          "class_id": 1753,
          "class_sentence": [
            {
              "sentence_text": "This API assumes that all calendar systems use the same representation, this class, for time-of-day.",
              "sentence_id": 351181
            },
            {
              "sentence_text": "This class does not store or represent a date or time-zone.",
              "sentence_id": 351177
            }
          ],
          "method": [
            {
              "method_name": "java.time.LocalTime.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)",
              "method_sentence": [
                {
                  "sentence_text": "The text is parsed using the formatter, returning a time.",
                  "sentence_id": 391911
                },
                {
                  "sentence_text": "Obtains an instance of LocalTime from a text string using a specific formatter.",
                  "sentence_id": 251617
                }
              ],
              "method_id": 24285
            },
            {
              "method_name": "java.time.LocalTime.parse(java.lang.CharSequence)",
              "method_sentence": [
                {
                  "sentence_text": "The string must represent a valid time and is parsed using DateTimeFormatter.ISO_LOCAL_TIME.",
                  "sentence_id": 391910
                },
                {
                  "sentence_text": "Obtains an instance of LocalTime from a text string such as 10:15.",
                  "sentence_id": 251616
                }
              ],
              "method_id": 24284
            },
            {
              "method_name": "java.time.LocalTime.format(java.time.format.DateTimeFormatter)",
              "method_sentence": [
                {
                  "sentence_text": "Formats this time using the specified formatter.",
                  "sentence_id": 251589
                },
                {
                  "sentence_text": "This time will be passed to the formatter to produce a string.",
                  "sentence_id": 391837
                }
              ],
              "method_id": 24257
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.LineNumberReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/LineNumberReader.html",
          "class_id": 936,
          "class_sentence": [
            {
              "sentence_text": "A buffered character-input stream that keeps track of line numbers.",
              "sentence_id": 232790
            },
            {
              "sentence_text": "This number increments at every line terminator as the data is read, and can be changed with a call to setLineNumber(int).",
              "sentence_id": 346060
            }
          ],
          "method": [
            {
              "method_name": "java.io.LineNumberReader.readLine()",
              "method_sentence": [
                {
                  "sentence_text": "Read a line of text.",
                  "sentence_id": 243325
                },
                {
                  "sentence_text": "Whenever a line terminator is read the current line number is incremented.",
                  "sentence_id": 377454
                }
              ],
              "method_id": 16093
            },
            {
              "method_name": "java.io.LineNumberReader.LineNumberReader(java.io.Reader,int)",
              "method_sentence": [
                {
                  "sentence_text": "Create a new line-numbering reader, reading characters into a buffer of the given size.",
                  "sentence_id": 243320
                }
              ],
              "method_id": 16088
            },
            {
              "method_name": "java.io.LineNumberReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Read a single character.",
                  "sentence_id": 243323
                },
                {
                  "sentence_text": "Line terminators are compressed into single newline ('\\n') characters.",
                  "sentence_id": 377451
                },
                {
                  "sentence_text": "Whenever a line terminator is read the current line number is incremented.",
                  "sentence_id": 377452
                }
              ],
              "method_id": 16091
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.ObjectInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/ObjectInputStream.html",
          "class_id": 937,
          "class_sentence": [
            {
              "sentence_text": "Note that this behavior does not hold for streams written with the old ObjectStreamConstants.PROTOCOL_VERSION_1 protocol, in which the end of data written by writeExternal methods is not demarcated, and hence cannot be detected.",
              "sentence_id": 346095
            },
            {
              "sentence_text": "Primitive and object read calls issued from within a readExternal method behave in the same manner--if the stream is already positioned at the end of data written by the corresponding writeExternal method, object reads will throw OptionalDataExceptions with eof set to true, bytewise reads will return -1, and primitive reads will throw EOFExceptions.",
              "sentence_id": 346094
            }
          ],
          "method": [
            {
              "method_name": "java.io.ObjectInputStream.readUTF()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a String in modified UTF-8 format.",
                  "sentence_id": 243356
                }
              ],
              "method_id": 16124
            },
            {
              "method_name": "java.io.ObjectInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a byte of data.",
                  "sentence_id": 243335
                },
                {
                  "sentence_text": "This method will block if no input is available.",
                  "sentence_id": 377464
                }
              ],
              "method_id": 16103
            },
            {
              "method_name": "java.io.ObjectInputStream.readFields()",
              "method_sentence": [
                {
                  "sentence_text": "Reads the persistent fields from the stream and makes them available by name.",
                  "sentence_id": 243342
                }
              ],
              "method_id": 16110
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA.DataInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA/DataInputStream.html",
          "class_id": 4122,
          "class_sentence": [
            {
              "sentence_text": "Defines the methods used to read primitive data types from input streams for unmarshaling custom value types.",
              "sentence_id": 235926
            },
            {
              "sentence_text": "This interface is used by user written custom unmarshaling code for custom value types.",
              "sentence_id": 367011
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_wstring()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL wide string from the input stream.",
                  "sentence_id": 276020
                }
              ],
              "method_id": 51273
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_wchar()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL wide character value from the input stream.",
                  "sentence_id": 276019
                }
              ],
              "method_id": 51272
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_short()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL short from the input stream.",
                  "sentence_id": 276008
                }
              ],
              "method_id": 51261
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.PrintWriter",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html",
          "class_id": 950,
          "class_sentence": [
            {
              "sentence_text": "Prints formatted representations of objects to a text-output stream.",
              "sentence_id": 232804
            },
            {
              "sentence_text": "It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams.",
              "sentence_id": 346189
            }
          ],
          "method": [
            {
              "method_name": "java.io.PrintWriter.write(java.lang.String,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Writes a portion of a string.",
                  "sentence_id": 243572
                }
              ],
              "method_id": 16343
            },
            {
              "method_name": "java.io.PrintWriter.format(java.lang.String,java.lang.Object...)",
              "method_sentence": [
                {
                  "sentence_text": "Writes a formatted string to this writer using the specified format string and arguments.",
                  "sentence_id": 243545
                },
                {
                  "sentence_text": "The locale always used is the one returned by Locale.getDefault(), regardless of any previous invocations of other formatting methods on this object.",
                  "sentence_id": 377722
                },
                {
                  "sentence_text": "If automatic flushing is enabled, calls to this method will flush the output buffer.",
                  "sentence_id": 377721
                }
              ],
              "method_id": 16316
            },
            {
              "method_name": "java.io.PrintWriter.write(int)",
              "method_sentence": [
                {
                  "sentence_text": "Writes a single character.",
                  "sentence_id": 243569
                }
              ],
              "method_id": 16340
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JTextPane",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JTextPane.html",
          "class_id": 3176,
          "class_sentence": [
            {
              "sentence_text": "A text component that can be marked up with attributes that are represented graphically.",
              "sentence_id": 235017
            },
            {
              "sentence_text": "You can find how-to information and examples of using text panes in Using Text Components, a section in The Java Tutorial.",
              "sentence_id": 362985
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JTextPane.setDocument(javax.swing.text.Document)",
              "method_sentence": [
                {
                  "sentence_text": "Associates the editor with a text document.",
                  "sentence_id": 267510
                },
                {
                  "sentence_text": "This must be a StyledDocument.",
                  "sentence_id": 414920
                }
              ],
              "method_id": 40682
            },
            {
              "method_name": "javax.swing.JTextPane.setStyledDocument(javax.swing.text.StyledDocument)",
              "method_sentence": [
                {
                  "sentence_text": "Associates the editor with a text document.",
                  "sentence_id": 267514
                },
                {
                  "sentence_text": "The currently registered factory is used to build a view for the document, which gets displayed by the editor.",
                  "sentence_id": 414925
                }
              ],
              "method_id": 40686
            },
            {
              "method_name": "javax.swing.JTextPane.paramString()",
              "method_sentence": [
                {
                  "sentence_text": "This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations.",
                  "sentence_id": 414912
                },
                {
                  "sentence_text": "Returns a string representation of this JTextPane.",
                  "sentence_id": 267506
                },
                {
                  "sentence_text": "The returned string may be empty but may not be null.",
                  "sentence_id": 414913
                }
              ],
              "method_id": 40678
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Load Java Image inside package from a class in a different package",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.lang.Class",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html",
          "class_id": 994,
          "class_sentence": [
            {
              "sentence_text": "Instances of the class Class represent classes and interfaces in a running Java application.",
              "sentence_id": 232848
            },
            {
              "sentence_text": "Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader.",
              "sentence_id": 346336
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Class.getPackage()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the package for this class.",
                  "sentence_id": 244340
                },
                {
                  "sentence_text": "If the class was loaded by the bootstrap class loader the set of packages loaded from CLASSPATH is searched to find the package of the class.",
                  "sentence_id": 378526
                },
                {
                  "sentence_text": "The class loader of this class is used to find the package.",
                  "sentence_id": 378525
                }
              ],
              "method_id": 17031
            },
            {
              "method_name": "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
              "method_sentence": [
                {
                  "sentence_text": "Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface.",
                  "sentence_id": 378388
                },
                {
                  "sentence_text": "The specified class loader is used to load the class or interface.",
                  "sentence_id": 378389
                },
                {
                  "sentence_text": "Returns the Class object associated with the class or interface with the given string name, using the given class loader.",
                  "sentence_id": 244304
                }
              ],
              "method_id": 16995
            },
            {
              "method_name": "java.lang.Class.getResource(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The rules for searching resources associated with a given class are implemented by the defining class loader of the class.",
                  "sentence_id": 378530
                },
                {
                  "sentence_text": "If this object was loaded by the bootstrap class loader, the method delegates to ClassLoader.getSystemResource(java.lang.String).",
                  "sentence_id": 378532
                },
                {
                  "sentence_text": "Otherwise, the absolute name is of the following form: modified_package_name/name Where the modified_package_name is the package name of this object with '/' substituted for '.'",
                  "sentence_id": 378534
                }
              ],
              "method_id": 17033
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.ClassLoader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html",
          "class_id": 995,
          "class_sentence": [
            {
              "sentence_text": "For example, an application could create a network class loader to download class files from a server.",
              "sentence_id": 346364
            },
            {
              "sentence_text": "Class objects for array classes are not created by class loaders, but are created automatically as required by the Java runtime.",
              "sentence_id": 346345
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ClassLoader.definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "This allows class loaders to define the packages for their classes.",
                  "sentence_id": 378605
                },
                {
                  "sentence_text": "Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.",
                  "sentence_id": 378606
                },
                {
                  "sentence_text": "Defines a package by name in this ClassLoader.",
                  "sentence_id": 244371
                }
              ],
              "method_id": 17062
            },
            {
              "method_name": "java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "For example, if javax.lang and javax.lang.reflect both have package defaults associated with them, the latter package default applies to classes in javax.lang.reflect.",
                  "sentence_id": 378669
                },
                {
                  "sentence_text": "In the event that multiple package defaults apply to a given class, the package default pertaining to the most specific package takes precedence over the others.",
                  "sentence_id": 378668
                },
                {
                  "sentence_text": "Sets the package default assertion status for the named package.",
                  "sentence_id": 244395
                }
              ],
              "method_id": 17086
            },
            {
              "method_name": "java.lang.ClassLoader.findLibrary(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader.",
                  "sentence_id": 378609
                },
                {
                  "sentence_text": "If this method returns null, the VM searches the library along the path specified as the \"java.library.path\" property.",
                  "sentence_id": 378610
                },
                {
                  "sentence_text": "Returns the absolute path name of a native library.",
                  "sentence_id": 244373
                }
              ],
              "method_id": 17064
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.ImageIcon",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/ImageIcon.html",
          "class_id": 3123,
          "class_sentence": [
            {
              "sentence_text": "Images that are created from a URL, filename or byte array are preloaded using MediaTracker to monitor the loaded state of the image.",
              "sentence_id": 362098
            },
            {
              "sentence_text": "The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.",
              "sentence_id": 362101
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.ImageIcon.loadImage(java.awt.Image)",
              "method_sentence": [
                {
                  "sentence_text": "Loads the image, returning only when the image is loaded.",
                  "sentence_id": 265527
                }
              ],
              "method_id": 38639
            },
            {
              "method_name": "javax.swing.ImageIcon.ImageIcon(byte[],java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Normally this array is created by reading an image using Class.getResourceAsStream(), but the byte array may also be statically stored in a class.",
                  "sentence_id": 412767
                },
                {
                  "sentence_text": "Creates an ImageIcon from an array of bytes which were read from an image file containing a supported image format, such as GIF, JPEG, or (as of 1.3) PNG.",
                  "sentence_id": 265518
                }
              ],
              "method_id": 38630
            },
            {
              "method_name": "javax.swing.ImageIcon.ImageIcon(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Normally this array is created by reading an image using Class.getResourceAsStream(), but the byte array may also be statically stored in a class.",
                  "sentence_id": 412768
                },
                {
                  "sentence_text": "If the resulting image has a \"comment\" property that is a string, then the string is used as the description of this icon.",
                  "sentence_id": 412769
                },
                {
                  "sentence_text": "Creates an ImageIcon from an array of bytes which were read from an image file containing a supported image format, such as GIF, JPEG, or (as of 1.3) PNG.",
                  "sentence_id": 265519
                }
              ],
              "method_id": 38631
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.URLClassLoader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/URLClassLoader.html",
          "class_id": 1218,
          "class_sentence": [
            {
              "sentence_text": "This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories.",
              "sentence_id": 233072
            },
            {
              "sentence_text": "Otherwise, the URL is assumed to refer to a JAR file which will be opened as needed.",
              "sentence_id": 348102
            }
          ],
          "method": [
            {
              "method_name": "java.net.URLClassLoader.definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "For sealed packages, the additional URL specifies the code source URL from which the package was loaded.",
                  "sentence_id": 383819
                },
                {
                  "sentence_text": "Defines a new package by name in this ClassLoader.",
                  "sentence_id": 246955
                },
                {
                  "sentence_text": "The attributes contained in the specified Manifest will be used to obtain package version and sealing information.",
                  "sentence_id": 383818
                }
              ],
              "method_id": 19606
            },
            {
              "method_name": "java.net.URLClassLoader.findClass(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Any URLs referring to JAR files are loaded and opened as needed until the class is found.",
                  "sentence_id": 383820
                },
                {
                  "sentence_text": "Finds and loads the class with the specified name from the URL search path.",
                  "sentence_id": 246956
                }
              ],
              "method_id": 19607
            },
            {
              "method_name": "java.net.URLClassLoader.close()",
              "method_sentence": [
                {
                  "sentence_text": "Also, any classes or resources that are already loaded, are still accessible.",
                  "sentence_id": 383812
                },
                {
                  "sentence_text": "Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader.",
                  "sentence_id": 246954
                },
                {
                  "sentence_text": "Classes and resources defined by any of this loader's parents in the delegation hierarchy are still accessible.",
                  "sentence_id": 383811
                }
              ],
              "method_id": 19605
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.BufferedImage",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/BufferedImage.html",
          "class_id": 772,
          "class_sentence": [
            {
              "sentence_text": "The BufferedImage subclass describes an Image with an accessible buffer of image data.",
              "sentence_id": 232637
            },
            {
              "sentence_text": "The number and types of bands in the SampleModel of the Raster must match the number and types required by the ColorModel to represent its color and alpha components.",
              "sentence_id": 345162
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.BufferedImage.getProperty(java.lang.String,java.awt.image.ImageObserver)",
              "method_sentence": [
                {
                  "sentence_text": "Individual property names are defined by the various image formats.",
                  "sentence_id": 374876
                },
                {
                  "sentence_text": "Returns a property of the image by name.",
                  "sentence_id": 241489
                },
                {
                  "sentence_text": "If a property is not defined for a particular image, this method returns the UndefinedProperty field.",
                  "sentence_id": 374877
                }
              ],
              "method_id": 14364
            },
            {
              "method_name": "java.awt.image.BufferedImage.getProperty(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a property of the image by name.",
                  "sentence_id": 241490
                }
              ],
              "method_id": 14365
            },
            {
              "method_name": "java.awt.image.BufferedImage.getType()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the image type.",
                  "sentence_id": 241505
                },
                {
                  "sentence_text": "If it is not one of the known types, TYPE_CUSTOM is returned.",
                  "sentence_id": 374897
                }
              ],
              "method_id": 14380
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.imageio.ImageIO",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/imageio/ImageIO.html",
          "class_id": 2276,
          "class_sentence": [
            {
              "sentence_text": "A class containing static convenience methods for locating ImageReaders and ImageWriters, and performing simple encoding and decoding.",
              "sentence_id": 234130
            }
          ],
          "method": [
            {
              "method_name": "javax.imageio.ImageIO.scanForPlugins()",
              "method_sentence": [
                {
                  "sentence_text": "The contents of the located files indicate the names of actual implementation classes which implement the aforementioned service provider interfaces; the default class loader is then used to load each of these classes and to instantiate an instance of each class, which is then placed into the registry for later retrieval.",
                  "sentence_id": 404008
                },
                {
                  "sentence_text": "This method is needed because the application class path can theoretically change, or additional plug-ins may become available.",
                  "sentence_id": 404003
                },
                {
                  "sentence_text": "Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the IIORegistry.",
                  "sentence_id": 258134
                }
              ],
              "method_id": 31140
            },
            {
              "method_name": "javax.imageio.ImageIO.getReaderFileSuffixes()",
              "method_sentence": [
                {
                  "sentence_text": "Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.",
                  "sentence_id": 258123
                }
              ],
              "method_id": 31129
            },
            {
              "method_name": "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "Writes an image using an arbitrary ImageWriter that supports the given format to a File.",
                  "sentence_id": 258138
                },
                {
                  "sentence_text": "If there is already a File present, its contents are discarded.",
                  "sentence_id": 404019
                }
              ],
              "method_id": 31144
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.text.html.ImageView",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/text/html/ImageView.html",
          "class_id": 3703,
          "class_sentence": [
            {
              "sentence_text": "If the image is unable to be loaded any text specified via the ALT attribute will be rendered.",
              "sentence_id": 365022
            },
            {
              "sentence_text": "View of an Image, intended to support the HTML <IMG> tag.",
              "sentence_id": 235507
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.text.html.ImageView.getLoadingImageIcon()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the icon to use while in the process of loading the image.",
                  "sentence_id": 272825
                }
              ],
              "method_id": 47873
            },
            {
              "method_name": "javax.swing.text.html.ImageView.setLoadsSynchronously(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Sets how the image is loaded.",
                  "sentence_id": 272833
                },
                {
                  "sentence_text": "The default is to not load synchronously, that is to load the image asynchronously.",
                  "sentence_id": 419347
                },
                {
                  "sentence_text": "If newValue is true, the image we be loaded when first asked for, otherwise it will be loaded asynchronously.",
                  "sentence_id": 419346
                }
              ],
              "method_id": 47881
            },
            {
              "method_name": "javax.swing.text.html.ImageView.getImageURL()",
              "method_sentence": [
                {
                  "sentence_text": "Return a URL for the image source, or null if it could not be determined.",
                  "sentence_id": 272824
                }
              ],
              "method_id": 47872
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Image",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Image.html",
          "class_id": 562,
          "class_sentence": [
            {
              "sentence_text": "The abstract class Image is the superclass of all classes that represent graphical images.",
              "sentence_id": 232412
            },
            {
              "sentence_text": "The image must be obtained in a platform-specific manner.",
              "sentence_id": 343908
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Image.flush()",
              "method_sentence": [
                {
                  "sentence_text": "Image objects created by the Toolkit and Component classes which are loaded from files, URLs or produced by an ImageProducer are unloaded and all local resources are released.",
                  "sentence_id": 371114
                },
                {
                  "sentence_text": "VolatileImage objects release all of their pixel resources including their primary copy which is typically stored on the display hardware where resources are scarce.",
                  "sentence_id": 371112
                },
                {
                  "sentence_text": "These objects can later be reloaded from their original source as needed when they are rendered, just as when they were first created.",
                  "sentence_id": 371115
                }
              ],
              "method_id": 10742
            },
            {
              "method_name": "java.awt.Image.getCapabilities(java.awt.GraphicsConfiguration)",
              "method_sentence": [
                {
                  "sentence_text": "This allows programmers to find out more runtime information on the specific Image object that they have created.",
                  "sentence_id": 371116
                },
                {
                  "sentence_text": "For example, the user might create a BufferedImage but the system may have no video memory left for creating an image of that size on the given GraphicsConfiguration, so although the object may be acceleratable in general, it does not have that capability on this GraphicsConfiguration.",
                  "sentence_id": 371117
                },
                {
                  "sentence_text": "Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration.",
                  "sentence_id": 238024
                }
              ],
              "method_id": 10744
            },
            {
              "method_name": "java.awt.Image.getProperty(java.lang.String,java.awt.image.ImageObserver)",
              "method_sentence": [
                {
                  "sentence_text": "If a property is not defined for a particular image, this method returns the UndefinedProperty object.",
                  "sentence_id": 371121
                },
                {
                  "sentence_text": "Individual property names are defined by the various image formats.",
                  "sentence_id": 371120
                },
                {
                  "sentence_text": "Gets a property of this image by name.",
                  "sentence_id": 238027
                }
              ],
              "method_id": 10747
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.File",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/File.html",
          "class_id": 922,
          "class_sentence": [
            {
              "sentence_text": "Interoperability with java.nio.file package The java.nio.file package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.",
              "sentence_id": 345993
            },
            {
              "sentence_text": "Instances of this class may or may not denote an actual file-system object such as a file or a directory.",
              "sentence_id": 345981
            }
          ],
          "method": [
            {
              "method_name": "java.io.File.canExecute()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable.",
                  "sentence_id": 377110
                },
                {
                  "sentence_text": "Consequently this method may return true even though the file does not have execute permissions.",
                  "sentence_id": 377111
                },
                {
                  "sentence_text": "Tests whether the application can execute the file denoted by this abstract pathname.",
                  "sentence_id": 243143
                }
              ],
              "method_id": 15930
            },
            {
              "method_name": "java.io.File.setExecutable(boolean,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable.",
                  "sentence_id": 377240
                },
                {
                  "sentence_text": "The Files class defines methods that operate on file attributes including file permissions.",
                  "sentence_id": 377241
                },
                {
                  "sentence_text": "This may be used when finer manipulation of file permissions is required.",
                  "sentence_id": 377242
                }
              ],
              "method_id": 15968
            },
            {
              "method_name": "java.io.File.setWritable(boolean,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "The Files class defines methods that operate on file attributes including file permissions.",
                  "sentence_id": 377257
                },
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that disallow write operations.",
                  "sentence_id": 377256
                },
                {
                  "sentence_text": "This may be used when finer manipulation of file permissions is required.",
                  "sentence_id": 377258
                }
              ],
              "method_id": 15974
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JLabel",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JLabel.html",
          "class_id": 3144,
          "class_sentence": [
            {
              "sentence_text": "The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing.",
              "sentence_id": 362424
            },
            {
              "sentence_text": "As of 1.4, support for long term storage of all JavaBeans™ has been added to the java.beans package.",
              "sentence_id": 362425
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JLabel.imageUpdate(java.awt.Image,int,int,int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.",
                  "sentence_id": 266290
                }
              ],
              "method_id": 39431
            },
            {
              "method_name": "javax.swing.JLabel.paramString()",
              "method_sentence": [
                {
                  "sentence_text": "This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations.",
                  "sentence_id": 413665
                },
                {
                  "sentence_text": "The returned string may be empty but may not be null.",
                  "sentence_id": 413666
                },
                {
                  "sentence_text": "Returns a string representation of this JLabel.",
                  "sentence_id": 266291
                }
              ],
              "method_id": 39432
            },
            {
              "method_name": "javax.swing.JLabel.getUIClassID()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a string that specifies the name of the l&f class that renders this component.",
                  "sentence_id": 266287
                }
              ],
              "method_id": 39428
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Java - Draw a ruler (line with tick marks at 90 degree angle)",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.awt.Graphics",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Graphics.html",
          "class_id": 552,
          "class_sentence": [
            {
              "sentence_text": "If you draw a horizontal line along the same y coordinate as the baseline of a line of text, that line is drawn entirely below the text, except for any descenders.",
              "sentence_id": 343715
            },
            {
              "sentence_text": "Operations that draw the outline of a figure operate by traversing an infinitely thin path between pixels with a pixel-sized pen that hangs down and to the right of the anchor point on the path.",
              "sentence_id": 343710
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Graphics.drawArc(int,int,int,int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "As a result, if the bounding rectangle is noticeably longer in one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the longer axis of the bounds.",
                  "sentence_id": 370643
                },
                {
                  "sentence_text": "The angles are specified relative to the non-square extents of the bounding rectangle such that 45 degrees always falls on the line from the center of the ellipse to the upper right corner of the bounding rectangle.",
                  "sentence_id": 370642
                },
                {
                  "sentence_text": "The resulting arc begins at startAngle and extends for arcAngle degrees, using the current color.",
                  "sentence_id": 370637
                }
              ],
              "method_id": 10496
            },
            {
              "method_name": "java.awt.Graphics.fillArc(int,int,int,int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "As a result, if the bounding rectangle is noticeably longer in one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the longer axis of the bounds.",
                  "sentence_id": 370712
                },
                {
                  "sentence_text": "The angles are specified relative to the non-square extents of the bounding rectangle such that 45 degrees always falls on the line from the center of the ellipse to the upper right corner of the bounding rectangle.",
                  "sentence_id": 370711
                },
                {
                  "sentence_text": "A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation.",
                  "sentence_id": 370708
                }
              ],
              "method_id": 10515
            },
            {
              "method_name": "java.awt.Graphics.drawOval(int,int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The result is a circle or ellipse that fits within the rectangle specified by the x, y, width, and height arguments.",
                  "sentence_id": 370690
                },
                {
                  "sentence_text": "The oval covers an area that is width + 1 pixels wide and height + 1 pixels tall.",
                  "sentence_id": 370691
                },
                {
                  "sentence_text": "Draws the outline of an oval.",
                  "sentence_id": 237787
                }
              ],
              "method_id": 10506
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JSlider",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JSlider.html",
          "class_id": 3164,
          "class_sentence": [
            {
              "sentence_text": "The number of values between the tick marks is controlled with setMajorTickSpacing and setMinorTickSpacing.",
              "sentence_id": 362799
            },
            {
              "sentence_text": "The slider can show both major tick marks, and minor tick marks between the major ones.",
              "sentence_id": 362798
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JSlider.getMinorTickSpacing()",
              "method_sentence": [
                {
                  "sentence_text": "The number that is returned represents the distance, measured in values, between each minor tick mark.",
                  "sentence_id": 414333
                },
                {
                  "sentence_text": "If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 40, 50.",
                  "sentence_id": 414334
                },
                {
                  "sentence_text": "This method returns the minor tick spacing.",
                  "sentence_id": 267014
                }
              ],
              "method_id": 40179
            },
            {
              "method_name": "javax.swing.JSlider.getMajorTickSpacing()",
              "method_sentence": [
                {
                  "sentence_text": "The number that is returned represents the distance, measured in values, between each major tick mark.",
                  "sentence_id": 414331
                },
                {
                  "sentence_text": "This method returns the major tick spacing.",
                  "sentence_id": 267011
                },
                {
                  "sentence_text": "If you have a slider with a range from 0 to 50 and the major tick spacing is set to 10, you will get major ticks next to the following values: 0, 10, 20, 30, 40, 50.",
                  "sentence_id": 414332
                }
              ],
              "method_id": 40176
            },
            {
              "method_name": "javax.swing.JSlider.setMinorTickSpacing(int)",
              "method_sentence": [
                {
                  "sentence_text": "The number that is passed in represents the distance, measured in values, between each minor tick mark.",
                  "sentence_id": 414376
                },
                {
                  "sentence_text": "If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 40, 50.",
                  "sentence_id": 414377
                },
                {
                  "sentence_text": "In order for minor ticks to be painted, setPaintTicks must be set to true.",
                  "sentence_id": 414378
                }
              ],
              "method_id": 40200
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Graphics2D",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Graphics2D.html",
          "class_id": 553,
          "class_sentence": [
            {
              "sentence_text": "Stroke A square pen with a linewidth of 1, no dashing, miter segment joins and square end caps.",
              "sentence_id": 343771
            },
            {
              "sentence_text": "It is not necessary to choose a bias direction for a wide pen since the blending that occurs along the pen traversal edges makes the sub-pixel position of the pen visible to the user.",
              "sentence_id": 343781
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Graphics2D.rotate(double)",
              "method_sentence": [
                {
                  "sentence_text": "Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
                  "sentence_id": 370815
                },
                {
                  "sentence_text": "Subsequent rendering is rotated by the specified radians relative to the previous origin.",
                  "sentence_id": 370813
                },
                {
                  "sentence_text": "Concatenates the current Graphics2D Transform with a rotation transform.",
                  "sentence_id": 237846
                }
              ],
              "method_id": 10565
            },
            {
              "method_name": "java.awt.Graphics2D.rotate(double,double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.",
                  "sentence_id": 370818
                },
                {
                  "sentence_text": "Subsequent rendering is transformed by a transform which is constructed by translating to the specified location, rotating by the specified radians, and translating back by the same amount as the original translation.",
                  "sentence_id": 370816
                },
                {
                  "sentence_text": "This is equivalent to the following sequence of calls: translate(x, y); rotate(theta); translate(-x, -y); .",
                  "sentence_id": 370817
                }
              ],
              "method_id": 10566
            },
            {
              "method_name": "java.awt.Graphics2D.draw3DRect(int,int,int,int,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "The resulting rectangle covers an area that is width + 1 pixels wide by height + 1 pixels tall.",
                  "sentence_id": 370766
                },
                {
                  "sentence_text": "The edges of the rectangle are highlighted so that they appear to be beveled and lit from the upper left corner.",
                  "sentence_id": 370764
                },
                {
                  "sentence_text": "Draws a 3-D highlighted outline of the specified rectangle.",
                  "sentence_id": 237824
                }
              ],
              "method_id": 10543
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.geom.AffineTransform",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/geom/AffineTransform.html",
          "class_id": 718,
          "class_sentence": [
            {
              "sentence_text": "This special handling can cause angles very close to multiples of 90 degrees to be treated as if they were exact multiples of 90 degrees.",
              "sentence_id": 345010
            },
            {
              "sentence_text": "For small multiples of 90 degrees the range of angles treated as a quadrant rotation is approximately 0.00000121 degrees wide.",
              "sentence_id": 345011
            }
          ],
          "method": [
            {
              "method_name": "java.awt.geom.AffineTransform.setToQuadrantRotation(int)",
              "method_sentence": [
                {
                  "sentence_text": "Rotating by a positive number of quadrants rotates points on the positive X axis toward the positive Y axis.",
                  "sentence_id": 373973
                },
                {
                  "sentence_text": "Sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants.",
                  "sentence_id": 240632
                },
                {
                  "sentence_text": "This operation is equivalent to calling: setToRotation(numquadrants * Math.PI / 2.0); .",
                  "sentence_id": 373972
                }
              ],
              "method_id": 13507
            },
            {
              "method_name": "java.awt.geom.AffineTransform.setToQuadrantRotation(int,double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Rotating by a positive number of quadrants rotates points on the positive X axis toward the positive Y axis.",
                  "sentence_id": 373975
                },
                {
                  "sentence_text": "Sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point.",
                  "sentence_id": 240633
                },
                {
                  "sentence_text": "This operation is equivalent to calling: setToRotation(numquadrants * Math.PI / 2.0, anchorx, anchory); .",
                  "sentence_id": 373974
                }
              ],
              "method_id": 13508
            },
            {
              "method_name": "java.awt.geom.AffineTransform.quadrantRotate(int)",
              "method_sentence": [
                {
                  "sentence_text": "Rotating by a positive number of quadrants rotates points on the positive X axis toward the positive Y axis.",
                  "sentence_id": 373953
                },
                {
                  "sentence_text": "Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants.",
                  "sentence_id": 240624
                },
                {
                  "sentence_text": "This is equivalent to calling: rotate(numquadrants * Math.PI / 2.0); .",
                  "sentence_id": 373952
                }
              ],
              "method_id": 13499
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Math",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
          "class_id": 1004,
          "class_sentence": [
            {
              "sentence_text": "Accuracy of the floating-point Math methods is measured in terms of ulps, units in the last place.",
              "sentence_id": 346398
            },
            {
              "sentence_text": "If a method always has an error less than 0.5 ulps, the method always returns the floating-point number nearest the exact result; such a method is correctly rounded.",
              "sentence_id": 346401
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Math.toRadians(double)",
              "method_sentence": [
                {
                  "sentence_text": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians.",
                  "sentence_id": 244700
                },
                {
                  "sentence_text": "The conversion from degrees to radians is generally inexact.",
                  "sentence_id": 379415
                }
              ],
              "method_id": 17372
            },
            {
              "method_name": "java.lang.Math.toDegrees(double)",
              "method_sentence": [
                {
                  "sentence_text": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees.",
                  "sentence_id": 244698
                },
                {
                  "sentence_text": "The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90.0)) to exactly equal 0.0.",
                  "sentence_id": 379414
                }
              ],
              "method_id": 17370
            },
            {
              "method_name": "java.lang.Math.atan(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2.",
                  "sentence_id": 244638
                },
                {
                  "sentence_text": "The computed result must be within 1 ulp of the exact result.",
                  "sentence_id": 379181
                },
                {
                  "sentence_text": "Results must be semi-monotonic.",
                  "sentence_id": 379182
                }
              ],
              "method_id": 17310
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.geom.Line2D",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/geom/Line2D.html",
          "class_id": 732,
          "class_sentence": [
            {
              "sentence_text": "This class, like all of the Java 2D API, uses a default coordinate system called user space in which the y-axis values increase downward and x-axis values increase to the right.",
              "sentence_id": 345056
            },
            {
              "sentence_text": "This Line2D represents a line segment in (x,y) coordinate space.",
              "sentence_id": 232597
            }
          ],
          "method": [
            {
              "method_name": "java.awt.geom.Line2D.ptLineDistSq(double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the square of the distance from a point to this line.",
                  "sentence_id": 240917
                },
                {
                  "sentence_text": "The distance measured is the distance between the specified point and the closest point on the infinitely-extended line defined by this Line2D.",
                  "sentence_id": 374194
                },
                {
                  "sentence_text": "If the specified point intersects the line, this method returns 0.0.",
                  "sentence_id": 374195
                }
              ],
              "method_id": 13792
            },
            {
              "method_name": "java.awt.geom.Line2D.ptLineDistSq(double,double,double,double,double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the square of the distance from a point to a line.",
                  "sentence_id": 240916
                },
                {
                  "sentence_text": "The distance measured is the distance between the specified point and the closest point on the infinitely-extended line defined by the specified coordinates.",
                  "sentence_id": 374192
                },
                {
                  "sentence_text": "If the specified point intersects the line, this method returns 0.0.",
                  "sentence_id": 374193
                }
              ],
              "method_id": 13791
            },
            {
              "method_name": "java.awt.geom.Line2D.ptLineDist(double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the distance from a point to this line.",
                  "sentence_id": 240914
                },
                {
                  "sentence_text": "The distance measured is the distance between the specified point and the closest point on the infinitely-extended line defined by this Line2D.",
                  "sentence_id": 374188
                },
                {
                  "sentence_text": "If the specified point intersects the line, this method returns 0.0.",
                  "sentence_id": 374189
                }
              ],
              "method_id": 13789
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.geom.Path2D",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/geom/Path2D.html",
          "class_id": 735,
          "class_sentence": [
            {
              "sentence_text": "While both classes nominally implement the Shape interface, they differ in purpose and together they provide two useful views of a geometric shape where Path2D deals primarily with a trajectory formed by path segments and Area deals more with interpretation and manipulation of enclosed regions of 2D geometric space.",
              "sentence_id": 345065
            },
            {
              "sentence_text": "If it is useful to manipulate the interiors of closed geometric shapes beyond simple hit testing then the Area class provides additional capabilities specifically targeted at closed figures.",
              "sentence_id": 345064
            }
          ],
          "method": [
            {
              "method_name": "java.awt.geom.Path2D.lineTo(double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.",
                  "sentence_id": 240986
                }
              ],
              "method_id": 13861
            },
            {
              "method_name": "java.awt.geom.Path2D.closePath()",
              "method_sentence": [
                {
                  "sentence_text": "Closes the current subpath by drawing a straight line back to the coordinates of the last moveTo.",
                  "sentence_id": 240967
                },
                {
                  "sentence_text": "If the path is already closed then this method has no effect.",
                  "sentence_id": 374236
                }
              ],
              "method_id": 13842
            },
            {
              "method_name": "java.awt.geom.Path2D.curveTo(double,double,double,double,double,double)",
              "method_sentence": [
                {
                  "sentence_text": "Adds a curved segment, defined by three new points, to the path by drawing a Bézier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as Bézier control points.",
                  "sentence_id": 240977
                },
                {
                  "sentence_text": "All coordinates are specified in double precision.",
                  "sentence_id": 374263
                }
              ],
              "method_id": 13852
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Polygon",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Polygon.html",
          "class_id": 592,
          "class_sentence": [
            {
              "sentence_text": "The first and final pairs of (x,y) points are joined by a line segment that closes the polygon.",
              "sentence_id": 344042
            },
            {
              "sentence_text": "Internally, a polygon comprises of a list of (x,y) coordinate pairs, where each pair defines a vertex of the polygon, and two successive pairs are the endpoints of a line that is a side of the polygon.",
              "sentence_id": 344041
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Polygon.getBounds()",
              "method_sentence": [
                {
                  "sentence_text": "The bounding box is the smallest Rectangle whose sides are parallel to the x and y axes of the coordinate space, and can completely contain the Polygon.",
                  "sentence_id": 371647
                },
                {
                  "sentence_text": "Gets the bounding box of this Polygon.",
                  "sentence_id": 238592
                }
              ],
              "method_id": 11319
            },
            {
              "method_name": "java.awt.Polygon.translate(int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Translates the vertices of the Polygon by deltaX along the x axis and by deltaY along the y axis.",
                  "sentence_id": 238601
                }
              ],
              "method_id": 11328
            },
            {
              "method_name": "java.awt.Polygon.reset()",
              "method_sentence": [
                {
                  "sentence_text": "The coordinate arrays and the data in them are left untouched but the number of points is reset to zero to mark the old vertex data as invalid and to start accumulating new vertex data at the beginning.",
                  "sentence_id": 371666
                },
                {
                  "sentence_text": "Resets this Polygon object to an empty polygon.",
                  "sentence_id": 238600
                },
                {
                  "sentence_text": "Note that since the coordinate arrays from before the reset are reused, creating a new empty Polygon might be more memory efficient than resetting the current one if the number of vertices in the new polygon data is significantly smaller than the number of vertices in the data from before the reset.",
                  "sentence_id": 371668
                }
              ],
              "method_id": 11327
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.geom.Arc2D",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/geom/Arc2D.html",
          "class_id": 719,
          "class_sentence": [
            {
              "sentence_text": "The angles are specified relative to the non-square framing rectangle such that 45 degrees always falls on the line from the center of the ellipse to the upper right corner of the framing rectangle.",
              "sentence_id": 345025
            },
            {
              "sentence_text": "As a result, if the framing rectangle is noticeably longer along one axis than the other, the angles to the start and end of the arc segment will be skewed farther along the longer axis of the frame.",
              "sentence_id": 345026
            }
          ],
          "method": [
            {
              "method_name": "java.awt.geom.Arc2D.getAngleStart()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the starting angle of the arc.",
                  "sentence_id": 240663
                }
              ],
              "method_id": 13538
            },
            {
              "method_name": "java.awt.geom.Arc2D.containsAngle(double)",
              "method_sentence": [
                {
                  "sentence_text": "Determines whether or not the specified angle is within the angular extents of the arc.",
                  "sentence_id": 240660
                }
              ],
              "method_id": 13535
            },
            {
              "method_name": "java.awt.geom.Arc2D.setAngleStart(java.awt.geom.Point2D)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc.",
                  "sentence_id": 240676
                },
                {
                  "sentence_text": "The angular extent of the arc will remain the same.",
                  "sentence_id": 374029
                }
              ],
              "method_id": 13551
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.image.AffineTransformOp",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/image/AffineTransformOp.html",
          "class_id": 768,
          "class_sentence": [
            {
              "sentence_text": "The color rendering hint and the dithering hint can be used when color conversion is required.",
              "sentence_id": 345136
            },
            {
              "sentence_text": "This class uses an affine transform to perform a linear mapping from 2D coordinates in the source image or Raster to 2D coordinates in the destination image or Raster.",
              "sentence_id": 232633
            }
          ],
          "method": [
            {
              "method_name": "java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.Raster)",
              "method_sentence": [
                {
                  "sentence_text": "The rectangle returned will be the actual bounding box of the transformed points.",
                  "sentence_id": 374747
                },
                {
                  "sentence_text": "The coordinates of the upper-left corner of the returned rectangle might not be (0, 0).",
                  "sentence_id": 374748
                },
                {
                  "sentence_text": "Returns the bounding box of the transformed destination.",
                  "sentence_id": 241419
                }
              ],
              "method_id": 14294
            },
            {
              "method_name": "java.awt.image.AffineTransformOp.getBounds2D(java.awt.image.BufferedImage)",
              "method_sentence": [
                {
                  "sentence_text": "The coordinates of the upper-left corner of the returned rectangle might not be (0, 0).",
                  "sentence_id": 374746
                },
                {
                  "sentence_text": "The rectangle returned is the actual bounding box of the transformed points.",
                  "sentence_id": 374745
                },
                {
                  "sentence_text": "Returns the bounding box of the transformed destination.",
                  "sentence_id": 241418
                }
              ],
              "method_id": 14293
            },
            {
              "method_name": "java.awt.image.AffineTransformOp.createCompatibleDestRaster(java.awt.image.Raster)",
              "method_sentence": [
                {
                  "sentence_text": "A RasterFormatException may be thrown if the transformed width or height is equal to 0.",
                  "sentence_id": 374732
                },
                {
                  "sentence_text": "Creates a zeroed destination Raster with the correct size and number of bands.",
                  "sentence_id": 241415
                }
              ],
              "method_id": 14290
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How to make a symlink in Java when running in Linux?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.nio.file.Files",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html",
          "class_id": 1342,
          "class_sentence": [
            {
              "sentence_text": "This class consists exclusively of static methods that operate on files, directories, or other types of files.",
              "sentence_id": 233196
            },
            {
              "sentence_text": "In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.",
              "sentence_id": 348976
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.Files.deleteIfExists(java.nio.file.Path)",
              "method_sentence": [
                {
                  "sentence_text": "On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.",
                  "sentence_id": 385747
                },
                {
                  "sentence_text": "In such implementations a directory is considered empty when only the special entries exist.",
                  "sentence_id": 385746
                },
                {
                  "sentence_text": "In some implementations a directory has entries for special files or links that are created when the directory is created.",
                  "sentence_id": 385745
                }
              ],
              "method_id": 20478
            },
            {
              "method_name": "java.nio.file.Files.isExecutable(java.nio.file.Path)",
              "method_sentence": [
                {
                  "sentence_text": "This method checks that a file exists and that this Java virtual machine has appropriate privileges to execute the file.",
                  "sentence_id": 385796
                },
                {
                  "sentence_text": "For example, on UNIX systems, checking for execute access checks that the Java virtual machine has permission to search the directory in order to access file or subdirectories.",
                  "sentence_id": 385798
                },
                {
                  "sentence_text": "Tests whether a file is executable.",
                  "sentence_id": 247835
                }
              ],
              "method_id": 20488
            },
            {
              "method_name": "java.nio.file.Files.setPosixFilePermissions(java.nio.file.Path,java.util.Set<java.nio.file.attribute.PosixFilePermission>)",
              "method_sentence": [
                {
                  "sentence_text": "This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.",
                  "sentence_id": 386018
                },
                {
                  "sentence_text": "Sets a file's POSIX permissions.",
                  "sentence_id": 247868
                },
                {
                  "sentence_text": "The path parameter is associated with a FileSystem that supports the PosixFileAttributeView.",
                  "sentence_id": 386017
                }
              ],
              "method_id": 20521
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.ProcessBuilder",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html",
          "class_id": 1009,
          "class_sentence": [
            {
              "sentence_text": "Which string lists represent a valid operating system command is system-dependent.",
              "sentence_id": 346452
            },
            {
              "sentence_text": "This class is used to create operating system processes.",
              "sentence_id": 232863
            }
          ],
          "method": [
            {
              "method_name": "java.lang.ProcessBuilder.start()",
              "method_sentence": [
                {
                  "sentence_text": "Starting an operating system process is highly system-dependent.",
                  "sentence_id": 379657
                },
                {
                  "sentence_text": "A minimal set of system dependent environment variables may be required to start a process on some operating systems.",
                  "sentence_id": 379653
                },
                {
                  "sentence_text": "This method checks that the command is a valid operating system command.",
                  "sentence_id": 379651
                }
              ],
              "method_id": 17445
            },
            {
              "method_name": "java.lang.ProcessBuilder.inheritIO()",
              "method_sentence": [
                {
                  "sentence_text": "Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process.",
                  "sentence_id": 244758
                },
                {
                  "sentence_text": "An invocation of the form pb.inheritIO() behaves in exactly the same way as the invocation pb.redirectInput(Redirect.INHERIT) .redirectOutput(Redirect.INHERIT) .redirectError(Redirect.INHERIT) This gives behavior equivalent to most operating system command interpreters, or the standard C library function system().",
                  "sentence_id": 379621
                },
                {
                  "sentence_text": "This is a convenience method.",
                  "sentence_id": 379620
                }
              ],
              "method_id": 17433
            },
            {
              "method_name": "java.lang.ProcessBuilder.environment()",
              "method_sentence": [
                {
                  "sentence_text": "Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess.",
                  "sentence_id": 379613
                },
                {
                  "sentence_text": "When passing information to a Java subprocess, system properties are generally preferred over environment variables.",
                  "sentence_id": 379619
                },
                {
                  "sentence_text": "Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java's Unicode strings.",
                  "sentence_id": 379612
                }
              ],
              "method_id": 17432
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.FileVisitor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileVisitor.html",
          "class_id": 1331,
          "class_sentence": [
            {
              "sentence_text": "An implementation of this interface is provided to the Files.walkFileTree methods to visit each file in a file tree.",
              "sentence_id": 348886
            },
            {
              "sentence_text": "Usage Examples: Suppose we want to delete a file tree.",
              "sentence_id": 348887
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.FileVisitor.visitFileFailed(java.nio.file.FileVisitor,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.",
                  "sentence_id": 385467
                },
                {
                  "sentence_text": "Invoked for a file that could not be visited.",
                  "sentence_id": 247757
                }
              ],
              "method_id": 20410
            },
            {
              "method_name": "java.nio.file.FileVisitor.visitFileFailed(T,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.",
                  "sentence_id": 516915
                },
                {
                  "sentence_text": "Invoked for a file that could not be visited.",
                  "sentence_id": 309391
                }
              ],
              "method_id": 83080
            },
            {
              "method_name": "java.nio.file.FileVisitor.preVisitDirectory(java.nio.file.FileVisitor,java.nio.file.attribute.BasicFileAttributes)",
              "method_sentence": [
                {
                  "sentence_text": "If this method returns CONTINUE, then entries in the directory are visited.",
                  "sentence_id": 385465
                },
                {
                  "sentence_text": "Invoked for a directory before entries in the directory are visited.",
                  "sentence_id": 247755
                },
                {
                  "sentence_text": "If this method returns SKIP_SUBTREE or SKIP_SIBLINGS then entries in the directory (and any descendants) will not be visited.",
                  "sentence_id": 385466
                }
              ],
              "method_id": 20408
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Runtime",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html",
          "class_id": 1011,
          "class_sentence": [
            {
              "sentence_text": "Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running.",
              "sentence_id": 232865
            },
            {
              "sentence_text": "The current runtime can be obtained from the getRuntime method.",
              "sentence_id": 346476
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Runtime.availableProcessors()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the number of processors available to the Java virtual machine.",
                  "sentence_id": 244781
                },
                {
                  "sentence_text": "This value may change during a particular invocation of the virtual machine.",
                  "sentence_id": 379698
                },
                {
                  "sentence_text": "Applications that are sensitive to the number of available processors should therefore occasionally poll this property and adjust their resource usage appropriately.",
                  "sentence_id": 379699
                }
              ],
              "method_id": 17457
            },
            {
              "method_name": "java.lang.Runtime.freeMemory()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the amount of free memory in the Java Virtual Machine.",
                  "sentence_id": 244789
                },
                {
                  "sentence_text": "Calling the gc method may result in increasing the value returned by freeMemory.",
                  "sentence_id": 379738
                }
              ],
              "method_id": 17465
            },
            {
              "method_name": "java.lang.Runtime.exec(java.lang.String,java.lang.String,java.io.File)",
              "method_sentence": [
                {
                  "sentence_text": "Starting an operating system process is highly system-dependent.",
                  "sentence_id": 516562
                },
                {
                  "sentence_text": "A minimal set of system dependent environment variables may be required to start a process on some operating systems.",
                  "sentence_id": 516555
                },
                {
                  "sentence_text": "This method checks that cmdarray is a valid operating system command.",
                  "sentence_id": 516552
                }
              ],
              "method_id": 83010
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.File",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/File.html",
          "class_id": 922,
          "class_sentence": [
            {
              "sentence_text": "This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked.",
              "sentence_id": 345971
            },
            {
              "sentence_text": "Interoperability with java.nio.file package The java.nio.file package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems.",
              "sentence_id": 345993
            }
          ],
          "method": [
            {
              "method_name": "java.io.File.canExecute()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable.",
                  "sentence_id": 377110
                },
                {
                  "sentence_text": "Tests whether the application can execute the file denoted by this abstract pathname.",
                  "sentence_id": 243143
                },
                {
                  "sentence_text": "Consequently this method may return true even though the file does not have execute permissions.",
                  "sentence_id": 377111
                }
              ],
              "method_id": 15930
            },
            {
              "method_name": "java.io.File.canRead()",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to read files that are marked as unreadable.",
                  "sentence_id": 377112
                },
                {
                  "sentence_text": "Tests whether the application can read the file denoted by this abstract pathname.",
                  "sentence_id": 243144
                },
                {
                  "sentence_text": "Consequently this method may return true even though the file does not have read permissions.",
                  "sentence_id": 377113
                }
              ],
              "method_id": 15931
            },
            {
              "method_name": "java.io.File.setExecutable(boolean,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable.",
                  "sentence_id": 377240
                },
                {
                  "sentence_text": "Sets the owner's or everybody's execute permission for this abstract pathname.",
                  "sentence_id": 243181
                },
                {
                  "sentence_text": "The Files class defines methods that operate on file attributes including file permissions.",
                  "sentence_id": 377241
                }
              ],
              "method_id": 15968
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.spi.FileSystemProvider",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/spi/FileSystemProvider.html",
          "class_id": 1400,
          "class_sentence": [
            {
              "sentence_text": "It creates the FileSystem that provides access to the file systems accessible to the Java virtual machine.",
              "sentence_id": 349138
            },
            {
              "sentence_text": "The newFileSystem method may be used to create a file system, and the getFileSystem method may be used to obtain a reference to an existing file system created by the provider.",
              "sentence_id": 349147
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode...)",
              "method_sentence": [
                {
                  "sentence_text": "WRITE Checks that the file exists and that the Java virtual machine has permission to write to the file, EXECUTE Checks that the file exists and that the Java virtual machine has permission to execute the file.",
                  "sentence_id": 386445
                },
                {
                  "sentence_text": "For example, on UNIX systems, checking for EXECUTE access checks that the Java virtual machine has permission to search the directory in order to access file or subdirectories.",
                  "sentence_id": 386447
                },
                {
                  "sentence_text": "This method checks the existence of a file and that this Java virtual machine has appropriate privileges that would allow it access the file according to all of access modes specified in the modes parameter as follows: Value Description READ Checks that the file exists and that the Java virtual machine has permission to read the file.",
                  "sentence_id": 386444
                }
              ],
              "method_id": 20765
            },
            {
              "method_name": "java.nio.file.spi.FileSystemProvider.checkAccess(java.nio.file.Path,java.nio.file.AccessMode)",
              "method_sentence": [
                {
                  "sentence_text": "For example, on UNIX systems, checking for EXECUTE access checks that the Java virtual machine has permission to search the directory in order to access file or subdirectories.",
                  "sentence_id": 517353
                },
                {
                  "sentence_text": "WRITE Checks that the file exists and that the Java virtual machine has permission to write to the file, EXECUTE Checks that the file exists and that the Java virtual machine has permission to execute the file.",
                  "sentence_id": 517351
                },
                {
                  "sentence_text": "This method checks the existence of a file and that this Java virtual machine has appropriate privileges that would allow it access the file according to all of access modes specified in the modes parameter as follows: Value Description READ Checks that the file exists and that the Java virtual machine has permission to read the file.",
                  "sentence_id": 517350
                }
              ],
              "method_id": 83135
            },
            {
              "method_name": "java.nio.file.spi.FileSystemProvider.getFileSystem(java.net.URI)",
              "method_sentence": [
                {
                  "sentence_text": "If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system.",
                  "sentence_id": 386471
                },
                {
                  "sentence_text": "Returns an existing FileSystem created by this provider.",
                  "sentence_id": 248121
                },
                {
                  "sentence_text": "In the case of the default file system, no permission check is required.",
                  "sentence_id": 386472
                }
              ],
              "method_id": 20774
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.Path",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html",
          "class_id": 1333,
          "class_sentence": [
            {
              "sentence_text": "WARNING: This interface is only intended to be implemented by those developing custom file system implementations.",
              "sentence_id": 348908
            },
            {
              "sentence_text": "Accessing Files Paths may be used with the Files class to operate on files, directories, and other types of files.",
              "sentence_id": 348910
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.Path.getFileSystem()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the file system that created this object.",
                  "sentence_id": 247763
                }
              ],
              "method_id": 20416
            },
            {
              "method_name": "java.nio.file.Path.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>,java.nio.file.WatchEvent.Modifier)",
              "method_sentence": [
                {
                  "sentence_text": "In this release, this path locates a directory that exists.",
                  "sentence_id": 516919
                },
                {
                  "sentence_text": "This release does not define any standard modifiers.",
                  "sentence_id": 516923
                },
                {
                  "sentence_text": "Where a file is registered with a watch service by means of a symbolic link then it is implementation specific if the watch continues to depend on the existence of the symbolic link after it is registered.",
                  "sentence_id": 516925
                }
              ],
              "method_id": 83082
            },
            {
              "method_name": "java.nio.file.Path.compareTo(java.nio.file.Path)",
              "method_sentence": [
                {
                  "sentence_text": "This method does not access the file system and neither file is required to exist.",
                  "sentence_id": 385469
                },
                {
                  "sentence_text": "This method may not be used to compare paths that are associated with different file system providers.",
                  "sentence_id": 385470
                },
                {
                  "sentence_text": "The ordering defined by this method is provider specific, and in the case of the default provider, platform specific.",
                  "sentence_id": 385468
                }
              ],
              "method_id": 20411
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.SimpleFileVisitor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/SimpleFileVisitor.html",
          "class_id": 1348,
          "class_sentence": [
            {
              "sentence_text": "A simple visitor of files with default behavior to visit all files and to re-throw I/O errors.",
              "sentence_id": 233202
            },
            {
              "sentence_text": "Methods in this class may be overridden subject to their general contract.",
              "sentence_id": 349028
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.SimpleFileVisitor.postVisitDirectory(java.nio.file.SimpleFileVisitor,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "Unless overridden, this method returns CONTINUE if the directory iteration completes without an I/O exception; otherwise this method re-throws the I/O exception that caused the iteration of the directory to terminate prematurely.",
                  "sentence_id": 386257
                },
                {
                  "sentence_text": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited.",
                  "sentence_id": 247911
                }
              ],
              "method_id": 20564
            },
            {
              "method_name": "java.nio.file.SimpleFileVisitor.postVisitDirectory(T,java.io.IOException)",
              "method_sentence": [
                {
                  "sentence_text": "Unless overridden, this method returns CONTINUE if the directory iteration completes without an I/O exception; otherwise this method re-throws the I/O exception that caused the iteration of the directory to terminate prematurely.",
                  "sentence_id": 517337
                },
                {
                  "sentence_text": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited.",
                  "sentence_id": 309440
                }
              ],
              "method_id": 83129
            },
            {
              "method_name": "java.nio.file.SimpleFileVisitor.preVisitDirectory(java.nio.file.SimpleFileVisitor,java.nio.file.attribute.BasicFileAttributes)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked for a directory before entries in the directory are visited.",
                  "sentence_id": 247912
                },
                {
                  "sentence_text": "Unless overridden, this method returns CONTINUE.",
                  "sentence_id": 386258
                }
              ],
              "method_id": 20565
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Process",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html",
          "class_id": 1008,
          "class_sentence": [
            {
              "sentence_text": "The methods that create processes may not work well for special processes on certain native platforms, such as native windowing processes, daemon processes, Win16/DOS processes on Microsoft Windows, or shell scripts.",
              "sentence_id": 346438
            },
            {
              "sentence_text": "By default, the created subprocess does not have its own terminal or console.",
              "sentence_id": 346439
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Process.destroy()",
              "method_sentence": [
                {
                  "sentence_text": "Whether the subprocess represented by this Process object is forcibly terminated or not is implementation dependent.",
                  "sentence_id": 379559
                },
                {
                  "sentence_text": "Kills the subprocess.",
                  "sentence_id": 244741
                }
              ],
              "method_id": 17416
            },
            {
              "method_name": "java.lang.Process.isAlive()",
              "method_sentence": [
                {
                  "sentence_text": "Tests whether the subprocess represented by this Process is alive.",
                  "sentence_id": 244747
                }
              ],
              "method_id": 17422
            },
            {
              "method_name": "java.lang.Process.waitFor()",
              "method_sentence": [
                {
                  "sentence_text": "If the subprocess has not yet terminated, the calling thread will be blocked until the subprocess exits.",
                  "sentence_id": 379579
                },
                {
                  "sentence_text": "This method returns immediately if the subprocess has already terminated.",
                  "sentence_id": 379578
                },
                {
                  "sentence_text": "Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated.",
                  "sentence_id": 244748
                }
              ],
              "method_id": 17423
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.nio.file.FileSystem",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html",
          "class_id": 1344,
          "class_sentence": [
            {
              "sentence_text": "The default file system, obtained by invoking the FileSystems.getDefault method, provides access to the file system that is accessible to the Java virtual machine.",
              "sentence_id": 348980
            },
            {
              "sentence_text": "A FileSystem can provide read-only or read-write access to the file system.",
              "sentence_id": 348996
            }
          ],
          "method": [
            {
              "method_name": "java.nio.file.FileSystem.getRootDirectories()",
              "method_sentence": [
                {
                  "sentence_text": "The file hierarchies may change during the lifetime of the Java virtual machine.",
                  "sentence_id": 386185
                },
                {
                  "sentence_text": "When a security manager is installed, it is invoked to check access to the each root directory.",
                  "sentence_id": 386187
                },
                {
                  "sentence_text": "In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check read access to each root directory.",
                  "sentence_id": 386189
                }
              ],
              "method_id": 20546
            },
            {
              "method_name": "java.nio.file.FileSystem.isOpen()",
              "method_sentence": [
                {
                  "sentence_text": "File systems created by the default provider are always open.",
                  "sentence_id": 386197
                },
                {
                  "sentence_text": "Tells whether or not this file system is open.",
                  "sentence_id": 247896
                }
              ],
              "method_id": 20549
            },
            {
              "method_name": "java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "In the case of the default provider, path strings are parsed based on the definition of paths at the platform or virtual file system level.",
                  "sentence_id": 517312
                },
                {
                  "sentence_text": "For example, on UNIX systems, the NUL (\\u0000) character is not allowed to be present in a path.",
                  "sentence_id": 517310
                },
                {
                  "sentence_text": "For example, an operating system may not allow specific characters to be present in a file name, but a specific underlying file store may impose different or additional restrictions on the set of legal characters.",
                  "sentence_id": 517313
                }
              ],
              "method_id": 83125
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Stop a Runnable submitted to ExecutorService",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.util.concurrent.ExecutorService",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html",
          "class_id": 1955,
          "class_sentence": [
            {
              "sentence_text": "Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted.",
              "sentence_id": 354039
            },
            {
              "sentence_text": "An ExecutorService can be shut down, which will cause it to reject new tasks.",
              "sentence_id": 354036
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ExecutorService.submit(java.lang.Runnable)",
              "method_sentence": [
                {
                  "sentence_text": "Submits a Runnable task for execution and returns a Future representing that task.",
                  "sentence_id": 254872
                },
                {
                  "sentence_text": "The Future's get method will return null upon successful completion.",
                  "sentence_id": 400055
                }
              ],
              "method_id": 27540
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.submit(java.lang.Runnable,T)",
              "method_sentence": [
                {
                  "sentence_text": "Submits a Runnable task for execution and returns a Future representing that task.",
                  "sentence_id": 254871
                },
                {
                  "sentence_text": "The Future's get method will return the given result upon successful completion.",
                  "sentence_id": 400054
                }
              ],
              "method_id": 27539
            },
            {
              "method_name": "java.util.concurrent.ExecutorService.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 254868
                },
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400046
                },
                {
                  "sentence_text": "Use awaitTermination to do that.",
                  "sentence_id": 400047
                }
              ],
              "method_id": 27536
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html",
          "class_id": 1999,
          "class_sentence": [
            {
              "sentence_text": "In ThreadPoolExecutor.DiscardOldestPolicy, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.)",
              "sentence_id": 354661
            },
            {
              "sentence_text": "If a ThreadFactory fails to create a thread when asked by returning null from newThread, the executor will continue, but might not be able to execute any tasks.",
              "sentence_id": 354624
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 255729
                },
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400907
                },
                {
                  "sentence_text": "Use awaitTermination to do that.",
                  "sentence_id": 400908
                }
              ],
              "method_id": 28401
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)",
              "method_sentence": [
                {
                  "sentence_text": "If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current RejectedExecutionHandler.",
                  "sentence_id": 400880
                },
                {
                  "sentence_text": "Executes the given task sometime in the future.",
                  "sentence_id": 255704
                },
                {
                  "sentence_text": "The task may execute in a new thread or in an existing pooled thread.",
                  "sentence_id": 400879
                }
              ],
              "method_id": 28376
            },
            {
              "method_name": "java.util.concurrent.ThreadPoolExecutor.shutdownNow()",
              "method_sentence": [
                {
                  "sentence_text": "This method does not wait for actively executing tasks to terminate.",
                  "sentence_id": 400910
                },
                {
                  "sentence_text": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
                  "sentence_id": 255730
                },
                {
                  "sentence_text": "This implementation cancels tasks via Thread.interrupt(), so any task that fails to respond to interrupts may never terminate.",
                  "sentence_id": 400913
                }
              ],
              "method_id": 28402
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.AbstractExecutorService",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html",
          "class_id": 1966,
          "class_sentence": [
            {
              "sentence_text": "This class implements the submit, invokeAny and invokeAll methods using a RunnableFuture returned by newTaskFor, which defaults to the FutureTask class provided in this package.",
              "sentence_id": 354088
            },
            {
              "sentence_text": "For example, the implementation of submit(Runnable) creates an associated RunnableFuture that is executed and returned.",
              "sentence_id": 354089
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.AbstractExecutorService.newTaskFor(java.lang.Runnable,T)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a RunnableFuture for the given runnable and default value.",
                  "sentence_id": 254898
                }
              ],
              "method_id": 27567
            },
            {
              "method_name": "java.util.concurrent.AbstractExecutorService.newTaskFor(java.util.concurrent.Callable<T>)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a RunnableFuture for the given callable task.",
                  "sentence_id": 254899
                }
              ],
              "method_id": 27568
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.CompletableFuture",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html",
          "class_id": 1968,
          "class_sentence": [
            {
              "sentence_text": "When two or more threads attempt to complete, completeExceptionally, or cancel a CompletableFuture, only one of them succeeds.",
              "sentence_id": 354106
            },
            {
              "sentence_text": "All async methods without an explicit Executor argument are performed using the ForkJoinPool.commonPool() (unless it does not support a parallelism level of at least two, in which case, a new Thread is created to run each task).",
              "sentence_id": 354108
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable,java.util.concurrent.Executor)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.",
                  "sentence_id": 254960
                }
              ],
              "method_id": 27629
            },
            {
              "method_name": "java.util.concurrent.CompletableFuture.runAsync(java.lang.Runnable)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after it runs the given action.",
                  "sentence_id": 254959
                }
              ],
              "method_id": 27628
            },
            {
              "method_name": "java.util.concurrent.CompletableFuture.supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.",
                  "sentence_id": 254962
                }
              ],
              "method_id": 27631
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.Timer",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/Timer.html",
          "class_id": 3216,
          "class_sentence": [
            {
              "sentence_text": "Although all Timers perform their waiting using a single, shared thread (created by the first Timer object that executes), the action event handlers for Timers execute on another thread -- the event-dispatching thread.",
              "sentence_id": 363406
            },
            {
              "sentence_text": "Once the timer has been started, it waits for the initial delay before firing its first ActionEvent to registered listeners.",
              "sentence_id": 363402
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.Timer.restart()",
              "method_sentence": [
                {
                  "sentence_text": "Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay.",
                  "sentence_id": 268244
                }
              ],
              "method_id": 41435
            },
            {
              "method_name": "javax.swing.Timer.stop()",
              "method_sentence": [
                {
                  "sentence_text": "Stops the Timer, causing it to stop sending action events to its listeners.",
                  "sentence_id": 268252
                }
              ],
              "method_id": 41443
            },
            {
              "method_name": "javax.swing.Timer.start()",
              "method_sentence": [
                {
                  "sentence_text": "Starts the Timer, causing it to start sending action events to its listeners.",
                  "sentence_id": 268251
                }
              ],
              "method_id": 41442
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.Future",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html",
          "class_id": 1958,
          "class_sentence": [
            {
              "sentence_text": "Cancellation is performed by the cancel method.",
              "sentence_id": 354058
            },
            {
              "sentence_text": "Additional methods are provided to determine if the task completed normally or was cancelled.",
              "sentence_id": 354059
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.Future.cancel(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "If successful, and this task has not started when cancel is called, this task should never run.",
                  "sentence_id": 400057
                },
                {
                  "sentence_text": "If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.",
                  "sentence_id": 400058
                },
                {
                  "sentence_text": "Attempts to cancel execution of this task.",
                  "sentence_id": 254876
                }
              ],
              "method_id": 27544
            },
            {
              "method_name": "java.util.concurrent.Future.isCancelled()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if this task was cancelled before it completed normally.",
                  "sentence_id": 254879
                }
              ],
              "method_id": 27547
            },
            {
              "method_name": "java.util.concurrent.Future.isDone()",
              "method_sentence": [
                {
                  "sentence_text": "Returns true if this task completed.",
                  "sentence_id": 254880
                },
                {
                  "sentence_text": "Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true.",
                  "sentence_id": 400061
                }
              ],
              "method_id": 27548
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Runnable",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html",
          "class_id": 987,
          "class_sentence": [
            {
              "sentence_text": "In most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods.",
              "sentence_id": 346295
            },
            {
              "sentence_text": "The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread.",
              "sentence_id": 232841
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Runnable.run()",
              "method_sentence": [
                {
                  "sentence_text": "When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread.",
                  "sentence_id": 243809
                },
                {
                  "sentence_text": "The general contract of the method run is that it may take any action whatsoever.",
                  "sentence_id": 378056
                }
              ],
              "method_id": 16560
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Thread",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html",
          "class_id": 1021,
          "class_sentence": [
            {
              "sentence_text": "All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method.",
              "sentence_id": 346666
            },
            {
              "sentence_text": "When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon.",
              "sentence_id": 346663
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Thread.run()",
              "method_sentence": [
                {
                  "sentence_text": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns.",
                  "sentence_id": 245236
                },
                {
                  "sentence_text": "Subclasses of Thread should override this method.",
                  "sentence_id": 380866
                }
              ],
              "method_id": 17892
            },
            {
              "method_name": "java.lang.Thread.start()",
              "method_sentence": [
                {
                  "sentence_text": "In particular, a thread may not be restarted once it has completed execution.",
                  "sentence_id": 380886
                },
                {
                  "sentence_text": "The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).",
                  "sentence_id": 380884
                },
                {
                  "sentence_text": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.",
                  "sentence_id": 245245
                }
              ],
              "method_id": 17901
            },
            {
              "method_name": "java.lang.Thread.stop()",
              "method_sentence": [
                {
                  "sentence_text": "If the target thread waits for long periods (on a condition variable, for example), the interrupt method should be used to interrupt the wait.",
                  "sentence_id": 380892
                },
                {
                  "sentence_text": "The target thread should check this variable regularly, and return from its run method in an orderly fashion if the variable indicates that it is to stop running.",
                  "sentence_id": 380891
                },
                {
                  "sentence_text": "Many uses of stop should be replaced by code that simply modifies some variable to indicate that the target thread should stop running.",
                  "sentence_id": 380890
                }
              ],
              "method_id": 17902
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.SwingWorker",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html",
          "class_id": 3215,
          "class_sentence": [
            {
              "sentence_text": "After the doInBackground method is finished the done method is executed.",
              "sentence_id": 363382
            },
            {
              "sentence_text": "It schedules SwingWorker for the execution on a worker thread and returns immediately.",
              "sentence_id": 363372
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.SwingWorker.cancel(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "If successful, and this task has not started when cancel is called, this task should never run.",
                  "sentence_id": 415739
                },
                {
                  "sentence_text": "If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.",
                  "sentence_id": 415740
                },
                {
                  "sentence_text": "Attempts to cancel execution of this task.",
                  "sentence_id": 268214
                }
              ],
              "method_id": 41404
            },
            {
              "method_name": "javax.swing.SwingWorker.done()",
              "method_sentence": [
                {
                  "sentence_text": "Executed on the Event Dispatch Thread after the doInBackground method is finished.",
                  "sentence_id": 268216
                },
                {
                  "sentence_text": "Note that you can query status inside the implementation of this method to determine the result of this task or whether this task has been cancelled.",
                  "sentence_id": 415747
                },
                {
                  "sentence_text": "Subclasses may override this method to perform completion actions on the Event Dispatch Thread.",
                  "sentence_id": 415746
                }
              ],
              "method_id": 41406
            },
            {
              "method_name": "javax.swing.SwingWorker.execute()",
              "method_sentence": [
                {
                  "sentence_text": "In the event all worker threads are busy handling other SwingWorkers this SwingWorker is placed in a waiting queue.",
                  "sentence_id": 415749
                },
                {
                  "sentence_text": "Schedules this SwingWorker for execution on a worker thread.",
                  "sentence_id": 268217
                },
                {
                  "sentence_text": "Note: SwingWorker is only designed to be executed once.",
                  "sentence_id": 415750
                }
              ],
              "method_id": 41407
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.concurrent.ScheduledThreadPoolExecutor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html",
          "class_id": 1995,
          "class_sentence": [
            {
              "sentence_text": "When a submitted task is cancelled before it is run, execution is suppressed.",
              "sentence_id": 354549
            },
            {
              "sentence_text": "However, this class provides alternative protected extension method decorateTask (one version each for Runnable and Callable) that can be used to customize the concrete task types used to execute commands entered via execute, submit, schedule, scheduleAtFixedRate, and scheduleWithFixedDelay.",
              "sentence_id": 354560
            }
          ],
          "method": [
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
              "method_sentence": [
                {
                  "sentence_text": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.",
                  "sentence_id": 255619
                },
                {
                  "sentence_text": "This method does not wait for previously submitted tasks to complete execution.",
                  "sentence_id": 400783
                },
                {
                  "sentence_text": "And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.",
                  "sentence_id": 400786
                }
              ],
              "method_id": 28291
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()",
              "method_sentence": [
                {
                  "sentence_text": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.",
                  "sentence_id": 255620
                },
                {
                  "sentence_text": "This method does not wait for actively executing tasks to terminate.",
                  "sentence_id": 400787
                },
                {
                  "sentence_text": "This implementation cancels tasks via Thread.interrupt(), so any task that fails to respond to interrupts may never terminate.",
                  "sentence_id": 400790
                }
              ],
              "method_id": 28292
            },
            {
              "method_name": "java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.",
                  "sentence_id": 255609
                },
                {
                  "sentence_text": "In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown.",
                  "sentence_id": 400772
                },
                {
                  "sentence_text": "This value is by default true.",
                  "sentence_id": 400773
                }
              ],
              "method_id": 28281
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Preferred Java way to ping an HTTP URL for availability ",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "javax.net.ssl.HttpsURLConnection",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/HttpsURLConnection.html",
          "class_id": 2703,
          "class_sentence": [
            {
              "sentence_text": "HttpsURLConnection extends HttpURLConnection with support for https-specific features.",
              "sentence_id": 234544
            },
            {
              "sentence_text": "There are default implementations defined for both classes.",
              "sentence_id": 358938
            }
          ],
          "method": [
            {
              "method_name": "javax.net.ssl.HttpsURLConnection.HttpsURLConnection(java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "Creates an HttpsURLConnection using the URL specified.",
                  "sentence_id": 261720
                }
              ],
              "method_id": 34766
            },
            {
              "method_name": "javax.net.ssl.HttpsURLConnection.getSSLSocketFactory()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the SSL socket factory to be used when creating sockets for secure https URL connections.",
                  "sentence_id": 261729
                }
              ],
              "method_id": 34775
            },
            {
              "method_name": "javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections.",
                  "sentence_id": 261733
                },
                {
                  "sentence_text": "Calls to this method replace this object's SSLSocketFactory.",
                  "sentence_id": 408359
                },
                {
                  "sentence_text": "New instances of this class inherit the default static SSLSocketFactory set by setDefaultSSLSocketFactory.",
                  "sentence_id": 408358
                }
              ],
              "method_id": 34779
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.URL",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/URL.html",
          "class_id": 1217,
          "class_sentence": [
            {
              "sentence_text": "The URL above indicates that the protocol to use is http (HyperText Transfer Protocol) and that the information resides on a host machine named www.example.com.",
              "sentence_id": 348066
            },
            {
              "sentence_text": "For example, the default port for http is 80.",
              "sentence_id": 348073
            }
          ],
          "method": [
            {
              "method_name": "java.net.URL.getProtocol()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the protocol name of this URL.",
                  "sentence_id": 246937
                }
              ],
              "method_id": 19588
            },
            {
              "method_name": "java.net.URL.URL(java.lang.String,java.lang.String,int,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Protocol handlers for the following protocols are guaranteed to exist on the search path :- http, https, file, and jar .",
                  "sentence_id": 383744
                },
                {
                  "sentence_text": "Creates a URL object from the specified protocol, host, port number, and file.",
                  "sentence_id": 246922
                },
                {
                  "sentence_text": "If this is the first URL object being created with the specified protocol, a stream protocol handler object, an instance of class URLStreamHandler, is created for that protocol: If the application has previously set up an instance of URLStreamHandlerFactory as the stream handler factory, then the createURLStreamHandler method of that instance is called with the protocol string as an argument to create the stream protocol handler.",
                  "sentence_id": 383737
                }
              ],
              "method_id": 19573
            },
            {
              "method_name": "java.net.URL.URL(java.lang.String,java.lang.String,java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a URL from the specified protocol name, host name, and file name.",
                  "sentence_id": 246923
                },
                {
                  "sentence_text": "The default port for the specified protocol is used.",
                  "sentence_id": 383747
                },
                {
                  "sentence_text": "This method is equivalent to calling the four-argument constructor with the arguments being protocol, host, -1, and file.",
                  "sentence_id": 383748
                }
              ],
              "method_id": 19574
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.URLConnection",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html",
          "class_id": 1219,
          "class_sentence": [
            {
              "sentence_text": "More information on the request properties and header fields of an http connection can be found at: http://www.ietf.org/rfc/rfc2616.txt Invoking the close() methods on the InputStream or OutputStream of an URLConnection after a request may free network resources associated with this instance, unless particular protocol specifications specify different behaviours for it.",
              "sentence_id": 348121
            },
            {
              "sentence_text": "----------------------------> time The connection object is created by invoking the openConnection method on a URL.",
              "sentence_id": 348108
            }
          ],
          "method": [
            {
              "method_name": "java.net.URLConnection.URLConnection(java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "Constructs a URL connection to the specified URL.",
                  "sentence_id": 246971
                },
                {
                  "sentence_text": "A connection to the object referenced by the URL is not created.",
                  "sentence_id": 383856
                }
              ],
              "method_id": 19622
            },
            {
              "method_name": "java.net.URLConnection.guessContentTypeFromStream(java.io.InputStream)",
              "method_sentence": [
                {
                  "sentence_text": "But many http servers return the incorrect content type; in addition, there are many nonstandard extensions.",
                  "sentence_id": 383911
                },
                {
                  "sentence_text": "Direct inspection of the bytes to determine the content type is often more accurate than believing the content type claimed by the http server.",
                  "sentence_id": 383912
                },
                {
                  "sentence_text": "Tries to determine the type of an input stream based on the characters at the beginning of the input stream.",
                  "sentence_id": 247008
                }
              ],
              "method_id": 19659
            },
            {
              "method_name": "java.net.URLConnection.getPermission()",
              "method_sentence": [
                {
                  "sentence_text": "For example, an HTTP sever, say foo.com, may redirect the connection to a different host, say bar.com.",
                  "sentence_id": 383899
                },
                {
                  "sentence_text": "For example, in an HTTP connection, this will represent the permission to connect to the host from which the data was ultimately fetched.",
                  "sentence_id": 383903
                },
                {
                  "sentence_text": "Permissions are generally used for two purposes: to protect caches of objects obtained through URLConnections, and to check the right of a recipient to learn about a particular URL.",
                  "sentence_id": 383901
                }
              ],
              "method_id": 19652
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.net.ssl.SSLSocketFactory",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLSocketFactory.html",
          "class_id": 2720,
          "class_sentence": [
            {
              "sentence_text": "SSLSocketFactorys create SSLSockets.",
              "sentence_id": 234561
            }
          ],
          "method": [
            {
              "method_name": "javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.io.InputStream,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "This method can be used by a server application that needs to observe the inbound data but still create valid SSL/TLS connections: for example, inspection of Server Name Indication (SNI) extensions (See section 3 of TLS Extensions (RFC6066)).",
                  "sentence_id": 408716
                },
                {
                  "sentence_text": "Creates a server mode Socket layered over an existing connected socket, and is able to read data which has already been consumed/removed from the Socket's underlying InputStream.",
                  "sentence_id": 261911
                },
                {
                  "sentence_text": "Data that has been already removed from the underlying InputStream should be loaded into the consumed stream before this method is called, perhaps using a ByteArrayInputStream.",
                  "sentence_id": 408717
                }
              ],
              "method_id": 34959
            },
            {
              "method_name": "javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites()",
              "method_sentence": [
                {
                  "sentence_text": "The minimum quality of service for these defaults requires confidentiality protection and server authentication (that is, no anonymous cipher suites).",
                  "sentence_id": 408726
                },
                {
                  "sentence_text": "Unless a different list is enabled, handshaking on an SSL connection will use one of these cipher suites.",
                  "sentence_id": 408725
                },
                {
                  "sentence_text": "Returns the list of cipher suites which are enabled by default.",
                  "sentence_id": 261913
                }
              ],
              "method_id": 34961
            },
            {
              "method_name": "javax.net.ssl.SSLSocketFactory.createSocket(java.net.Socket,java.lang.String,int,boolean)",
              "method_sentence": [
                {
                  "sentence_text": "This constructor can be used when tunneling SSL through a proxy or when negotiating the use of SSL over an existing socket.",
                  "sentence_id": 408713
                },
                {
                  "sentence_text": "The host and port refer to the logical peer destination.",
                  "sentence_id": 408714
                },
                {
                  "sentence_text": "Returns a socket layered over an existing socket connected to the named host, at the given port.",
                  "sentence_id": 261910
                }
              ],
              "method_id": 34958
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.net.ssl.SSLContext",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLContext.html",
          "class_id": 2710,
          "class_sentence": [
            {
              "sentence_text": "Every implementation of the Java platform is required to support the following standard SSLContext protocol: TLSv1 This protocol is described in the SSLContext section of the Java Cryptography Architecture Standard Algorithm Name Documentation.",
              "sentence_id": 358958
            },
            {
              "sentence_text": "Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngines.",
              "sentence_id": 234551
            }
          ],
          "method": [
            {
              "method_name": "javax.net.ssl.SSLContext.getClientSessionContext()",
              "method_sentence": [
                {
                  "sentence_text": "For example, when the underlying SSL provider does not provide an implementation of SSLSessionContext interface, this method returns null.",
                  "sentence_id": 408423
                },
                {
                  "sentence_text": "Returns the client session context, which represents the set of SSL sessions available for use during the handshake phase of client-side SSL sockets.",
                  "sentence_id": 261769
                },
                {
                  "sentence_text": "This context may be unavailable in some environments, in which case this method returns null.",
                  "sentence_id": 408422
                }
              ],
              "method_id": 34816
            },
            {
              "method_name": "javax.net.ssl.SSLContext.getServerSessionContext()",
              "method_sentence": [
                {
                  "sentence_text": "For example, when the underlying SSL provider does not provide an implementation of SSLSessionContext interface, this method returns null.",
                  "sentence_id": 408440
                },
                {
                  "sentence_text": "Returns the server session context, which represents the set of SSL sessions available for use during the handshake phase of server-side SSL sockets.",
                  "sentence_id": 261777
                },
                {
                  "sentence_text": "This context may be unavailable in some environments, in which case this method returns null.",
                  "sentence_id": 408439
                }
              ],
              "method_id": 34824
            },
            {
              "method_name": "javax.net.ssl.SSLContext.getInstance(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "This method traverses the list of registered security Providers, starting with the most preferred Provider.",
                  "sentence_id": 408430
                },
                {
                  "sentence_text": "Returns a SSLContext object that implements the specified secure socket protocol.",
                  "sentence_id": 261772
                },
                {
                  "sentence_text": "A new SSLContext object encapsulating the SSLContextSpi implementation from the first Provider that supports the specified protocol is returned.",
                  "sentence_id": 408431
                }
              ],
              "method_id": 34819
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.HttpURLConnection",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html",
          "class_id": 1194,
          "class_sentence": [
            {
              "sentence_text": "A URLConnection with support for HTTP-specific features.",
              "sentence_id": 233048
            },
            {
              "sentence_text": "Each HttpURLConnection instance is used to make a single request but the underlying network connection to the HTTP server may be transparently shared by other instances.",
              "sentence_id": 347755
            }
          ],
          "method": [
            {
              "method_name": "java.net.HttpURLConnection.setInstanceFollowRedirects(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance.",
                  "sentence_id": 246612
                },
                {
                  "sentence_text": "The default value comes from followRedirects, which defaults to true.",
                  "sentence_id": 383049
                }
              ],
              "method_id": 19258
            },
            {
              "method_name": "java.net.HttpURLConnection.getResponseMessage()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the HTTP response message, if any, returned along with the response code from a server.",
                  "sentence_id": 246607
                },
                {
                  "sentence_text": "Returns null if none could be discerned from the responses (the result was not valid HTTP).",
                  "sentence_id": 383026
                },
                {
                  "sentence_text": "From responses like: HTTP/1.0 200 OK HTTP/1.0 404 Not Found .",
                  "sentence_id": 383024
                }
              ],
              "method_id": 19253
            },
            {
              "method_name": "java.net.HttpURLConnection.getErrorStream()",
              "method_sentence": [
                {
                  "sentence_text": "The typical example is when an HTTP server responds with a 404, which will cause a FileNotFoundException to be thrown in connect, but the server sent an HTML help page with suggestions as to what to do.",
                  "sentence_id": 383011
                },
                {
                  "sentence_text": "Returns the error stream if the connection failed but the server sent useful data nonetheless.",
                  "sentence_id": 246598
                },
                {
                  "sentence_text": "If the connection was not connected, or if the server did not have an error while connecting or if the server had an error but no error data was sent, this method will return null.",
                  "sentence_id": 383013
                }
              ],
              "method_id": 19244
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.InetAddress",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/InetAddress.html",
          "class_id": 1198,
          "class_sentence": [
            {
              "sentence_text": "One example of its use is as the target of bind, which allows a server to accept a client connection on any interface, in case the server host has multiple interfaces.",
              "sentence_id": 347833
            },
            {
              "sentence_text": "Two Java security properties control the TTL values used for positive and negative host name resolution caching: networkaddress.cache.ttl Indicates the caching policy for successful name lookups from the name service.",
              "sentence_id": 347857
            }
          ],
          "method": [
            {
              "method_name": "java.net.InetAddress.isReachable(int)",
              "method_sentence": [
                {
                  "sentence_text": "Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible.",
                  "sentence_id": 383124
                },
                {
                  "sentence_text": "A typical implementation will use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 (Echo) of the destination host.",
                  "sentence_id": 383125
                },
                {
                  "sentence_text": "If the operation times out before getting an answer, the host is deemed unreachable.",
                  "sentence_id": 383127
                }
              ],
              "method_id": 19321
            },
            {
              "method_name": "java.net.InetAddress.isReachable(java.net.NetworkInterface,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Best effort is made by the implementation to try to reach the host, but firewalls and server configuration may block requests resulting in a unreachable status while some specific ports may be accessible.",
                  "sentence_id": 383129
                },
                {
                  "sentence_text": "A typical implementation will use ICMP ECHO REQUESTs if the privilege can be obtained, otherwise it will try to establish a TCP connection on port 7 (Echo) of the destination host.",
                  "sentence_id": 383130
                },
                {
                  "sentence_text": "The network interface and ttl parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through.",
                  "sentence_id": 383131
                }
              ],
              "method_id": 19322
            },
            {
              "method_name": "java.net.InetAddress.getCanonicalHostName()",
              "method_sentence": [
                {
                  "sentence_text": "If there is a security manager, this method first calls its checkConnect method with the hostname and -1 as its arguments to see if the calling code is allowed to know the hostname for this IP address, i.e., to connect to the host.",
                  "sentence_id": 383112
                },
                {
                  "sentence_text": "Best effort method, meaning we may not be able to return the FQDN depending on the underlying system configuration.",
                  "sentence_id": 383111
                },
                {
                  "sentence_text": "If the operation is not allowed, it will return the textual representation of the IP address.",
                  "sentence_id": 383113
                }
              ],
              "method_id": 19306
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.ServerSocket",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html",
          "class_id": 1210,
          "class_sentence": [
            {
              "sentence_text": "A server socket waits for requests to come in over the network.",
              "sentence_id": 347940
            },
            {
              "sentence_text": "This class implements server sockets.",
              "sentence_id": 233064
            }
          ],
          "method": [
            {
              "method_name": "java.net.ServerSocket.getInetAddress()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the local address of this server socket.",
                  "sentence_id": 246780
                },
                {
                  "sentence_text": "If the socket was bound prior to being closed, then this method will continue to return the local address after the socket is closed.",
                  "sentence_id": 383287
                },
                {
                  "sentence_text": "If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed.",
                  "sentence_id": 383288
                }
              ],
              "method_id": 19429
            },
            {
              "method_name": "java.net.ServerSocket.setPerformancePreferences(int,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Sockets use the TCP/IP protocol by default.",
                  "sentence_id": 383298
                },
                {
                  "sentence_text": "Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP.",
                  "sentence_id": 383299
                },
                {
                  "sentence_text": "This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols.",
                  "sentence_id": 383300
                }
              ],
              "method_id": 19438
            },
            {
              "method_name": "java.net.ServerSocket.toString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the implementation address and implementation port of this socket as a String.",
                  "sentence_id": 246794
                },
                {
                  "sentence_text": "If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed.",
                  "sentence_id": 383329
                },
                {
                  "sentence_text": "If the operation is not allowed, an InetAddress representing the loopback address is returned as the implementation address.",
                  "sentence_id": 383330
                }
              ],
              "method_id": 19443
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.URLStreamHandler",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandler.html",
          "class_id": 1223,
          "class_sentence": [
            {
              "sentence_text": "A stream protocol handler knows how to make a connection for a particular protocol type, such as http or https.",
              "sentence_id": 348195
            },
            {
              "sentence_text": "Rather, the first time a protocol name is encountered when constructing a URL, the appropriate stream protocol handler is automatically loaded.",
              "sentence_id": 348197
            }
          ],
          "method": [
            {
              "method_name": "java.net.URLStreamHandler.openConnection(java.net.URL,java.net.Proxy)",
              "method_sentence": [
                {
                  "sentence_text": "Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection.",
                  "sentence_id": 247039
                },
                {
                  "sentence_text": "Calling this method preempts the system's default ProxySelector settings.",
                  "sentence_id": 383975
                }
              ],
              "method_id": 19692
            },
            {
              "method_name": "java.net.URLStreamHandler.toExternalForm(java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "Converts a URL of a specific protocol to a String.",
                  "sentence_id": 247044
                }
              ],
              "method_id": 19697
            },
            {
              "method_name": "java.net.URLStreamHandler.parseURL(java.net.URL,java.lang.String,int,int)",
              "method_sentence": [
                {
                  "sentence_text": "The parseURL method of URLStreamHandler parses the string representation as if it were an http specification.",
                  "sentence_id": 383977
                },
                {
                  "sentence_text": "Most URL protocol families have a similar parsing.",
                  "sentence_id": 383978
                },
                {
                  "sentence_text": "Parses the string representation of a URL into a URL object.",
                  "sentence_id": 247040
                }
              ],
              "method_id": 19693
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.xml.ws.Service",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/xml/ws/Service.html",
          "class_id": 4047,
          "class_sentence": [
            {
              "sentence_text": "Service objects provide the client view of a Web service.",
              "sentence_id": 235851
            },
            {
              "sentence_text": "Service acts as a factory of the following: Proxies for a target service endpoint.",
              "sentence_id": 366706
            }
          ],
          "method": [
            {
              "method_name": "javax.xml.ws.Service.getPort(java.lang.Class<T>,javax.xml.ws.WebServiceFeature...)",
              "method_sentence": [
                {
                  "sentence_text": "The returned proxy should not be reconfigured by the client.",
                  "sentence_id": 422024
                },
                {
                  "sentence_text": "In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly.",
                  "sentence_id": 422023
                },
                {
                  "sentence_text": "The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy.",
                  "sentence_id": 422022
                }
              ],
              "method_id": 50807
            },
            {
              "method_name": "javax.xml.ws.Service.getPort(java.lang.Class<T>)",
              "method_sentence": [
                {
                  "sentence_text": "In the implementation of this method, the JAX-WS runtime system takes the responsibility of selecting a protocol binding (and a port) and configuring the proxy accordingly.",
                  "sentence_id": 422020
                },
                {
                  "sentence_text": "The returned proxy should not be reconfigured by the client.",
                  "sentence_id": 422021
                },
                {
                  "sentence_text": "The parameter serviceEndpointInterface specifies the service endpoint interface that is supported by the returned proxy.",
                  "sentence_id": 422019
                }
              ],
              "method_id": 50806
            },
            {
              "method_name": "javax.xml.ws.Service.getPort(javax.xml.namespace.QName,java.lang.Class<T>)",
              "method_sentence": [
                {
                  "sentence_text": "A service client uses this proxy to invoke operations on the target service endpoint.",
                  "sentence_id": 422015
                },
                {
                  "sentence_text": "The serviceEndpointInterface specifies the service endpoint interface that is supported by the created dynamic proxy instance.",
                  "sentence_id": 422016
                },
                {
                  "sentence_text": "The getPort method returns a proxy.",
                  "sentence_id": 275565
                }
              ],
              "method_id": 50804
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How to make ImageIO read from InputStream :Java",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.io.InputStreamReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html",
          "class_id": 934,
          "class_sentence": [
            {
              "sentence_text": "Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream.",
              "sentence_id": 346052
            },
            {
              "sentence_text": "An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset.",
              "sentence_id": 232788
            }
          ],
          "method": [
            {
              "method_name": "java.io.InputStreamReader.ready()",
              "method_sentence": [
                {
                  "sentence_text": "An InputStreamReader is ready if its input buffer is not empty, or if bytes are available to be read from the underlying byte stream.",
                  "sentence_id": 377449
                },
                {
                  "sentence_text": "Tells whether this stream is ready to be read.",
                  "sentence_id": 243289
                }
              ],
              "method_id": 16077
            },
            {
              "method_name": "java.io.InputStreamReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 243287
                }
              ],
              "method_id": 16075
            },
            {
              "method_name": "java.io.InputStreamReader.close()",
              "method_sentence": [
                {
                  "sentence_text": "Description copied from class: Reader",
                  "sentence_id": 243285
                }
              ],
              "method_id": 16073
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.ByteArrayInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/ByteArrayInputStream.html",
          "class_id": 915,
          "class_sentence": [
            {
              "sentence_text": "The methods in this class can be called after the stream has been closed without generating an IOException.",
              "sentence_id": 345933
            },
            {
              "sentence_text": "A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream.",
              "sentence_id": 232769
            }
          ],
          "method": [
            {
              "method_name": "java.io.ByteArrayInputStream.close()",
              "method_sentence": [
                {
                  "sentence_text": "The methods in this class can be called after the stream has been closed without generating an IOException.",
                  "sentence_id": 376973
                },
                {
                  "sentence_text": "Closing a ByteArrayInputStream has no effect.",
                  "sentence_id": 243018
                }
              ],
              "method_id": 15825
            },
            {
              "method_name": "java.io.ByteArrayInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads the next byte of data from this input stream.",
                  "sentence_id": 243021
                },
                {
                  "sentence_text": "This read method cannot block.",
                  "sentence_id": 376981
                },
                {
                  "sentence_text": "If no byte is available because the end of the stream has been reached, the value -1 is returned.",
                  "sentence_id": 376980
                }
              ],
              "method_id": 15828
            },
            {
              "method_name": "java.io.ByteArrayInputStream.markSupported()",
              "method_sentence": [
                {
                  "sentence_text": "Tests if this InputStream supports mark/reset.",
                  "sentence_id": 243020
                },
                {
                  "sentence_text": "The markSupported method of ByteArrayInputStream always returns true.",
                  "sentence_id": 376978
                }
              ],
              "method_id": 15827
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.imageio.ImageIO",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/imageio/ImageIO.html",
          "class_id": 2276,
          "class_sentence": [
            {
              "sentence_text": "A class containing static convenience methods for locating ImageReaders and ImageWriters, and performing simple encoding and decoding.",
              "sentence_id": 234130
            }
          ],
          "method": [
            {
              "method_name": "javax.imageio.ImageIO.read(java.io.InputStream)",
              "method_sentence": [
                {
                  "sentence_text": "The InputStream is wrapped in an ImageInputStream.",
                  "sentence_id": 403992
                },
                {
                  "sentence_text": "This method does not attempt to locate ImageReaders that can read directly from an InputStream; that may be accomplished using IIORegistry and ImageReaderSpi.",
                  "sentence_id": 403995
                },
                {
                  "sentence_text": "This method does not close the provided InputStream after the read operation has completed; it is the responsibility of the caller to close the stream, if desired.",
                  "sentence_id": 403996
                }
              ],
              "method_id": 31137
            },
            {
              "method_name": "javax.imageio.ImageIO.read(java.net.URL)",
              "method_sentence": [
                {
                  "sentence_text": "An InputStream is obtained from the URL, which is wrapped in an ImageInputStream.",
                  "sentence_id": 403997
                },
                {
                  "sentence_text": "This method does not attempt to locate ImageReaders that can read directly from a URL; that may be accomplished using IIORegistry and ImageReaderSpi.",
                  "sentence_id": 404000
                },
                {
                  "sentence_text": "If no registered ImageReader claims to be able to read the resulting stream, null is returned.",
                  "sentence_id": 403998
                }
              ],
              "method_id": 31138
            },
            {
              "method_name": "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)",
              "method_sentence": [
                {
                  "sentence_text": "Writes an image using an arbitrary ImageWriter that supports the given format to an OutputStream.",
                  "sentence_id": 258139
                },
                {
                  "sentence_text": "This method does not close the provided OutputStream after the write operation has completed; it is the responsibility of the caller to close the stream, if desired.",
                  "sentence_id": 404020
                },
                {
                  "sentence_text": "The current cache settings from getUseCacheand getCacheDirectory will be used to control caching.",
                  "sentence_id": 404021
                }
              ],
              "method_id": 31145
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.FileInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/FileInputStream.html",
          "class_id": 924,
          "class_sentence": [
            {
              "sentence_text": "FileInputStream is meant for reading streams of raw bytes such as image data.",
              "sentence_id": 346000
            },
            {
              "sentence_text": "A FileInputStream obtains input bytes from a file in a file system.",
              "sentence_id": 232778
            }
          ],
          "method": [
            {
              "method_name": "java.io.FileInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a byte of data from this input stream.",
                  "sentence_id": 243207
                },
                {
                  "sentence_text": "This method blocks if no input is yet available.",
                  "sentence_id": 377302
                }
              ],
              "method_id": 15994
            },
            {
              "method_name": "java.io.FileInputStream.read(byte[])",
              "method_sentence": [
                {
                  "sentence_text": "Reads up to b.length bytes of data from this input stream into an array of bytes.",
                  "sentence_id": 243208
                },
                {
                  "sentence_text": "This method blocks until some input is available.",
                  "sentence_id": 377303
                }
              ],
              "method_id": 15995
            },
            {
              "method_name": "java.io.FileInputStream.read(byte[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Reads up to len bytes of data from this input stream into an array of bytes.",
                  "sentence_id": 243209
                },
                {
                  "sentence_text": "If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.",
                  "sentence_id": 377304
                }
              ],
              "method_id": 15996
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.BufferedInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html",
          "class_id": 911,
          "class_sentence": [
            {
              "sentence_text": "As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time.",
              "sentence_id": 345910
            },
            {
              "sentence_text": "The mark operation remembers a point in the input stream and the reset operation causes all the bytes read since the most recent mark operation to be reread before new bytes are taken from the contained input stream.",
              "sentence_id": 345911
            }
          ],
          "method": [
            {
              "method_name": "java.io.BufferedInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "See the general contract of the read method of InputStream.",
                  "sentence_id": 242980
                }
              ],
              "method_id": 15787
            },
            {
              "method_name": "java.io.BufferedInputStream.read(byte[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "This method implements the general contract of the corresponding read method of the InputStream class.",
                  "sentence_id": 376920
                },
                {
                  "sentence_text": "As an additional convenience, it attempts to read as many bytes as possible by repeatedly invoking the read method of the underlying stream.",
                  "sentence_id": 376921
                },
                {
                  "sentence_text": "If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1.",
                  "sentence_id": 376923
                }
              ],
              "method_id": 15788
            },
            {
              "method_name": "java.io.BufferedInputStream.close()",
              "method_sentence": [
                {
                  "sentence_text": "Once the stream has been closed, further read(), available(), reset(), or skip() invocations will throw an IOException.",
                  "sentence_id": 376917
                },
                {
                  "sentence_text": "Closes this input stream and releases any system resources associated with the stream.",
                  "sentence_id": 242977
                },
                {
                  "sentence_text": "Closing a previously closed stream has no effect.",
                  "sentence_id": 376918
                }
              ],
              "method_id": 15784
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.BufferedReader",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html",
          "class_id": 913,
          "class_sentence": [
            {
              "sentence_text": "In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream.",
              "sentence_id": 345915
            },
            {
              "sentence_text": "It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders.",
              "sentence_id": 345916
            }
          ],
          "method": [
            {
              "method_name": "java.io.BufferedReader.read(char[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the read method of the underlying stream.",
                  "sentence_id": 376942
                },
                {
                  "sentence_text": "This method implements the general contract of the corresponding read method of the Reader class.",
                  "sentence_id": 376941
                },
                {
                  "sentence_text": "If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1.",
                  "sentence_id": 376944
                }
              ],
              "method_id": 15805
            },
            {
              "method_name": "java.io.BufferedReader.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads a single character.",
                  "sentence_id": 242997
                }
              ],
              "method_id": 15804
            },
            {
              "method_name": "java.io.BufferedReader.ready()",
              "method_sentence": [
                {
                  "sentence_text": "Tells whether this stream is ready to be read.",
                  "sentence_id": 243000
                },
                {
                  "sentence_text": "A buffered character stream is ready if the buffer is not empty, or if the underlying character stream is ready.",
                  "sentence_id": 376951
                }
              ],
              "method_id": 15807
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.PipedOutputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/PipedOutputStream.html",
          "class_id": 946,
          "class_sentence": [
            {
              "sentence_text": "The pipe is said to be broken if a thread that was reading data bytes from the connected piped input stream is no longer alive.",
              "sentence_id": 346182
            },
            {
              "sentence_text": "Typically, data is written to a PipedOutputStream object by one thread and data is read from the connected PipedInputStream by some other thread.",
              "sentence_id": 346180
            }
          ],
          "method": [
            {
              "method_name": "java.io.PipedOutputStream.write(int)",
              "method_sentence": [
                {
                  "sentence_text": "Implements the write method of OutputStream.",
                  "sentence_id": 377639
                },
                {
                  "sentence_text": "Writes the specified byte to the piped output stream.",
                  "sentence_id": 243471
                }
              ],
              "method_id": 16242
            },
            {
              "method_name": "java.io.PipedOutputStream.close()",
              "method_sentence": [
                {
                  "sentence_text": "This stream may no longer be used for writing bytes.",
                  "sentence_id": 377633
                },
                {
                  "sentence_text": "Closes this piped output stream and releases any system resources associated with this stream.",
                  "sentence_id": 243468
                }
              ],
              "method_id": 16239
            },
            {
              "method_name": "java.io.PipedOutputStream.PipedOutputStream(java.io.PipedInputStream)",
              "method_sentence": [
                {
                  "sentence_text": "Data bytes written to this stream will then be available as input from snk.",
                  "sentence_id": 377631
                },
                {
                  "sentence_text": "Creates a piped output stream connected to the specified piped input stream.",
                  "sentence_id": 243466
                }
              ],
              "method_id": 16237
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.io.PipedInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/io/PipedInputStream.html",
          "class_id": 945,
          "class_sentence": [
            {
              "sentence_text": "A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream.",
              "sentence_id": 232799
            },
            {
              "sentence_text": "The piped input stream contains a buffer, decoupling read operations from write operations, within limits.",
              "sentence_id": 346177
            }
          ],
          "method": [
            {
              "method_name": "java.io.PipedInputStream.read()",
              "method_sentence": [
                {
                  "sentence_text": "Reads the next byte of data from this piped input stream.",
                  "sentence_id": 243463
                },
                {
                  "sentence_text": "This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.",
                  "sentence_id": 377627
                },
                {
                  "sentence_text": "The value byte is returned as an int in the range 0 to 255.",
                  "sentence_id": 377626
                }
              ],
              "method_id": 16234
            },
            {
              "method_name": "java.io.PipedInputStream.available()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the number of bytes that can be read from this input stream without blocking.",
                  "sentence_id": 243460
                }
              ],
              "method_id": 16231
            },
            {
              "method_name": "java.io.PipedInputStream.read(byte[],int,int)",
              "method_sentence": [
                {
                  "sentence_text": "Reads up to len bytes of data from this piped input stream into an array of bytes.",
                  "sentence_id": 243464
                },
                {
                  "sentence_text": "If len is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.",
                  "sentence_id": 377629
                },
                {
                  "sentence_text": "Less than len bytes will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size.",
                  "sentence_id": 377628
                }
              ],
              "method_id": 16235
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.net.URL",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/net/URL.html",
          "class_id": 1217,
          "class_sentence": [
            {
              "sentence_text": "The URL class does not itself encode or decode any URL components according to the escaping mechanism defined in RFC2396.",
              "sentence_id": 348093
            },
            {
              "sentence_text": "The recommended way to manage the encoding and decoding of URLs is to use URI, and to convert between these two classes using toURI() and URI.toURL().",
              "sentence_id": 348099
            }
          ],
          "method": [
            {
              "method_name": "java.net.URL.openStream()",
              "method_sentence": [
                {
                  "sentence_text": "Opens a connection to this URL and returns an InputStream for reading from that connection.",
                  "sentence_id": 246944
                },
                {
                  "sentence_text": "This method is a shorthand for: openConnection().getInputStream() .",
                  "sentence_id": 383788
                }
              ],
              "method_id": 19595
            },
            {
              "method_name": "java.net.URL.toString()",
              "method_sentence": [
                {
                  "sentence_text": "The string is created by calling the toExternalForm method of the stream protocol handler for this object.",
                  "sentence_id": 383795
                },
                {
                  "sentence_text": "Constructs a string representation of this URL.",
                  "sentence_id": 246948
                }
              ],
              "method_id": 19599
            },
            {
              "method_name": "java.net.URL.openConnection()",
              "method_sentence": [
                {
                  "sentence_text": "If for the URL's protocol (such as HTTP or JAR), there exists a public, specialized URLConnection subclass belonging to one of the following packages or one of their subpackages: java.lang, java.io, java.util, java.net, the connection returned will be of that subclass.",
                  "sentence_id": 383785
                },
                {
                  "sentence_text": "Returns a URLConnection instance that represents a connection to the remote object referred to by the URL.",
                  "sentence_id": 246942
                },
                {
                  "sentence_text": "For example, for HTTP an HttpURLConnection will be returned, and for JAR a JarURLConnection will be returned.",
                  "sentence_id": 383786
                }
              ],
              "method_id": 19593
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA.DataInputStream",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA/DataInputStream.html",
          "class_id": 4122,
          "class_sentence": [
            {
              "sentence_text": "Defines the methods used to read primitive data types from input streams for unmarshaling custom value types.",
              "sentence_id": 235926
            },
            {
              "sentence_text": "This interface is used by user written custom unmarshaling code for custom value types.",
              "sentence_id": 367011
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_Value()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL value type from the input stream.",
                  "sentence_id": 276017
                }
              ],
              "method_id": 51270
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_short()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL short from the input stream.",
                  "sentence_id": 276008
                }
              ],
              "method_id": 51261
            },
            {
              "method_name": "org.omg.CORBA.DataInputStream.read_double()",
              "method_sentence": [
                {
                  "sentence_text": "Reads an IDL double from the input stream.",
                  "sentence_id": 275997
                }
              ],
              "method_id": 51250
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How do I print a double value without scientific notation using Java?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.math.BigDecimal",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html",
          "class_id": 1170,
          "class_sentence": [
            {
              "sentence_text": "Since the same numerical value can have different representations (with different scales), the rules of arithmetic and rounding must specify both the numerical result and the scale used in the result's representation.",
              "sentence_id": 347617
            },
            {
              "sentence_text": "Immutable, arbitrary-precision signed decimal numbers.",
              "sentence_id": 233024
            }
          ],
          "method": [
            {
              "method_name": "java.math.BigDecimal.toString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed.",
                  "sentence_id": 246299
                },
                {
                  "sentence_text": "The toEngineeringString() method may be used for presenting numbers with exponents in engineering notation, and the setScale method may be used for rounding a BigDecimal so it has a known number of digits after the decimal point.",
                  "sentence_id": 382644
                },
                {
                  "sentence_text": "Otherwise (that is, if the scale is negative, or the adjusted exponent is less than -6), the number will be converted to a character form using exponential notation.",
                  "sentence_id": 382630
                }
              ],
              "method_id": 18939
            },
            {
              "method_name": "java.math.BigDecimal.toEngineeringString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a string that represents the BigDecimal as described in the toString() method, except that if exponential notation is used, the power of ten is adjusted to be a multiple of three (engineering notation) such that the integer part of nonzero values will be in the range 1 through 999.",
                  "sentence_id": 382612
                },
                {
                  "sentence_text": "Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed.",
                  "sentence_id": 246297
                },
                {
                  "sentence_text": "If exponential notation is used for zero values, a decimal point and one or two fractional zero digits are used so that the scale of the zero value is preserved.",
                  "sentence_id": 382613
                }
              ],
              "method_id": 18937
            },
            {
              "method_name": "java.math.BigDecimal.doubleValue()",
              "method_sentence": [
                {
                  "sentence_text": "This conversion is similar to the narrowing primitive conversion from double to float as defined in section 5.1.3 of The Java™ Language Specification: if this BigDecimal has too great a magnitude represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate.",
                  "sentence_id": 382546
                },
                {
                  "sentence_text": "Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value.",
                  "sentence_id": 382547
                },
                {
                  "sentence_text": "Converts this BigDecimal to a double.",
                  "sentence_id": 246261
                }
              ],
              "method_id": 18901
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Double",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html",
          "class_id": 998,
          "class_sentence": [
            {
              "sentence_text": "In addition, this class provides several methods for converting a double to a String and a String to a double, as well as other constants and methods useful when dealing with a double.",
              "sentence_id": 346379
            },
            {
              "sentence_text": "An object of type Double contains a single field whose type is double.",
              "sentence_id": 346378
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Double.toString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a string representation of this Double object.",
                  "sentence_id": 244444
                },
                {
                  "sentence_text": "The primitive double value represented by this object is converted to a string exactly as if by the method toString of one argument.",
                  "sentence_id": 378784
                }
              ],
              "method_id": 17135
            },
            {
              "method_name": "java.lang.Double.toHexString(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a hexadecimal string representation of the double argument.",
                  "sentence_id": 244442
                },
                {
                  "sentence_text": "If m is a double value with a subnormal representation, the significand is represented by the characters \"0x0.\"",
                  "sentence_id": 378763
                },
                {
                  "sentence_text": "If m is a double value with a normalized representation, substrings are used to represent the significand and exponent fields.",
                  "sentence_id": 378758
                }
              ],
              "method_id": 17133
            },
            {
              "method_name": "java.lang.Double.valueOf(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise, s is regarded as representing an exact decimal value in the usual \"computerized scientific notation\" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an \"infinitely precise\" binary value that is then rounded to type double by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value.",
                  "sentence_id": 378792
                },
                {
                  "sentence_text": "(The numerical value 0.1 cannot be exactly represented in a binary floating-point number.)",
                  "sentence_id": 378800
                },
                {
                  "sentence_text": "For example, the float literal 0.1f is equal to the double value 0.10000000149011612; the float literal 0.1f represents a different numerical value than the double literal 0.1.",
                  "sentence_id": 378799
                }
              ],
              "method_id": 17136
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.text.DecimalFormat",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html",
          "class_id": 1726,
          "class_sentence": [
            {
              "sentence_text": "DecimalFormat can be instructed to format and parse scientific notation only via a pattern; there is currently no factory method that creates a scientific notation format.",
              "sentence_id": 350799
            },
            {
              "sentence_text": "Scientific Notation Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3.",
              "sentence_id": 350797
            }
          ],
          "method": [
            {
              "method_name": "java.text.DecimalFormat.setDecimalFormatSymbols(java.text.DecimalFormatSymbols)",
              "method_sentence": [
                {
                  "sentence_text": "Sets the decimal format symbols, which is generally not changed by the programmer or user.",
                  "sentence_id": 251093
                }
              ],
              "method_id": 23761
            },
            {
              "method_name": "java.text.DecimalFormat.getDecimalFormatSymbols()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.",
                  "sentence_id": 251076
                }
              ],
              "method_id": 23744
            },
            {
              "method_name": "java.text.DecimalFormat.getCurrency()",
              "method_sentence": [
                {
                  "sentence_text": "The currency is obtained by calling DecimalFormatSymbols.getCurrency on this number format's symbols.",
                  "sentence_id": 390571
                },
                {
                  "sentence_text": "Gets the currency used by this decimal format when formatting currency values.",
                  "sentence_id": 251075
                }
              ],
              "method_id": 23743
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.math.BigInteger",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html",
          "class_id": 1171,
          "class_sentence": [
            {
              "sentence_text": "All operations behave as if BigIntegers were represented in two's-complement notation (like Java's primitive integer types).",
              "sentence_id": 347650
            },
            {
              "sentence_text": "BigInteger provides analogues to all of Java's primitive integer operators, and all relevant methods from java.lang.Math.",
              "sentence_id": 347651
            }
          ],
          "method": [
            {
              "method_name": "java.math.BigInteger.doubleValue()",
              "method_sentence": [
                {
                  "sentence_text": "This conversion is similar to the narrowing primitive conversion from double to float as defined in section 5.1.3 of The Java™ Language Specification: if this BigInteger has too great a magnitude to represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate.",
                  "sentence_id": 382677
                },
                {
                  "sentence_text": "Converts this BigInteger to a double.",
                  "sentence_id": 246325
                },
                {
                  "sentence_text": "Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value.",
                  "sentence_id": 382678
                }
              ],
              "method_id": 18965
            },
            {
              "method_name": "java.math.BigInteger.floatValue()",
              "method_sentence": [
                {
                  "sentence_text": "This conversion is similar to the narrowing primitive conversion from double to float as defined in section 5.1.3 of The Java™ Language Specification: if this BigInteger has too great a magnitude to represent as a float, it will be converted to Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate.",
                  "sentence_id": 382680
                },
                {
                  "sentence_text": "Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value.",
                  "sentence_id": 382681
                },
                {
                  "sentence_text": "Converts this BigInteger to a float.",
                  "sentence_id": 246328
                }
              ],
              "method_id": 18968
            },
            {
              "method_name": "java.math.BigInteger.toString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the decimal String representation of this BigInteger.",
                  "sentence_id": 246359
                },
                {
                  "sentence_text": "(This representation is compatible with the (String) constructor, and allows for String concatenation with Java's + operator.)",
                  "sentence_id": 382716
                },
                {
                  "sentence_text": "The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate.",
                  "sentence_id": 382715
                }
              ],
              "method_id": 18999
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Float",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Float.html",
          "class_id": 1000,
          "class_sentence": [
            {
              "sentence_text": "In addition, this class provides several methods for converting a float to a String and a String to a float, as well as other constants and methods useful when dealing with a float.",
              "sentence_id": 346383
            },
            {
              "sentence_text": "An object of type Float contains a single field whose type is float.",
              "sentence_id": 346382
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Float.valueOf(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise, s is regarded as representing an exact decimal value in the usual \"computerized scientific notation\" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an \"infinitely precise\" binary value that is then rounded to type float by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value.",
                  "sentence_id": 378929
                },
                {
                  "sentence_text": "In other words, the numerical value of the input string is converted directly to the target floating-point type.",
                  "sentence_id": 378934
                },
                {
                  "sentence_text": "In general, the two-step sequence of conversions, string to double followed by double to float, is not equivalent to converting a string directly to float.",
                  "sentence_id": 378935
                }
              ],
              "method_id": 17189
            },
            {
              "method_name": "java.lang.Float.toString()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a string representation of this Float object.",
                  "sentence_id": 244497
                },
                {
                  "sentence_text": "The primitive float value represented by this object is converted to a String exactly as if by the method toString of one argument.",
                  "sentence_id": 378921
                }
              ],
              "method_id": 17188
            },
            {
              "method_name": "java.lang.Float.hashCode()",
              "method_sentence": [
                {
                  "sentence_text": "The result is the integer bit representation, exactly as produced by the method floatToIntBits(float), of the primitive float value represented by this Float object.",
                  "sentence_id": 378869
                },
                {
                  "sentence_text": "Returns a hash code for this Float object.",
                  "sentence_id": 244480
                }
              ],
              "method_id": 17171
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., char values).",
              "sentence_id": 346624
            },
            {
              "sentence_text": "The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings.",
              "sentence_id": 346617
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.valueOf(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the string representation of the double argument.",
                  "sentence_id": 245058
                },
                {
                  "sentence_text": "The representation is exactly the one returned by the Double.toString method of one argument.",
                  "sentence_id": 380392
                }
              ],
              "method_id": 17714
            },
            {
              "method_name": "java.lang.String.valueOf(float)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the string representation of the float argument.",
                  "sentence_id": 245057
                },
                {
                  "sentence_text": "The representation is exactly the one returned by the Float.toString method of one argument.",
                  "sentence_id": 380391
                }
              ],
              "method_id": 17713
            },
            {
              "method_name": "java.lang.String.intern()",
              "method_sentence": [
                {
                  "sentence_text": "String literals are defined in section 3.10.5 of the The Java™ Language Specification.",
                  "sentence_id": 380295
                },
                {
                  "sentence_text": "All literal strings and string-valued constant expressions are interned.",
                  "sentence_id": 380294
                },
                {
                  "sentence_text": "Returns a canonical representation for the string object.",
                  "sentence_id": 245019
                }
              ],
              "method_id": 17675
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.text.NumberFormat",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html",
          "class_id": 1734,
          "class_sentence": [
            {
              "sentence_text": "Use getIntegerInstance to get an integer number format.",
              "sentence_id": 350943
            },
            {
              "sentence_text": "Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal.",
              "sentence_id": 350935
            }
          ],
          "method": [
            {
              "method_name": "java.text.NumberFormat.getIntegerInstance()",
              "method_sentence": [
                {
                  "sentence_text": "The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly).",
                  "sentence_id": 390761
                },
                {
                  "sentence_text": "Returns an integer number format for the current default FORMAT locale.",
                  "sentence_id": 251211
                },
                {
                  "sentence_text": "This is equivalent to calling getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT)).",
                  "sentence_id": 390762
                }
              ],
              "method_id": 23879
            },
            {
              "method_name": "java.text.NumberFormat.getIntegerInstance(java.util.Locale)",
              "method_sentence": [
                {
                  "sentence_text": "The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly).",
                  "sentence_id": 390763
                },
                {
                  "sentence_text": "Returns an integer number format for the specified locale.",
                  "sentence_id": 251212
                }
              ],
              "method_id": 23880
            },
            {
              "method_name": "java.text.NumberFormat.setParseIntegerOnly(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Sets whether or not numbers should be parsed as integers only.",
                  "sentence_id": 251234
                }
              ],
              "method_id": 23902
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Math",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
          "class_id": 1004,
          "class_sentence": [
            {
              "sentence_text": "The platform uses signed two's complement integer arithmetic with int and long primitive types.",
              "sentence_id": 346409
            },
            {
              "sentence_text": "Unlike some of the numeric methods of class StrictMath, all implementations of the equivalent functions of class Math are not defined to return the bit-for-bit same results.",
              "sentence_id": 346392
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Math.rint(double)",
              "method_sentence": [
                {
                  "sentence_text": "If two double values that are mathematical integers are equally close, the result is the integer value that is even.",
                  "sentence_id": 379361
                },
                {
                  "sentence_text": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer.",
                  "sentence_id": 244684
                },
                {
                  "sentence_text": "Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument.",
                  "sentence_id": 379362
                }
              ],
              "method_id": 17356
            },
            {
              "method_name": "java.lang.Math.getExponent(double)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the unbiased exponent used in the representation of a double.",
                  "sentence_id": 244656
                },
                {
                  "sentence_text": "If the argument is zero or subnormal, then the result is Double.MIN_EXPONENT -1.",
                  "sentence_id": 379255
                },
                {
                  "sentence_text": "Special cases: If the argument is NaN or infinite, then the result is Double.MAX_EXPONENT + 1.",
                  "sentence_id": 379254
                }
              ],
              "method_id": 17328
            },
            {
              "method_name": "java.lang.Math.getExponent(float)",
              "method_sentence": [
                {
                  "sentence_text": "Returns the unbiased exponent used in the representation of a float.",
                  "sentence_id": 244655
                },
                {
                  "sentence_text": "Special cases: If the argument is NaN or infinite, then the result is Float.MAX_EXPONENT + 1.",
                  "sentence_id": 379252
                },
                {
                  "sentence_text": "If the argument is zero or subnormal, then the result is Float.MIN_EXPONENT -1.",
                  "sentence_id": 379253
                }
              ],
              "method_id": 17327
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Long",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html",
          "class_id": 1003,
          "class_sentence": [
            {
              "sentence_text": "In addition, this class provides several methods for converting a long to a String and a String to a long, as well as other constants and methods useful when dealing with a long.",
              "sentence_id": 346390
            },
            {
              "sentence_text": "The Long class wraps a value of the primitive type long in an object.",
              "sentence_id": 232857
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Long.toString()",
              "method_sentence": [
                {
                  "sentence_text": "The value is converted to signed decimal representation and returned as a string, exactly as if the long value were given as an argument to the toString(long) method.",
                  "sentence_id": 379140
                },
                {
                  "sentence_text": "Returns a String object representing this Long's value.",
                  "sentence_id": 244622
                }
              ],
              "method_id": 17294
            },
            {
              "method_name": "java.lang.Long.toUnsignedString(long)",
              "method_sentence": [
                {
                  "sentence_text": "Returns a string representation of the argument as an unsigned decimal value.",
                  "sentence_id": 244624
                },
                {
                  "sentence_text": "The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the toUnsignedString(long, int) method.",
                  "sentence_id": 379145
                }
              ],
              "method_id": 17296
            },
            {
              "method_name": "java.lang.Long.toUnsignedString(long,int)",
              "method_sentence": [
                {
                  "sentence_text": "Note that since the first argument is treated as an unsigned value, no leading sign character is printed.",
                  "sentence_id": 379142
                },
                {
                  "sentence_text": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument.",
                  "sentence_id": 244623
                },
                {
                  "sentence_text": "If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character.",
                  "sentence_id": 379143
                }
              ],
              "method_id": 17295
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Number",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Number.html",
          "class_id": 1005,
          "class_sentence": [
            {
              "sentence_text": "The abstract class Number is the superclass of platform classes representing numeric values that are convertible to the primitive types byte, double, float, int, long, and short.",
              "sentence_id": 232859
            },
            {
              "sentence_text": "The specific semantics of the conversion from the numeric value of a particular Number implementation to a given primitive type is defined by the Number implementation in question.",
              "sentence_id": 346414
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Number.doubleValue()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the value of the specified number as a double, which may involve rounding.",
                  "sentence_id": 244704
                }
              ],
              "method_id": 17377
            },
            {
              "method_name": "java.lang.Number.floatValue()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the value of the specified number as a float, which may involve rounding.",
                  "sentence_id": 244705
                }
              ],
              "method_id": 17378
            },
            {
              "method_name": "java.lang.Number.longValue()",
              "method_sentence": [
                {
                  "sentence_text": "Returns the value of the specified number as a long, which may involve rounding or truncation.",
                  "sentence_id": 244707
                }
              ],
              "method_id": 17380
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "Varargs method modifies caller's array instead of its own copy?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "java.lang.String",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
          "class_id": 1017,
          "class_sentence": [
            {
              "sentence_text": "String buffers support mutable strings.",
              "sentence_id": 346610
            },
            {
              "sentence_text": "Because String objects are immutable they can be shared.",
              "sentence_id": 346611
            }
          ],
          "method": [
            {
              "method_name": "java.lang.String.String(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable.",
                  "sentence_id": 380194
                },
                {
                  "sentence_text": "Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.",
                  "sentence_id": 244978
                }
              ],
              "method_id": 17634
            },
            {
              "method_name": "java.lang.String.valueOf(char[])",
              "method_sentence": [
                {
                  "sentence_text": "The contents of the character array are copied; subsequent modification of the character array does not affect the returned string.",
                  "sentence_id": 380385
                },
                {
                  "sentence_text": "Returns the string representation of the char array argument.",
                  "sentence_id": 245051
                }
              ],
              "method_id": 17707
            },
            {
              "method_name": "java.lang.String.String(char[])",
              "method_sentence": [
                {
                  "sentence_text": "The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.",
                  "sentence_id": 380195
                },
                {
                  "sentence_text": "Allocates a new String so that it represents the sequence of characters currently contained in the character array argument.",
                  "sentence_id": 244979
                }
              ],
              "method_id": 17635
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.ArrayList",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html",
          "class_id": 1854,
          "class_sentence": [
            {
              "sentence_text": "If multiple threads access an ArrayList instance concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally.",
              "sentence_id": 352304
            },
            {
              "sentence_text": "In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list.",
              "sentence_id": 352290
            }
          ],
          "method": [
            {
              "method_name": "java.util.ArrayList.toArray()",
              "method_sentence": [
                {
                  "sentence_text": "The caller is thus free to modify the returned array.",
                  "sentence_id": 397283
                },
                {
                  "sentence_text": "The returned array will be \"safe\" in that no references to it are maintained by this list.",
                  "sentence_id": 397281
                },
                {
                  "sentence_text": "(In other words, this method must allocate a new array).",
                  "sentence_id": 397282
                }
              ],
              "method_id": 25933
            },
            {
              "method_name": "java.util.ArrayList.clone()",
              "method_sentence": [
                {
                  "sentence_text": "(The elements themselves are not copied.)",
                  "sentence_id": 397249
                },
                {
                  "sentence_text": "Returns a shallow copy of this ArrayList instance.",
                  "sentence_id": 253242
                }
              ],
              "method_id": 25910
            },
            {
              "method_name": "java.util.ArrayList.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.",
                  "sentence_id": 397286
                },
                {
                  "sentence_text": "(This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)",
                  "sentence_id": 397288
                },
                {
                  "sentence_text": "If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the collection is set to null.",
                  "sentence_id": 397287
                }
              ],
              "method_id": 25934
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.List",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/List.html",
          "class_id": 1824,
          "class_sentence": [
            {
              "sentence_text": "Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.",
              "sentence_id": 352014
            },
            {
              "sentence_text": "It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.",
              "sentence_id": 352008
            }
          ],
          "method": [
            {
              "method_name": "java.util.List.toArray()",
              "method_sentence": [
                {
                  "sentence_text": "The caller is thus free to modify the returned array.",
                  "sentence_id": 396635
                },
                {
                  "sentence_text": "(In other words, this method must allocate a new array even if this list is backed by an array).",
                  "sentence_id": 396634
                },
                {
                  "sentence_text": "The returned array will be \"safe\" in that no references to it are maintained by this list.",
                  "sentence_id": 396633
                }
              ],
              "method_id": 25615
            },
            {
              "method_name": "java.util.List.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "(This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)",
                  "sentence_id": 396640
                },
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.",
                  "sentence_id": 396638
                },
                {
                  "sentence_text": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.",
                  "sentence_id": 252948
                }
              ],
              "method_id": 25616
            },
            {
              "method_name": "java.util.List.replaceAll(java.util.function.UnaryOperator<E>)",
              "method_sentence": [
                {
                  "sentence_text": "Errors or runtime exceptions thrown by the operator are relayed to the caller.",
                  "sentence_id": 518022
                },
                {
                  "sentence_text": "Replaces each element of this list with the result of applying the operator to that element.",
                  "sentence_id": 309555
                }
              ],
              "method_id": 83244
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.Class",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html",
          "class_id": 994,
          "class_sentence": [
            {
              "sentence_text": "Every array also belongs to a class that is reflected as a Class object that is shared by all arrays with the same element type and number of dimensions.",
              "sentence_id": 346333
            },
            {
              "sentence_text": "Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader.",
              "sentence_id": 346336
            }
          ],
          "method": [
            {
              "method_name": "java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...)",
              "method_sentence": [
                {
                  "sentence_text": "If this Class object represents an array type, then this method does not find the clone() method.",
                  "sentence_id": 378441
                },
                {
                  "sentence_text": "The name parameter is a String that specifies the simple name of the desired method, and the parameterTypes parameter is an array of Class objects that identify the method's formal parameter types, in declared order.",
                  "sentence_id": 378438
                },
                {
                  "sentence_text": "If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily.",
                  "sentence_id": 378439
                }
              ],
              "method_id": 17015
            },
            {
              "method_name": "java.lang.Class.getMethods()",
              "method_sentence": [
                {
                  "sentence_text": "It does not contain a Method object for clone().",
                  "sentence_id": 378507
                },
                {
                  "sentence_text": "If this Class object represents an array type, then the returned array has a Method object for each of the public methods inherited by the array type from Object.",
                  "sentence_id": 378506
                },
                {
                  "sentence_text": "If this Class object represents a type that has multiple public methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method.",
                  "sentence_id": 378504
                }
              ],
              "method_id": 17028
            },
            {
              "method_name": "java.lang.Class.getDeclaredMethods()",
              "method_sentence": [
                {
                  "sentence_text": "If this Class object represents a type that has multiple declared methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method.",
                  "sentence_id": 378442
                },
                {
                  "sentence_text": "If this Class object represents an array type, a primitive type, or void, then the returned array has length 0.",
                  "sentence_id": 378445
                },
                {
                  "sentence_text": "Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods.",
                  "sentence_id": 244325
                }
              ],
              "method_id": 17016
            }
          ]
        }
      ],
      [
        {
          "class_name": "org.omg.CORBA.Object",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/org/omg/CORBA/Object.html",
          "class_id": 4138,
          "class_sentence": [
            {
              "sentence_text": "If it is a local object (that is, running in the same VM as the client), invocations may be directly serviced by the object instance, and the object reference could point to the actual instance of the object implementation class.",
              "sentence_id": 367043
            },
            {
              "sentence_text": "If a CORBA object is a remote object (that is, running in a different VM from the client), the object reference points to a stub (proxy) which uses the ORB machinery to make a remote invocation on the server where the object implementation resides.",
              "sentence_id": 367044
            }
          ],
          "method": [
            {
              "method_name": "org.omg.CORBA.Object._release()",
              "method_sentence": [
                {
                  "sentence_text": "Note that the object implementation is not involved in this operation, and other references to the same object are not affected.",
                  "sentence_id": 422686
                },
                {
                  "sentence_text": "Signals that the caller is done using this object reference, so internal ORB resources associated with this object reference can be released.",
                  "sentence_id": 276141
                }
              ],
              "method_id": 51394
            },
            {
              "method_name": "org.omg.CORBA.Object._duplicate()",
              "method_sentence": [
                {
                  "sentence_text": "The method _duplicate may return this object reference itself.",
                  "sentence_id": 422677
                },
                {
                  "sentence_text": "The server object implementation is not involved in creating the duplicate, and the implementation cannot distinguish whether the original object reference or a duplicate was used to make a request.",
                  "sentence_id": 422674
                },
                {
                  "sentence_text": "Returns a duplicate of this CORBA object reference.",
                  "sentence_id": 276133
                }
              ],
              "method_id": 51386
            },
            {
              "method_name": "org.omg.CORBA.Object._create_request(org.omg.CORBA.Context,java.lang.String,org.omg.CORBA.NVList,org.omg.CORBA.NamedValue,org.omg.CORBA.ExceptionList,org.omg.CORBA.ContextList)",
              "method_sentence": [
                {
                  "sentence_text": "Creates a Request instance initialized with the given context, method name, list of arguments, container for the method's return value, list of possible exceptions, and list of context strings needing to be resolved.",
                  "sentence_id": 276132
                }
              ],
              "method_id": 51385
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.LinkedList",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html",
          "class_id": 1881,
          "class_sentence": [
            {
              "sentence_text": "Implements all optional list operations, and permits all elements (including null).",
              "sentence_id": 353293
            },
            {
              "sentence_text": "If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally.",
              "sentence_id": 353297
            }
          ],
          "method": [
            {
              "method_name": "java.util.LinkedList.toArray()",
              "method_sentence": [
                {
                  "sentence_text": "The caller is thus free to modify the returned array.",
                  "sentence_id": 398624
                },
                {
                  "sentence_text": "The returned array will be \"safe\" in that no references to it are maintained by this list.",
                  "sentence_id": 398622
                },
                {
                  "sentence_text": "(In other words, this method must allocate a new array).",
                  "sentence_id": 398623
                }
              ],
              "method_id": 26664
            },
            {
              "method_name": "java.util.LinkedList.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "(This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)",
                  "sentence_id": 398629
                },
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.",
                  "sentence_id": 398627
                },
                {
                  "sentence_text": "If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to null.",
                  "sentence_id": 398628
                }
              ],
              "method_id": 26665
            },
            {
              "method_name": "java.util.LinkedList.clone()",
              "method_sentence": [
                {
                  "sentence_text": "Returns a shallow copy of this LinkedList.",
                  "sentence_id": 253965
                },
                {
                  "sentence_text": "(The elements themselves are not cloned.)",
                  "sentence_id": 398598
                }
              ],
              "method_id": 26633
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.util.Collection",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html",
          "class_id": 1817,
          "class_sentence": [
            {
              "sentence_text": "In effect, the latter constructor allows the user to copy any collection, producing an equivalent collection of the desired implementation type.",
              "sentence_id": 351930
            },
            {
              "sentence_text": "In the absence of a stronger guarantee by the implementation, undefined behavior may result from the invocation of any method on a collection that is being mutated by another thread; this includes direct invocations, passing the collection to a method that might perform invocations, and using an existing iterator to examine the collection.",
              "sentence_id": 351942
            }
          ],
          "method": [
            {
              "method_name": "java.util.Collection.toArray()",
              "method_sentence": [
                {
                  "sentence_text": "The caller is thus free to modify the returned array.",
                  "sentence_id": 396495
                },
                {
                  "sentence_text": "The returned array will be \"safe\" in that no references to it are maintained by this collection.",
                  "sentence_id": 396493
                },
                {
                  "sentence_text": "(In other words, this method must allocate a new array even if this collection is backed by an array).",
                  "sentence_id": 396494
                }
              ],
              "method_id": 25535
            },
            {
              "method_name": "java.util.Collection.toArray(T[])",
              "method_sentence": [
                {
                  "sentence_text": "Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection.",
                  "sentence_id": 396498
                },
                {
                  "sentence_text": "(This is useful in determining the length of this collection only if the caller knows that this collection does not contain any null elements.)",
                  "sentence_id": 396500
                },
                {
                  "sentence_text": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.",
                  "sentence_id": 252868
                }
              ],
              "method_id": 25536
            },
            {
              "method_name": "java.util.Collection.removeIf(java.util.function.Predicate<? super java.util.Collection>)",
              "method_sentence": [
                {
                  "sentence_text": "Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.",
                  "sentence_id": 396481
                },
                {
                  "sentence_text": "Removes all of the elements of this collection that satisfy the given predicate.",
                  "sentence_id": 252862
                }
              ],
              "method_id": 25530
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.sql.Array",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/sql/Array.html",
          "class_id": 1660,
          "class_sentence": [
            {
              "sentence_text": "By default, an Array object is implemented using an SQL LOCATOR(array) internally, which means that an Array object contains a logical pointer to the data in the SQL ARRAY value rather than containing the ARRAY value's data.",
              "sentence_id": 350263
            },
            {
              "sentence_text": "The Array interface provides methods for bringing an SQL ARRAY value's data to the client as either an array or a ResultSet object.",
              "sentence_id": 350264
            }
          ],
          "method": [
            {
              "method_name": "java.sql.Array.free()",
              "method_sentence": [
                {
                  "sentence_text": "This method frees the Array object and releases the resources that it holds.",
                  "sentence_id": 249596
                },
                {
                  "sentence_text": "The object is invalid once the free method is called.",
                  "sentence_id": 388451
                },
                {
                  "sentence_text": "If free is called multiple times, the subsequent calls to free are treated as a no-op.",
                  "sentence_id": 388453
                }
              ],
              "method_id": 22264
            },
            {
              "method_name": "java.sql.Array.getArray(,Â java.lang.Class<?>>)",
              "method_sentence": [
                {
                  "sentence_text": "Note: When getArray is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of Object.",
                  "sentence_id": 517467
                },
                {
                  "sentence_text": "Retrieves the contents of the SQL ARRAY value designated by this Array object.",
                  "sentence_id": 309480
                },
                {
                  "sentence_text": "This method uses the specified map for type map customizations unless the base type of the array does not match a user-defined type in map, in which case it uses the standard mapping.",
                  "sentence_id": 517465
                }
              ],
              "method_id": 83169
            },
            {
              "method_name": "java.sql.Array.getArray(long,int,,Â java.lang.Class<?>>)",
              "method_sentence": [
                {
                  "sentence_text": "Note: When getArray is used to materialize a base type that maps to a primitive data type, then it is implementation-defined whether the array returned is an array of that primitive data type or an array of Object.",
                  "sentence_id": 517471
                },
                {
                  "sentence_text": "This method uses the specified map for type map customizations unless the base type of the array does not match a user-defined type in map, in which case it uses the standard mapping.",
                  "sentence_id": 517469
                },
                {
                  "sentence_text": "Retreives a slice of the SQL ARRAY value designated by this Array object, beginning with the specified index and containing up to count successive elements of the SQL array.",
                  "sentence_id": 309481
                }
              ],
              "method_id": 83170
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.sql.PreparedStatement",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html",
          "class_id": 1670,
          "class_sentence": [
            {
              "sentence_text": "This object can then be used to efficiently execute this statement multiple times.",
              "sentence_id": 350349
            },
            {
              "sentence_text": "If arbitrary parameter type conversions are required, the method setObject should be used with a target SQL type.",
              "sentence_id": 350352
            }
          ],
          "method": [
            {
              "method_name": "java.sql.PreparedStatement.clearParameters()",
              "method_sentence": [
                {
                  "sentence_text": "Setting a parameter value automatically clears its previous value.",
                  "sentence_id": 389257
                },
                {
                  "sentence_text": "However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method clearParameters.",
                  "sentence_id": 389258
                },
                {
                  "sentence_text": "Clears the current parameter values immediately.",
                  "sentence_id": 250071
                }
              ],
              "method_id": 22739
            },
            {
              "method_name": "java.sql.PreparedStatement.setObject(int,java.lang.Object)",
              "method_sentence": [
                {
                  "sentence_text": "Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type.",
                  "sentence_id": 389353
                },
                {
                  "sentence_text": "Note: Not all databases allow for a non-typed Null to be sent to the backend.",
                  "sentence_id": 389356
                },
                {
                  "sentence_text": "Note: This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.",
                  "sentence_id": 389358
                }
              ],
              "method_id": 22781
            },
            {
              "method_name": "java.sql.PreparedStatement.setObject(int,java.lang.Object,java.sql.SQLType,int)",
              "method_sentence": [
                {
                  "sentence_text": "Note that this method may be used to pass database-specific abstract data types.",
                  "sentence_id": 389372
                },
                {
                  "sentence_text": "If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength.",
                  "sentence_id": 389366
                },
                {
                  "sentence_text": "If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength.",
                  "sentence_id": 389367
                }
              ],
              "method_id": 22783
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.lang.reflect.Constructor",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html",
          "class_id": 1157,
          "class_sentence": [
            {
              "sentence_text": "Constructor permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an IllegalArgumentException if a narrowing conversion would occur.",
              "sentence_id": 347534
            },
            {
              "sentence_text": "Constructor provides information about, and access to, a single constructor for a class.",
              "sentence_id": 233011
            }
          ],
          "method": [
            {
              "method_name": "java.lang.reflect.Constructor.getDeclaredAnnotations()",
              "method_sentence": [
                {
                  "sentence_text": "The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.",
                  "sentence_id": 382260
                },
                {
                  "sentence_text": "If there are no annotations directly present on this element, the return value is an array of length 0.",
                  "sentence_id": 382259
                },
                {
                  "sentence_text": "Returns annotations that are directly present on this element.",
                  "sentence_id": 246051
                }
              ],
              "method_id": 18689
            },
            {
              "method_name": "java.lang.reflect.Constructor.getParameterAnnotations()",
              "method_sentence": [
                {
                  "sentence_text": "The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers.",
                  "sentence_id": 382274
                },
                {
                  "sentence_text": "A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method.",
                  "sentence_id": 382275
                },
                {
                  "sentence_text": "If the Executable has one or more parameters, a nested array of length zero is returned for each parameter with no annotations.",
                  "sentence_id": 382272
                }
              ],
              "method_id": 18696
            },
            {
              "method_name": "java.lang.reflect.Constructor.getParameterTypes()",
              "method_sentence": [
                {
                  "sentence_text": "Returns an array of length 0 if the underlying executable takes no parameters.",
                  "sentence_id": 382277
                },
                {
                  "sentence_text": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object.",
                  "sentence_id": 246060
                }
              ],
              "method_id": 18698
            }
          ]
        }
      ]
    ]
  },
  {
    "query": "How to hide cursor in a Swing application?",
    "summary_way": "APIKGSim",
    "summary": [
      [
        {
          "class_name": "javax.swing.JFrame",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html",
          "class_id": 3141,
          "class_sentence": [
            {
              "sentence_text": "The default behavior is to simply hide the JFrame when the user closes the window.",
              "sentence_id": 362372
            },
            {
              "sentence_text": "Warning: Swing is not thread safe.",
              "sentence_id": 362378
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JFrame.setContentPane(java.awt.Container)",
              "method_sentence": [
                {
                  "sentence_text": "Swing's painting architecture requires an opaque JComponent in the containment hierarchy.",
                  "sentence_id": 413552
                },
                {
                  "sentence_text": "If you replace the content pane it is recommended you replace it with an opaque JComponent.",
                  "sentence_id": 413554
                },
                {
                  "sentence_text": "This is typically provided by the content pane.",
                  "sentence_id": 413553
                }
              ],
              "method_id": 39276
            },
            {
              "method_name": "javax.swing.JFrame.processWindowEvent(java.awt.event.WindowEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Hides the window or disposes of it, as specified by the setting of the defaultCloseOperation property.",
                  "sentence_id": 413547
                },
                {
                  "sentence_text": "Processes window events occurring on this component.",
                  "sentence_id": 266136
                }
              ],
              "method_id": 39273
            },
            {
              "method_name": "javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Provides a hint as to whether or not newly created JFrames should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel.",
                  "sentence_id": 266141
                },
                {
                  "sentence_text": "If defaultLookAndFeelDecorated is true, the current LookAndFeel supports providing window decorations, and the current window manager supports undecorated windows, then newly created JFrames will have their Window decorations provided by the current LookAndFeel.",
                  "sentence_id": 413564
                },
                {
                  "sentence_text": "Otherwise, newly created JFrames will have their Window decorations provided by the current window manager.",
                  "sentence_id": 413565
                }
              ],
              "method_id": 39278
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JDialog",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html",
          "class_id": 3135,
          "class_sentence": [
            {
              "sentence_text": "Warning: Swing is not thread safe.",
              "sentence_id": 362261
            },
            {
              "sentence_text": "Warning: Serialized objects of this class will not be compatible with future Swing releases.",
              "sentence_id": 362263
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JDialog.setContentPane(java.awt.Container)",
              "method_sentence": [
                {
                  "sentence_text": "Swing's painting architecture requires an opaque JComponent in the containment hierarchy.",
                  "sentence_id": 413308
                },
                {
                  "sentence_text": "If you replace the content pane it is recommended you replace it with an opaque JComponent.",
                  "sentence_id": 413310
                },
                {
                  "sentence_text": "This is typically provided by the content pane.",
                  "sentence_id": 413309
                }
              ],
              "method_id": 39053
            },
            {
              "method_name": "javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel.",
                  "sentence_id": 265926
                },
                {
                  "sentence_text": "If defaultLookAndFeelDecorated is true, the current LookAndFeel supports providing window decorations, and the current window manager supports undecorated windows, then newly created JDialogs will have their Window decorations provided by the current LookAndFeel.",
                  "sentence_id": 413318
                },
                {
                  "sentence_text": "Otherwise, newly created JDialogs will have their Window decorations provided by the current window manager.",
                  "sentence_id": 413319
                }
              ],
              "method_id": 39055
            },
            {
              "method_name": "javax.swing.JDialog.setTransferHandler(javax.swing.TransferHandler)",
              "method_sentence": [
                {
                  "sentence_text": "If the system property suppressSwingDropSupport is false (the default) and the current drop target on this component is either null or not a user-set drop target, this method will change the drop target as follows: If newHandler is null it will clear the drop target.",
                  "sentence_id": 413327
                },
                {
                  "sentence_text": "Sets the transferHandler property, which is a mechanism to support transfer of data into this component.",
                  "sentence_id": 265933
                },
                {
                  "sentence_text": "Note: When used with JDialog, TransferHandler only provides data import capability, as the data export related methods are currently typed to JComponent.",
                  "sentence_id": 413329
                }
              ],
              "method_id": 39062
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Component",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html",
          "class_id": 532,
          "class_sentence": [
            {
              "sentence_text": "On the contrary, a heavyweight component is associated with a native window.",
              "sentence_id": 343472
            },
            {
              "sentence_text": "A lightweight component is a component that is not associated with a native window.",
              "sentence_id": 343471
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Component.setCursor(java.awt.Cursor)",
              "method_sentence": [
                {
                  "sentence_text": "Setting the cursor of a Container causes that cursor to be displayed within all of the container's subcomponents, except for those that have a non-null cursor.",
                  "sentence_id": 369814
                },
                {
                  "sentence_text": "This cursor image is displayed when the contains method for this component returns true for the current cursor location, and this Component is visible, displayable, and enabled.",
                  "sentence_id": 369813
                },
                {
                  "sentence_text": "The method may have no visual effect if the Java platform implementation and/or the native system do not support changing the mouse cursor shape.",
                  "sentence_id": 369815
                }
              ],
              "method_id": 9943
            },
            {
              "method_name": "java.awt.Component.getCursor()",
              "method_sentence": [
                {
                  "sentence_text": "Gets the cursor set in the component.",
                  "sentence_id": 237096
                },
                {
                  "sentence_text": "If no cursor is set in the entire hierarchy, Cursor.DEFAULT_CURSOR is returned.",
                  "sentence_id": 369526
                },
                {
                  "sentence_text": "If the component does not have a cursor set, the cursor of its parent is returned.",
                  "sentence_id": 369525
                }
              ],
              "method_id": 9806
            },
            {
              "method_name": "java.awt.Component.isCursorSet()",
              "method_sentence": [
                {
                  "sentence_text": "Returns whether the cursor has been explicitly set for this Component.",
                  "sentence_id": 237146
                },
                {
                  "sentence_text": "If this method returns false, this Component is inheriting its cursor from an ancestor.",
                  "sentence_id": 369589
                }
              ],
              "method_id": 9857
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.table.TableModel",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/table/TableModel.html",
          "class_id": 3570,
          "class_sentence": [
            {
              "sentence_text": "The JTable can be set up to display any data model which implements the TableModel interface with a couple of lines of code: TableModel myData = new MyTableModel(); JTable table = new JTable(myData); .",
              "sentence_id": 364133
            },
            {
              "sentence_text": "The TableModel interface specifies the methods the JTable will use to interrogate a tabular data model.",
              "sentence_id": 235377
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.table.TableModel.getRowCount()",
              "method_sentence": [
                {
                  "sentence_text": "This method should be quick, as it is called frequently during rendering.",
                  "sentence_id": 417851
                },
                {
                  "sentence_text": "A JTable uses this method to determine how many rows it should display.",
                  "sentence_id": 417850
                },
                {
                  "sentence_text": "Returns the number of rows in the model.",
                  "sentence_id": 271212
                }
              ],
              "method_id": 45969
            },
            {
              "method_name": "javax.swing.table.TableModel.getColumnCount()",
              "method_sentence": [
                {
                  "sentence_text": "A JTable uses this method to determine how many columns it should create and display by default.",
                  "sentence_id": 417847
                },
                {
                  "sentence_text": "Returns the number of columns in the model.",
                  "sentence_id": 271210
                }
              ],
              "method_id": 45967
            },
            {
              "method_name": "javax.swing.table.TableModel.removeTableModelListener(javax.swing.event.TableModelListener)",
              "method_sentence": [
                {
                  "sentence_text": "Removes a listener from the list that is notified each time a change to the data model occurs.",
                  "sentence_id": 271215
                }
              ],
              "method_id": 45972
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JComponent",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html",
          "class_id": 3133,
          "class_sentence": [
            {
              "sentence_text": "Top-level Swing containers -- such as JFrame, JDialog, and JApplet -- are specialized components that provide a place for other Swing components to paint themselves.",
              "sentence_id": 362200
            },
            {
              "sentence_text": "The base class for all Swing components except top-level containers.",
              "sentence_id": 234974
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "If null is returned, Swing will choose a location.",
                  "sentence_id": 413011
                },
                {
                  "sentence_text": "Returns the tooltip location in this component's coordinate system.",
                  "sentence_id": 265777
                },
                {
                  "sentence_text": "The default implementation returns null.",
                  "sentence_id": 413012
                }
              ],
              "method_id": 38902
            },
            {
              "method_name": "javax.swing.JComponent.setToolTipText(java.lang.String)",
              "method_sentence": [
                {
                  "sentence_text": "The text displays when the cursor lingers over the component.",
                  "sentence_id": 413199
                },
                {
                  "sentence_text": "Registers the text to display in a tool tip.",
                  "sentence_id": 265858
                }
              ],
              "method_id": 38983
            },
            {
              "method_name": "javax.swing.JComponent.createToolTip()",
              "method_sentence": [
                {
                  "sentence_text": "Components typically would not override this method, but it can be used to cause different tooltips to be displayed differently.",
                  "sentence_id": 412961
                },
                {
                  "sentence_text": "Returns the instance of JToolTip that should be used to display the tooltip.",
                  "sentence_id": 265735
                }
              ],
              "method_id": 38860
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JComboBox",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html",
          "class_id": 3132,
          "class_sentence": [
            {
              "sentence_text": "Warning: Swing is not thread safe.",
              "sentence_id": 362192
            },
            {
              "sentence_text": "Warning: Serialized objects of this class will not be compatible with future Swing releases.",
              "sentence_id": 362194
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JComboBox.setLightWeightPopupEnabled(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "Lightweight windows are more efficient than heavyweight windows, but lightweight and heavyweight components do not mix well in a GUI.",
                  "sentence_id": 412932
                },
                {
                  "sentence_text": "If your application mixes lightweight and heavyweight components, you should disable lightweight popups.",
                  "sentence_id": 412933
                },
                {
                  "sentence_text": "Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight Component such as a Panel or a Window.",
                  "sentence_id": 265711
                }
              ],
              "method_id": 38835
            },
            {
              "method_name": "javax.swing.JComboBox.addPopupMenuListener(javax.swing.event.PopupMenuListener)",
              "method_sentence": [
                {
                  "sentence_text": "For all standard look and feels shipped with Java, the popup list portion of combo box is implemented as a JPopupMenu.",
                  "sentence_id": 412890
                },
                {
                  "sentence_text": "A custom look and feel may not implement it this way and will therefore not receive the notification.",
                  "sentence_id": 412891
                },
                {
                  "sentence_text": "Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box.",
                  "sentence_id": 265657
                }
              ],
              "method_id": 38780
            },
            {
              "method_name": "javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()",
              "method_sentence": [
                {
                  "sentence_text": "This method is public but should not be called by anything other than the UI delegate.",
                  "sentence_id": 412897
                },
                {
                  "sentence_text": "Notifies PopupMenuListeners that the popup portion of the combo box has become invisible.",
                  "sentence_id": 265666
                }
              ],
              "method_id": 38789
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.JTable",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JTable.html",
          "class_id": 3172,
          "class_sentence": [
            {
              "sentence_text": "Warning: Swing is not thread safe.",
              "sentence_id": 362915
            },
            {
              "sentence_text": "The \"TableExample\" directory in the demo area of the source distribution gives a number of complete examples of JTable usage, covering how the JTable can be used to provide an editable view of data taken from a database and how to modify the columns in the display to use specialized renderers and editors.",
              "sentence_id": 362893
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.JTable.createScrollPaneForTable(javax.swing.JTable)",
              "method_sentence": [
                {
                  "sentence_text": "As of Swing version 1.0.2, replaced by new JScrollPane(aTable).",
                  "sentence_id": 414582
                }
              ],
              "method_id": 40457
            },
            {
              "method_name": "javax.swing.JTable.sizeColumnsToFit(boolean)",
              "method_sentence": [
                {
                  "sentence_text": "As of Swing version 1.0.3, replaced by doLayout().",
                  "sentence_id": 414794
                }
              ],
              "method_id": 40581
            },
            {
              "method_name": "javax.swing.JTable.getToolTipText(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "This is done automatically in initializeLocalVars, but if at a later point JTable is told setToolTipText(null) it will unregister the table component, and no tips from renderers will display anymore.",
                  "sentence_id": 414694
                },
                {
                  "sentence_text": "Note: For JTable to properly display tooltips of its renderers JTable must be a registered component with the ToolTipManager.",
                  "sentence_id": 414693
                },
                {
                  "sentence_text": "Overrides JComponent's getToolTipText method in order to allow the renderer's tips to be used if it has text set.",
                  "sentence_id": 267345
                }
              ],
              "method_id": 40515
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.event.MouseMotionListener",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseMotionListener.html",
          "class_id": 666,
          "class_sentence": [
            {
              "sentence_text": "The class that is interested in processing a mouse motion event either implements this interface (and all the methods it contains) or extends the abstract MouseMotionAdapter class (overriding only the methods of interest).",
              "sentence_id": 344531
            },
            {
              "sentence_text": "A mouse motion event is generated when the mouse is moved or dragged.",
              "sentence_id": 344533
            }
          ],
          "method": [
            {
              "method_name": "java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.",
                  "sentence_id": 239783
                }
              ],
              "method_id": 12538
            },
            {
              "method_name": "java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)",
              "method_sentence": [
                {
                  "sentence_text": "MOUSE_DRAGGED events will continue to be delivered to the component where the drag originated until the mouse button is released (regardless of whether the mouse position is within the bounds of the component).",
                  "sentence_id": 373124
                },
                {
                  "sentence_text": "Invoked when a mouse button is pressed on a component and then dragged.",
                  "sentence_id": 239782
                },
                {
                  "sentence_text": "Due to platform-dependent Drag&Drop implementations, MOUSE_DRAGGED events may not be delivered during a native Drag&Drop operation.",
                  "sentence_id": 373125
                }
              ],
              "method_id": 12537
            }
          ]
        }
      ],
      [
        {
          "class_name": "javax.swing.text.JTextComponent",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/javax/swing/text/JTextComponent.html",
          "class_id": 3639,
          "class_sentence": [
            {
              "sentence_text": "JTextComponent is the base class for swing text components.",
              "sentence_id": 235445
            },
            {
              "sentence_text": "Caret Changes The caret is a pluggable object in swing text components.",
              "sentence_id": 364561
            }
          ],
          "method": [
            {
              "method_name": "javax.swing.text.JTextComponent.setNavigationFilter(javax.swing.text.NavigationFilter)",
              "method_sentence": [
                {
                  "sentence_text": "NavigationFilter is used by DefaultCaret and the default cursor movement actions as a way to restrict the cursor movement.",
                  "sentence_id": 418803
                },
                {
                  "sentence_text": "Sets the NavigationFilter.",
                  "sentence_id": 272194
                }
              ],
              "method_id": 46980
            },
            {
              "method_name": "javax.swing.text.JTextComponent.getCaret()",
              "method_sentence": [
                {
                  "sentence_text": "Fetches the caret that allows text-oriented navigation over the view.",
                  "sentence_id": 272131
                }
              ],
              "method_id": 46917
            },
            {
              "method_name": "javax.swing.text.JTextComponent.getNavigationFilter()",
              "method_sentence": [
                {
                  "sentence_text": "NavigationFilter is used by DefaultCaret and the default cursor movement actions as a way to restrict the cursor movement.",
                  "sentence_id": 418663
                },
                {
                  "sentence_text": "A null return value implies the cursor movement and selection should not be restricted.",
                  "sentence_id": 418664
                },
                {
                  "sentence_text": "Returns the NavigationFilter.",
                  "sentence_id": 272146
                }
              ],
              "method_id": 46932
            }
          ]
        }
      ],
      [
        {
          "class_name": "java.awt.Frame",
          "class_url": "https://docs.oracle.com/javase/8/docs/api/java/awt/Frame.html",
          "class_id": 550,
          "class_sentence": [
            {
              "sentence_text": "Frames are capable of generating the following types of WindowEvents: WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose the window while processing this event, the window close operation is canceled.",
              "sentence_id": 343694
            },
            {
              "sentence_text": "In a multi-screen environment, you can create a Frame on a different screen device by constructing the Frame with Frame(GraphicsConfiguration) or Frame(String title, GraphicsConfiguration).",
              "sentence_id": 343683
            }
          ],
          "method": [
            {
              "method_name": "java.awt.Frame.getFrames()",
              "method_sentence": [
                {
                  "sentence_text": "Warning: this method may return system created frames, such as a shared, hidden frame which is used by Swing.",
                  "sentence_id": 370525
                },
                {
                  "sentence_text": "Note: To obtain a list of all ownerless windows, including ownerless Dialogs (introduced in release 1.6), use Window.getOwnerlessWindows.",
                  "sentence_id": 370527
                },
                {
                  "sentence_text": "If called from an applet, the array includes only the Frames accessible by that applet.",
                  "sentence_id": 370524
                }
              ],
              "method_id": 10454
            },
            {
              "method_name": "java.awt.Frame.addNotify()",
              "method_sentence": [
                {
                  "sentence_text": "Makes this Frame displayable by connecting it to a native screen resource.",
                  "sentence_id": 237731
                },
                {
                  "sentence_text": "This method is called internally by the toolkit and should not be called directly by programs.",
                  "sentence_id": 370517
                },
                {
                  "sentence_text": "Making a frame displayable will cause any of its children to be made displayable.",
                  "sentence_id": 370516
                }
              ],
              "method_id": 10450
            },
            {
              "method_name": "java.awt.Frame.removeNotify()",
              "method_sentence": [
                {
                  "sentence_text": "Makes this Frame undisplayable by removing its connection to its native screen resource.",
                  "sentence_id": 237745
                },
                {
                  "sentence_text": "This method is called by the toolkit internally and should not be called directly by programs.",
                  "sentence_id": 370541
                },
                {
                  "sentence_text": "Making a Frame undisplayable will cause any of its children to be made undisplayable.",
                  "sentence_id": 370540
                }
              ],
              "method_id": 10464
            }
          ]
        }
      ]
    ]
  }
]